- name: template values.yaml file
  template:
    src: "{{ chart_path }}/values.j2"
    dest: "{{ chart_path }}/values.yaml"

- name: copy and template env file from swarm role
  template:
    src: "{{item}}"
    dest: "{{role_path}}/templates/"
  with_items: "{{service_env[release_name]}}"

- name: create env configmap
  shell: find "{{role_path}}/templates/" -iname "*.env" -exec /bin/bash -c "ls {}; kubectl create configmap {{ release_name }}-config --from-env-file={} -n {{namespace}} --dry-run=client -o=yaml | kubectl apply -f - " \;

- name: create aplication configmap
  shell: find "{{role_path}}/templates/" -iname "*.conf" -exec /bin/bash -c "ls {}; kubectl create configmap {{ release_name }}-config --from-file={} -n {{namespace}} --dry-run=client -o=yaml | kubectl apply -f - " \;

- name: create xml configmap
  shell: find "{{role_path}}/templates/" -iname "*.xml" -exec /bin/bash -c "ls {}; kubectl create configmap {{ release_name }}-xml-config --from-file={} -n {{namespace}} --dry-run=client -o=yaml | kubectl apply -f - " \;

- name: Check opa testcases coverage is 100%
  include_role:
    name: "opa-test-coverage"
  when: vars[release_name + '_opa_enabled'] is defined and vars[release_name + '_opa_enabled'] and mandate_opa_tests_coverage

- name: Load role to decrypt private keys, copy public keys to helm chart
  include_role:
    name: mount-keys
    tasks_from: "{{outer_item.1}}"
  vars:
    private_key_path: "{{ outer_item.0.values_to_pass.basepath }}"
    private_key_prefix: "{{ outer_item.0.values_to_pass.keyprefix }}"
    private_key_sign_start: "{{ outer_item.0.values_to_pass.keystart }}"
    private_key_sign_end: "{{ outer_item.0.values_to_pass.keycount if outer_item.0.values_to_pass.keycount > '0' else '1'  }}"
  when: (mount_keycloak_key_apps is defined and release_name in mount_keycloak_key_apps) or (vars[release_name + '_opa_enabled'] is defined and vars[release_name + '_opa_enabled'])
  with_subelements:
    - "{{adminutil_access_values}}"
    - role_to_run
  loop_control:
    loop_var: outer_item

- name: Create the token pubic key file
  copy:
    dest: "{{ chart_path }}/keys/{{ adminutil_refresh_token_public_key_kid }}"
    content: "{{ core_vault_sunbird_sso_publickey }}"
  when: release_name in mount_keycloak_key_apps

- name: Replace ansible variables with values
  template:
    src: "{{ role_path }}/{{ opa_policies_path }}/{{ release_name }}/{{ item }}"
    dest: "{{ role_path }}/{{ opa_policies_path }}/{{ release_name }}/{{ item }}"
  with_items:
  - "{{ common_opa_policy_files }}"
  when: vars[release_name + '_opa_enabled'] is defined and vars[release_name + '_opa_enabled']

# Cannot use higher optimization in 0.34.2 version
# Opa issue - https://github.com/open-policy-agent/opa/issues/4111
# Removing test files from bundle manually using rm *_test.rego
# Opa issue - https://github.com/open-policy-agent/opa/issues/2944
- name: Create OPA bundle
  shell: rm *_test.rego && opa build --bundle . --optimize 0 --entrypoint "main/allow"
  args:
    chdir: "{{ role_path }}/{{ opa_policies_path }}/{{ release_name }}"
  when: vars[release_name + '_opa_enabled'] is defined and vars[release_name + '_opa_enabled']

- name: Copy the OPA bundle to helm chart directory
  copy:
    src: "{{ role_path }}/{{ opa_policies_path }}/{{ release_name }}/bundle.tar.gz"
    dest: "{{chart_path}}/bundle/"
  when: vars[release_name + '_opa_enabled'] is defined and vars[release_name + '_opa_enabled']

- name: helm install
  shell: helm upgrade --install --atomic --timeout {{helm_install_timeout | d('10m')}} {{ release_name }} {{ chart_path }} -n {{namespace}}

- name: Clean up keys
  include_role:
    name: mount-keys
    tasks_from: "{{item}}"
  when: "{{ release_name in mount_keycloak_key_apps }}"
  with_items:
    - remove-from-helm.yml
    - remove-keys-from-inventory.yml

- name: Get the deployment rollout status
  shell: "kubectl get deployments -A | grep -i {{ release_name }} | awk -F' ' '{print $3}' | awk -F/ '{if ($1 ~ $2){exit 0} else {exit 1}}'"
  register: task_result
  until: task_result.rc == 0
  retries: 6
  delay: 30

- name: Get deployed image name
  shell: kubectl get deployments.apps {{ release_name }} -o json -n {{ namespace }} | jq -r '.spec.template.spec.containers[0].image | split("/")[1]'
  register: deployed_image

- set_fact:
   metadata_image: "{{ image_name }}:{{ image_tag }}"

- name: Compare deployed image and metadata_image
  fail:
  when: deployed_image.stdout != metadata_image
