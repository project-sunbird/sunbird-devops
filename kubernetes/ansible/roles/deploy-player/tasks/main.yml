- name: remove blank lines in index file
  shell: "awk 'NF' {{cdn_file_path}} > /tmp/player-cdn-config"
  when: sunbird_portal_player_cdn_enabled == 'true'

- name: remove trailing spaces in index file
  shell: "awk '{$1=$1;print}' /tmp/player-cdn-config > {{cdn_file_path}} && rm /tmp/player-cdn-config"
  when: sunbird_portal_player_cdn_enabled == 'true'

- name: Remove the existing CDN config
  shell: "kubectl delete configmap player-cdn-config --namespace={{namespace}}"
  ignore_errors: true

- name: Create player-cdn configmap
  shell: "kubectl create configmap player-cdn-config --from-file={{cdn_file_path}} --namespace={{namespace}}"
  when: sunbird_portal_player_cdn_enabled == 'true'

- name: rename template
  template:
    src: "{{ chart_path }}/values.j2"
    dest: "{{ chart_path }}/values.yaml"

- name: copy env file from swarm role
  template:
    src: "{{service_env[release_name]}}"
    dest: "{{role_path}}/templates/{{ release_name }}.env"

- name: template vars
  template:
    src: "{{ release_name }}.env"
    dest: "{{role_path}}/templates/{{ release_name }}.env"

- name: create configmap
  shell: "kubectl create configmap player-config --from-env-file={{role_path}}/templates/{{ release_name }}.env -n {{namespace}} --dry-run -o=yaml | kubectl apply -f -"

- name: Load role to decrypt private keys, copy to helm chart and encrypt private keys
  include_role:
    name: mount-keys
    tasks_from: "{{outer_item.1}}"
  vars:
    private_key_path: "{{ outer_item.0.values_to_pass.basepath }}"
    private_key_prefix: "{{ outer_item.0.values_to_pass.keyprefix }}"
    private_key_sign_start: "{{ outer_item.0.values_to_pass.keystart }}"
    private_key_sign_end: "{{ outer_item.0.values_to_pass.keycount if outer_item.0.values_to_pass.keycount > '0' else '1'  }}"
  when: release_name == "player"
  with_subelements:
    - "{{adminutil_access_values}}"
    - role_to_run
  loop_control:
    loop_var: outer_item

- name: Create the token pubic key file
  copy:
    dest: "{{ chart_path }}/keys/{{ adminutil_refresh_token_public_key_kid }}"
    content: "{{ core_vault_sunbird_sso_publickey }}"
  when: release_name == "player"

- name: helm install and upgrade
  shell: helm upgrade --install --atomic --timeout {{helm_install_timeout | d("10m")}} {{ release_name }} {{ chart_path }} -n {{namespace}}

- name: Clean up keys
  include_role:
    name: mount-keys
    tasks_from: "{{item}}"
  when: release_name == "player"
  with_items:
    - remove-from-helm.yml
    - remove-keys-from-inventory.yml

- name: Get the deployment rollout status
  shell: "kubectl get deployments -A | grep -i {{ release_name }} | awk -F' ' '{print $3}' | awk -F/ '{if ($1 ~ $2){exit 0} else {exit 1}}'"
  register: task_result
  until: task_result.rc == 0
  retries: 6
  delay: 30

- name: Get deployed image name
  shell: kubectl get deployments.apps {{ release_name }} -o json -n {{ namespace }} | jq -r '.spec.template.spec.containers[0].image | split("/")[1]' 
  register: deployed_image

- set_fact:
   metadata_image: "{{ image_name }}:{{ image_tag }}"

- name: Compare deployed image and metadata_image
  fail:
  when: deployed_image.stdout != metadata_image
