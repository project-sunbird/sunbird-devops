---
# tasks file for bootstrap-k8s

- hosts: local
  gather_facts: false
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  serial: 1
  vars:
    helm_vars:
      reloader:
        watchGlobally: false
  vars_files:
    - "{{inventory_dir}}/secrets.yml"
  pre_tasks:
    - name: Creating tmp file
      tempfile:
        state: file
        suffix: helm
      register: helm_file
    - name: Creating helm_charts vars file
      copy:
        content: "{{ helm_vars|to_yaml }}"
        dest: "{{ helm_file.path }}"
    - name: Creating namespace
      shell: "kubectl create namespace {{ item }} "
      with_items:
        - "{{ bootstrap_namespace.split(',') }}"
        - monitoring
        - logging
      ignore_errors: yes
    - name: Creating docker secrets
      shell: "kubectl create secret docker-registry {{ imagepullsecrets }} --namespace {{ item }} --docker-server {{ vault_docker_registry_url }} --docker-username {{ vault_docker_registry_user }} --docker-password {{ vault_docker_registry_password }} --dry-run -o=yaml | kubectl apply -f -"
      when: imagepullsecrets|length > 0
      with_items:
        - "{{ bootstrap_namespace.split(',') }}"
    - name: Creating domain ssl
      shell: 
        cmd: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: ingress-cert
            namespace: "{{ bootstrap_namespace.split(',')[0] }}"
          data:
            ca.crt: ""
            site.crt: "{{ core_vault_proxy_site_crt | b64encode }}"
            site.key: "{{ core_vault_proxy_site_key | b64encode }}"
          EOF
    - name: Creating domain ssl
      shell:
        cmd: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: ingress-merge-cert
            namespace: "{{ bootstrap_namespace.split(',')[0] }}"
          type: kubernetes.io/tls
          data:
            ca.crt: ""
            tls.crt: "{{ proxymerge_site_crt | b64encode }}"
            tls.key: "{{ proxymerge_site_key | b64encode }}"
          EOF
      when:  merge_proxy_server_name is not none and proxymerge_site_crt is defined and proxymerge_site_key is defined

    - name: Installing reloader for configmaps reload
      shell: helm upgrade --install --atomic reloader "{{ playbook_dir }}"/../helm_charts/core/reloader --namespace "{{ item }}" -f "{{ helm_file.path }}"
      with_items:
        - "{{ bootstrap_namespace.split(',') }}"
