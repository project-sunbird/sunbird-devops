apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
{{ include "reloader-helm3.annotations" . | indent 4 }}
{{- if .Values.reloader.deployment.annotations }}
{{ toYaml .Values.reloader.deployment.annotations | indent 4 }}
{{- end }}
  labels:
{{ include "reloader-labels.chart" . | indent 4 }}
{{- if .Values.reloader.deployment.labels }}
{{ toYaml .Values.reloader.deployment.labels | indent 4 }}
{{- end }}
{{- if .Values.reloader.matchLabels }}
{{ toYaml .Values.reloader.matchLabels | indent 4 }}
{{- end }}
  name: {{ template "reloader-fullname" . }}
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: {{ template "reloader-fullname" . }}
      release: {{ .Release.Name | quote }}
{{- if .Values.reloader.matchLabels }}
{{ toYaml .Values.reloader.matchLabels | indent 6 }}
{{- end }}
  template:
    metadata:
{{- if .Values.reloader.deployment.pod.annotations }}
      annotations:
{{ toYaml .Values.reloader.deployment.pod.annotations | indent 8 }}
{{- end }}
      labels:
{{ include "reloader-labels.chart" . | indent 8 }}
{{- if .Values.reloader.deployment.labels }}
{{ toYaml .Values.reloader.deployment.labels | indent 8 }}
{{- end }}
{{- if .Values.reloader.matchLabels }}
{{ toYaml .Values.reloader.matchLabels | indent 8 }}
{{- end }}
    spec:
      {{- if .Values.reloader.deployment.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.reloader.deployment.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.reloader.deployment.affinity }}
      affinity:
{{ toYaml .Values.reloader.deployment.affinity | indent 8 }}
      {{- end }}
      {{- if .Values.reloader.deployment.tolerations }}
      tolerations:
{{ toYaml .Values.reloader.deployment.tolerations | indent 8 }}
      {{- end }}
      {{- if .Values.reloader.deployment.priorityClassName }}
      priorityClassName: {{ .Values.reloader.deployment.priorityClassName }}
      {{- end }}
      containers:
      - image: "{{ .Values.reloader.deployment.image.name }}:{{ .Values.reloader.deployment.image.tag }}"
        imagePullPolicy: {{ .Values.reloader.deployment.image.pullPolicy }}
        name: {{ template "reloader-fullname" . }}
      {{- if or (.Values.reloader.deployment.env.open) (.Values.reloader.deployment.env.secret) (.Values.reloader.deployment.env.field) (eq .Values.reloader.watchGlobally false) }}
        env:
      {{- range $name, $value := .Values.reloader.deployment.env.open }}
      {{- if not (empty $value) }}
        - name: {{ $name | quote }}
          value: {{ $value | quote }}
      {{- end }}
      {{- end }}
      {{- $secret_name := include "reloader-fullname" . }}
      {{- range $name, $value := .Values.reloader.deployment.env.secret }}
      {{- if not ( empty $value) }}
        - name: {{ $name | quote }}
          valueFrom:
            secretKeyRef:
              name: {{ $secret_name }}
              key: {{ $name | quote }}
      {{- end }}
      {{- end }}
      {{- range $name, $value := .Values.reloader.deployment.env.field }}
      {{- if not ( empty $value) }}
        - name: {{ $name | quote }}
          valueFrom:
            fieldRef:
              fieldPath: {{ $value | quote}}
      {{- end }}
      {{- end }}
      {{- if eq .Values.reloader.watchGlobally false }}
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      {{- end }}
      {{- end }}

        ports:
        - name: http
          containerPort: 9090
        livenessProbe:
          httpGet:
            path: /metrics
            port: http
          timeoutSeconds: {{ .Values.reloader.deployment.livenessProbe.timeoutSeconds | default "5" }}
          failureThreshold: {{ .Values.reloader.deployment.livenessProbe.failureThreshold | default "5" }}
          periodSeconds: {{ .Values.reloader.deployment.livenessProbe.periodSeconds | default "10" }}
          successThreshold: {{ .Values.reloader.deployment.livenessProbe.successThreshold | default "1" }}
        readinessProbe:
          httpGet:
            path: /metrics
            port: http
          timeoutSeconds: {{ .Values.reloader.deployment.readinessProbe.timeoutSeconds | default "5" }}
          failureThreshold: {{ .Values.reloader.deployment.readinessProbe.failureThreshold | default "5" }}
          periodSeconds: {{ .Values.reloader.deployment.readinessProbe.periodSeconds | default "10" }}
          successThreshold: {{ .Values.reloader.deployment.readinessProbe.successThreshold | default "1" }}

      {{- if eq .Values.reloader.readOnlyRootFileSystem true }}
        volumeMounts:
          - mountPath: /tmp/
            name: tmp-volume
      {{- end }}
      {{- if or (.Values.reloader.logFormat) (.Values.reloader.ignoreSecrets) (.Values.reloader.ignoreNamespaces) (.Values.reloader.ignoreConfigMaps) (.Values.reloader.custom_annotations) (eq .Values.reloader.isArgoRollouts true) (ne .Values.reloader.reloadStrategy "default")}}
        args:
          {{- if .Values.reloader.logFormat }}
          - "--log-format={{ .Values.reloader.logFormat }}"
          {{- end }}
          {{- if .Values.reloader.ignoreSecrets }}
          - "--resources-to-ignore=secrets"
          {{- end }}
          {{- if .Values.reloader.ignoreConfigMaps }}
          - "--resources-to-ignore=configMaps"
          {{- end }}
          {{- if .Values.reloader.ignoreNamespaces }}
          - "--namespaces-to-ignore={{ .Values.reloader.ignoreNamespaces }}"
          {{- end }}

          {{- if .Values.reloader.custom_annotations }}
            {{- if .Values.reloader.custom_annotations.configmap }}
          - "--configmap-annotation"
          - "{{ .Values.reloader.custom_annotations.configmap }}"
            {{- end }}
            {{- if .Values.reloader.custom_annotations.secret }}
          - "--secret-annotation"
          - "{{ .Values.reloader.custom_annotations.secret }}"
            {{- end }}
            {{- if .Values.reloader.custom_annotations.auto }}
          - "--auto-annotation"
          - "{{ .Values.reloader.custom_annotations.auto }}"
            {{- end }}
            {{- if .Values.reloader.custom_annotations.search }}
          - "--auto-search-annotation"
          - "{{ .Values.reloader.custom_annotations.search }}"
            {{- end }}
            {{- if .Values.reloader.custom_annotations.match }}
          - "--search-match-annotation"
          - "{{ .Values.reloader.custom_annotations.match }}"
            {{- end }}
          {{- end }}
          {{- if eq .Values.reloader.isArgoRollouts true }}
          - "--is-Argo-Rollouts={{ .Values.reloader.isArgoRollouts }}"
          {{- end }}
          {{- if ne .Values.reloader.reloadStrategy "default" }}
          - "--reload-strategy={{ .Values.reloader.reloadStrategy }}"
          {{- end }}
      {{- end }}
      {{- if .Values.reloader.deployment.resources }}
        resources:
{{ toYaml .Values.reloader.deployment.resources | indent 10 }}
      {{- end }}
{{- if .Values.reloader.deployment.securityContext }}
      securityContext: {{ toYaml .Values.reloader.deployment.securityContext | nindent 8 }}
{{- end }}
      serviceAccountName: {{ template "reloader-serviceAccountName" . }}
    {{- if eq .Values.reloader.readOnlyRootFileSystem true }}
      volumes:
        - emptyDir: {}
          name: tmp-volume
    {{- end }}
