#Platform Configuration
platform.services=["learning", "language", "config"]

# Learning-Service Configuration
learning.graph_ids=["domain"]
content.metadata.visibility.parent=["textbookunit", "courseunit", "lessonplanunit"]

# Language-Service Configuration
language.graph_ids=["as","bn","en","gu","hi","hoc","jun","ka","mai","mr","unx","or","san","sat","ta","te","urd","pj"]

# Redis Configuration
redis.host="{{ redis_host }}"
redis.port={{ redis_port }}
redis.maxConnections=128

# Cassandra Configuration
content.keyspace.name="{{ content_keyspace_name }}"
hierarchy.keyspace.name="{{ hierarchy_keyspace_name }}"
content.hierarchy.table="content_hierarchy"
framework.hierarchy.table="framework_hierarchy"

dialcode.keyspace.name="{{ dialcode_keyspace_name }}"
dialcode.keyspace.table="dial_code"
dialcode.max_count=1000

system.config.keyspace.name="{{ dialcode_keyspace_name }}"
system.config.table="system_config"
publisher.keyspace.name="{{ dialcode_keyspace_name }}"
publisher.keyspace.table="publisher"

#DIAL Code Generator Configuration
dialcode.strip.chars="0"
dialcode.length=6.0
dialcode.large.prime_number=1679979167

dialcode.es_conn_info="{{ dial_es_index_host }}"
dialcode.search.limit=1000

#DIAL Code ElasticSearch Configuration
{{ dialcode_keyspace_name }}.dial_code.index=true
{{ dialcode_keyspace_name }}.dial_code.object_type="DialCode"

audit.es_conn_info="{{ audit_es_index_host  }}"

#Assessment Item Configuration 
assessment.keyspace.name="{{ content_keyspace_name }}"
assessment.keyspace.table="question_data"

# Actor System Configuration
LearningActorSystem {
  akka {
    actor {
      default-dispatcher {
          type = "Dispatcher"
        executor = "fork-join-executor"
        fork-join-executor {
            parallelism-min = 1
            parallelism-factor = 2.0
            parallelism-max = 4
        }
          # Throughput for default Dispatcher, set to 1 for as fair as possible
          throughput = 1
      }
      deployment {
        /HealthCheckManager
        {
          router = smallest-mailbox-pool
                  nr-of-instances = 5
        }
      }
    }
  }
}

env= ""

#Current environment
cloud_storage.env = "{{ cloud_storage_config_environment }}"

#Folder configuration
cloud_storage.content.folder = "content"
cloud_storage.asset.folder = "assets"
cloud_storage.artefact.folder = "artifact"
cloud_storage.bundle.folder = "bundle"
cloud_storage.media.folder = "media"
cloud_storage.ecar.folder = "ecar_files"
cloud_storage.itemset.folder = "itemset"

cloud_storage.upload.url.ttl = 600


# Media download configuration
content.media.base.url="{{content_media_base_url}}"
plugin.media.base.url="{{plugin_media_base_url}}"


# Content Extraction Configuration

#directory location where store unzip file
dist.directory = "/data/tmp/dist/"
output.zipfile = "/data/tmp/story.zip"
source.folder  = "/data/tmp/temp2/"
save.directory = "/data/tmp/temp/"

# FOR CONTENT WORKFLOW PIPELINE (CWP)

#--Content Workflow Pipeline Mode
OPERATION_MODE = "TEST"

#--Maximum Content Package File Size Limit in Bytes (50 MB)
MAX_CONTENT_PACKAGE_FILE_SIZE_LIMIT = 52428800

#--Maximum Asset File Size Limit in Bytes (20 MB - 20971520)
MAX_ASSET_FILE_SIZE_LIMIT = 52428800

#--No of Retry While File Download Fails
RETRY_ASSET_DOWNLOAD_COUNT = 1

# H5P Library Path
content.h5p.library.path="{{ learning_content_h5p_library_path }}"

# ElasticSearch Configuration
search.es_conn_info="{{ es_index_host }}"
search.fields.query=["name^100","title^100","lemma^100","code^100","domain","subject","description^10","keywords^100","ageGroup^10","filter^10","theme^10","genre^10","objects^25","contentType^100","language^200","teachingMode^25","skills^10","learningObjective^10","curriculum^100","gradeLevel^100","developer^100","attributions^10","identifier^100","IL_UNIQUE_ID^100","owner^50","board^100", "creator^100", "dialcodes^100","text","words","releaseNotes"]
search.fields.date=["lastUpdatedOn","createdOn","versionDate","lastSubmittedOn","lastPublishedOn"]
search.batch.size=500
search.connection.timeout=30

platform-api-url="{{ platform_api_url }}"

# Language Index Configuration
ignoreStartWordsList=["<Sentence","id=","<fs","head=","case_name=","paradigm=","name=","inf="]
tagNamesList=["NN","NST","PRP","DEM","VM","VAUX","JJ","RB","PSP","RP","CC","WQ","QF","QC","QO","CL","INTF","INJ","NEG","*C","RDP","ECH","UNK","NP","VGF","VGNF","VGINF","VGNN","JJP","RBP","NEGP","CCP","FRAGP","BLK"]
discardTokensList=["NNP","((","))","SYM"]
attributesTagIdentifier=af
specialCharRegEx="^([$&+,:;=?@#|!]*)$"
numberRegEx="^([+-]?\\d*\\.?\\d*)$"
defaultTokenCountAfterWord=10

# Neo4j Graph Configuration
graph.dir="/data/graphDB"
akka.request_timeout=30
environment.id="{{ environment_id }}"
graph.passport.key.base="{{ graph_passport_key }}"
route.domain="{{ learning_neo4j_bolt_url }}"
route.bolt.read.domain="{{ learning_read_elb_url }}"
route.bolt.write.domain="{{ learning_write_elb_url }}"
route.all="{{ language_neo4j_bolt_url }}"
route.bolt.read.all="{{ language_read_elb_url }}"
route.bolt.write.all="{{ language_write_elb_url }}"
shard.id="{{ mw_shard_id }}"
platform.auth.check.enabled=false
platform.cache.ttl=3600000
platform.object.bookmark.expiry="{{ object_bookmark_expiry_in_seconds }}"

language.map={"Hindi":"hi", "English":"en", "Telugu":"te", "Kannada":"ka", "Tamil":"ta", "Assamese":"as", "Bengali":"bn", "Bodo":"bo", "Gujarati":"gu", "Konkani":"ko", "Malayalam":"ml", "Marathi":"mr", "Nepali":"ne", "Odia":"or", "Punjabi":"pj", "Sanskrit":"san"}

framework.max_term_creation_limit=200

# Enable Suggested Framework in Get Channel API.
channel.fetch.suggested_frameworks=true

# Kafka configuration details
kafka.topics.instruction="{{ kafka_topics_instruction }}"
kafka.publish.request.topic="{{ kafka_publish_request_topic }}"
kafka.urls="{{ graphevent_kafka_url }}"
kafka.topic.system.command="{{ kafka_topic_system_command }}"
job.request.event.mimetype=["application/pdf",
                              "application/vnd.ekstep.ecml-archive",
                              "application/vnd.ekstep.html-archive",
                              "application/vnd.android.package-archive",
                              "application/vnd.ekstep.content-archive",
                              "application/epub",
                              "application/msword",
                              "application/vnd.ekstep.h5p-archive",
                              "video/webm",
                              "video/mp4",
                              "application/vnd.ekstep.content-collection",
                              "video/quicktime",
                              "application/octet-stream",
                              "application/json",
                              "application/javascript",
                              "application/xml",
                              "text/plain",
                              "text/html",
                              "text/javascript",
                              "text/xml",
                              "text/css",
                              "image/jpeg",
                              "image/jpg",
                              "image/png",
                              "image/tiff",
                              "image/bmp",
                              "image/gif",
                              "image/svg+xml",
                              "image/x-quicktime",
                              "video/avi",
                              "video/mpeg",
                              "video/quicktime",
                              "video/3gpp",
                              "video/mp4",
                              "video/ogg",
                              "video/webm",
                              "video/msvideo",
                              "video/x-msvideo",
                              "video/x-qtc",
                              "video/x-mpeg",
                              "audio/mp3",
                              "audio/mp4",
                              "audio/mpeg",
                              "audio/ogg",
                              "audio/webm",
                              "audio/x-wav",
                              "audio/wav",
                              "audio/mpeg3",
                              "audio/x-mpeg-3",
                              "audio/vorbis",
                              "application/x-font-ttf",
                              "application/vnd.ekstep.plugin-archive",
                              "video/x-youtube",
                              "video/youtube",
                              "text/x-url"]

#Youtube Standard Licence Validation
learning.content.youtube.validate.license=true
learning.content.youtube.application.name="{{ youtube_app_name }}"
learning_content_youtube_apikey="{{ youtube_api_key }}"

#Telemetry pdata ID
telemetry_env="{{ instance }}"
telemetry.pdata_id="{{ instance }}.ekstep.learning.platform"
telemetry.search.topn=5

#Copy Content validation configuration
learning.content.copy.invalid_status_list=["Flagged","FlagDraft","FlagReview","Retired", "Processing"]
learning.content.copy.props_to_remove=["downloadUrl", "artifactUrl", "variants","createdOn", "collections", "children",
"lastUpdatedOn", "SYS_INTERNAL_LAST_UPDATED_ON","versionKey", "s3Key", "status", "pkgVersion", "toc_url",
"mimeTypesCount", "contentTypesCount", "leafNodesCount", "childNodes", "prevState", "lastPublishedOn", "flagReasons",
"compatibilityLevel", "size", "publishChecklist", "publishComment", "lastPublishedBy", "rejectReasons", "rejectComment",
 "gradeLevel", "subject", "medium", "board", "topic", "purpose", "subtopic", "contentCredits", "owner",
 "collaborators", "creators", "contributors", "badgeAssertions", "dialcodes", "concepts", "keywords", "reservedDialcodes", "dialcodeRequired", "leafNodes"]

# Metadata to be added to copied content from origin
learning.content.copy.origin_data=["name", "author", "license", "organisation"]

learning.content.type.not.copied.list=["Asset"]

#Youtube License Validation Regex Pattern
youtube.license.regex.pattern=["\\?vi?=([^&]*)", "watch\\?.*v=([^&]*)", "(?:embed|vi?)/([^/?]*)","^([A-Za-z0-9\\-\\_]*)"]

#Cloud Storage details
cloud_storage_type="{{ cloud_service_provider }}"
cloud_storage_key="{{ cloud_public_storage_accountname }}"
cloud_storage_secret="{{ cloud_public_storage_secret }}"
cloud_storage_container="{{ cloud_storage_content_bucketname }}"

installation.id="{{ instance_name }}"

# Configuration for DIALCode linking
learning.content.link_dialcode_validation=true
dialcode.api.search.url="{{ dial_service_search_url }}"
dialcode.api.generate.url="{{dial_service_generate_url}}"

# Configuration for default channel ID
channel.default="in.ekstep"

learning.telemetry_ignored_props=["body","screenshots","stageIcons","editorState"]
learning.telemetry_req_length=100

learning.valid_license=["creativeCommon"]
learning.service_provider=["youtube"]

# Valid content type for dialcode reserve
learning.reserve_dialcode.mimeType=["application/vnd.ekstep.content-collection"]

# Max count to be reserved against a content
learnig.reserve_dialcode.max_count=2500

cassandra.lp.connection="{{ lp_cassandra_connection }}"
cassandra.lpa.connection="{{ dp_cassandra_connection }}"

compositesearch.index.name="{{ compositesearch_index_name }}"

#restrict.metadata.objectTypes="Content,ContentImage,AssessmentItem,Channel,Framework,Category,CategoryInstance,Term,Concept,Dimension,Domain"

# Consistency Level for Multi Node Cassandra cluster
cassandra.lp.consistency.level=QUORUM

# Redis Cache Configuration
content.cache.ttl=86400
content.cache.read=true
content.cache.hierarchy=true

framework.categories_cached=["subject", "medium", "gradeLevel", "board"]
framework.cache.ttl=86400
framework.cache.read=true

# Creative common license type
content.license="CC BY 4.0"

# Content Tagging Config
content.tagging.backward_enable=true
content.tagging.property="subject,medium"

# Search Service Config
kp.search_service.base_url="{{ kp_search_service_base_url }}"

# CNAME migration variables
cloudstorage {
  metadata.replace_absolute_path=true
  relative_path_prefix={{ cloudstorage_relative_path_prefix_content }}
  metadata.list={{ cloudstorage_metadata_list }}
  read_base_path="{{ cloudstorage_base_path }}"
  write_base_path={{ valid_cloudstorage_base_urls }}
}