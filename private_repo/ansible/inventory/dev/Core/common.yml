# ------------------------------------------------------------------------------------------------------------ #
# Mandatorty variables - DO NOT LEAVE ANYTHING BLANK #
# ------------------------------------------------------------------------------------------------------------ #
cloud_service_provider: ""       # Your cloud service provider name. Supported values are aws, azure, gcloud
domain_name: ""                  # your domain name like example.com
dockerhub: "change.docker.url"   # docker hub username or url incase of private registry
# This ip should be in the kubenetes subnet range. For example, if your kube cluster is running in `10.0.0.0/24, then it can be 10.0.0.5. Make sure this ip is not allocated to any other things.`
private_ingressgateway_ip: ""     # your private kubernetes load balancer ip

# Cloud Service Provider Variables
# If cloud_service_provider is AWS then update with access key as value
# Example: cloud_public_storage_accountname: "AKSHKSJHFJDHJDSHFKSD"
# If cloud_service_provider is gloud(GCP) then update with service account name
# Example: cloud_public_storage_accountname: "cloudstorage-gcp-test.iam.gserviceaccount.com"
# If cloud_service_provider is AZURE then update with stoage account name
# Example: cloud_public_storage_accountname: "azurestotageaccount"
cloud_public_storage_accountname: ""
# If cloud_service_provider is AWS then update with region
# Example: cloud_public_storage_region: us-east-1
cloud_public_storage_region: ""
# If cloud_service_provider is gcp then update this variable with project id
# Example: cloud_public_storage_project: "sunbird-gcp-test"
cloud_public_storage_project: ""


# Create object storage for each below mentioned variables and update accordingly
# If cloud_service_provider is AWS update with bucket name
# If cloud_service_provider is gcloud(GCP) update with bucket name
# If cloud_service_provider is AZURE update with container name 
# Example: cloud_storage_certqr_bucketname: "certqr-storage"
cloud_storage_certqr_bucketname: ""
# This storage contains chatbot related data
# Example: cloud_storage_chatbot_bucketname: "chatbot-storage"
cloud_storage_chatbot_bucketname: ""
# This storage contains dial related data
# Example: cloud_storage_dial_bucketname: "dial-storage"
cloud_storage_dial_bucketname: ""
# This storage contains flink checkpoint data
# Example: cloud_storage_flink_bucketname: "flink-storage"
cloud_storage_flink_bucketname: ""
# This storage contains portal cdn file
# Example: cloud_storage_playercdn_bucketname: "playercdn-storage"
cloud_storage_playercdn_bucketname: ""
# This storage contains public data
# Example: cloud_storage_public_bucketname: "public-storage"
cloud_storage_public_bucketname: ""
# This storage contains public reports data
# Example: cloud_storage_publicreports_bucketname: "publicreports-storage"
cloud_storage_publicreports_bucketname: ""
# This storage contains private reports data
# Example: cloud_storage_privatereports_bucketname: "privatereports-storage"
cloud_storage_privatereports_bucketname: ""
# This storage contains samiksha data
# Example: cloud_storage_samiksha_bucketname: "samiksha-storage"
cloud_storage_samiksha_bucketname: ""
# This storage contains schema data
# Example: cloud_storage_schema_bucketname: "schema-storage"
cloud_storage_schema_bucketname: ""
# This storage contains sourcing related data
# Example: cloud_storage_sourcing_bucketname: "sourcing-storage"
cloud_storage_sourcing_bucketname: ""
# This storage contains desktop app data
# Example: cloud_storage_offlineinstaller_bucketname: "offlineinstaller-storage"
cloud_storage_offlineinstaller_bucketname: ""
# This storage contains public schemas, contents
# Example: cloud_storage_content_bucketname: "content-storage"
cloud_storage_content_bucketname: ""
# This storage contains telemetry data
# Example: cloud_storage_telemetry_bucketname: "telemetry-storage"
cloud_storage_telemetry_bucketname: ""
# This storage contains T & C data
# Example: cloud_storage_termsandcondtions_bucketname: "termsandconditions-storage"
cloud_storage_termsandcondtions_bucketname: ""
# Example: cloud_storage_user_bucketname: "user-storage"
cloud_storage_user_bucketname: ""
# This storage contains crashlogs
# Example: cloud_storage_desktopappcrashlogs_bucketname: "desktopappcrashlogs-storage"
cloud_storage_desktopappcrashlogs_bucketname: ""
# This storage contains labels data
# Example: cloud_storage_label_bucketname: "label-storage"
cloud_storage_label_bucketname: ""
# Example: cloud_storage_certservice_bucketname: "certservice-storage"
cloud_storage_certservice_bucketname: ""
# This storage contains UCI services data
# Example: cloud_storage_uci_bucketname: "uci-storage"
cloud_storage_uci_bucketname: "" 
# This storage contains artifacts data
# Example: cloud_storage_artifacts_bucketname: "artifact-storage"
cloud_storage_artifacts_bucketname: ""
# This storage contains backups data
# Example: cloud_storage_management_bucketname: "management-storage"
cloud_storage_management_bucketname: ""

# Uncomment the variable based on your cloud provider (as a default we have kept Azure variable uncommented)
# GCP
# cloud_storage_url: https://storage.googleapis.com
# AWS
# cloud_storage_url: "https://s3.{{ cloud_public_storage_region }}.amazonaws.com"
# Azure
cloud_storage_url: "https://{{ cloud_public_storage_accountname }}.blob.core.windows.net"

# ------------------------------------------------------------------------------------------------------------ #
# Cloud / Infra Specific values - Check these and update accordingly

# Kubernetes annotation to create private loadbalancer. Will be used for private nginx and others.
# for google:
# nginx_private_ingress_annotations:
#   cloud.google.com/load-balancer-type: "Internal"
# for azure:
# nginx_private_ingress_annotations:
#   service.beta.kubernetes.io/azure-load-balancer-internal: "true"

nginx_private_ingress_annotations:
  service.beta.kubernetes.io/azure-load-balancer-internal: "true"

# ------------------------------------------------------------------------------------------------------------ #

graylog_trusted_proxies: "1.2.3.4/21" # This should be the kubernetes nodes subnet CIDR range

## Optional

learningservice_ip: "10.0.1.5"             # Load balancer IP or server ip
keycloak_url: "http://10.0.1.6:8080"       # Keycloak Load balancer IP; eg http://10.10.10.10 or VM IP with port like http://10.10.10.10:8080
env: dev                  # some name like dev, preprod etc
proto: https               # http or https, preferably https
sunbird_default_channel: sunbird                # default sunbird channel name
environment_id: "10000003"                                 # A 8 digit number for example like 1000000, should be same as defined in KP common.yml

# This sms sender id should be verified by your provider. This is the sender id which will be used for `From Address`. For example,
#
# From: SBSMS
# Hi.....
# This is optional.
# If not set, you won't get sms OTPs. You'll get it in mail though.
sunbird_msg_sender:                              # SMS from Address; exact 6 char like SBSUNB

#sunbird_cassandra_replication_strategy: '{"class":"NetworkTopologyStrategy","datacenter1":2}' # If using cluster give this value and choose datacenter and replication factor as required '{"class":"NetworkTopologyStrategy","datacenter1":2}' if not using cluster, leave this variable commented

# ------------------------------------------------------------------------------------------------------------ #
#
# **Optional variables** - Can be left blank if you dont plan to use the intended features
#
# ------------------------------------------------------------------------------------------------------------ #
kibana_oauth_authenticated_email_domains_kube: '["domain.com","domain1.com"]'   # whitelisted domains for accessing kibana
# whitelisted email ids for access kibana
kibana_oauth_authenticated_email_ids:
  - email1
  - email2
sunbird_env_logo_url:                           # A public url for logo, this logo url will be used in emails
monitor_alerts_slack_channel:           # Slack channel to receive alerts from monitoring stack

# Certs related vars
certs_badge_name: ""                 # Course Completion Certificate Name e.g value is "Course Completion Certificate"
certs_badge_description: ""           # Descripton of course Completion e.g value is "Successfully completed course on Sunbird"
certs_badge_image: ""                # Image of the certs badge e.g value is "sunbird"
certs_badge_root_org_id: ""          # Root org ID for which the certs will be created e.g value is "0124229474659643111"
certs_badge_issuer_name: ""          # The issuer of the certs name e.g value is "Government of karnataka"
certs_badge_issuer_url:  ""          # Issuer organisation official URL e.g value is "https://testdomain.in"

# For sendgrid, if you want to change, update the following
mail_server_host: "smtp.sendgrid.net"                               # Email host, can be any email provider
mail_server_username: "apikey"                           # Email provider username; for sendgrid you can use "apikey"

# This mail id should be verified by your provider. This is the mail id which will be used for `From Address`. For example,
#
# From: support@sunbird.org
# Subject: Forgot password
# Hi.....
sunbird_mail_server_from_email: "support@myorg.com"       # Email ID that should be as from address in mails
# List of mail ids to whome the monitoring alerts should be sent.
alerts_mailing_list : "devops@myorg.com"                         # Comma separated mail list for Alerts; eg: user1@mail.com, user2@mail.com

# ------------------------------------------------------------------------------------------------------------ #
# Sensible defaults which you need not change - But if you would like to change, you are free to do so
env_name: "{{ env }}"
sunbird_app_name: "sunbird"                       # default sunbird app name
postgres:
  db_url: "{{ groups['postgres'][0] }}"
  db_username: analytics
  db_name: analytics
  db_password: "{{core_vault_dp_pgdb_password}}"
  db_table_name: "{{env}}_consumer_channel_mapping"
  db_port: 5432
  db_admin_user: postgres
  db_admin_password: "{{core_vault_postgres_password}}"


keycloak_api_management_user_email: "admin@sunbird.org"
sunbird_installation_email: "admin@sunbird.org"

# Other vars
cert_service_container_name: e-credentials               # Conatiner name for cert service to store cert templates
cert_service_cloud_storage_type: azure                   # Changes this if you use other clouds like aws, gcp
dataexhaust_super_admin_channel: sunbird
dedup_redis_host: "{{ groups['dp-redis'][0] }}"          # for router service
namespace: "{{ env }}"                                   # required for bot and router, these helm charts should be moved to devops repo
imagepullsecrets: "{{ env }}registrysecret"              # kubernetes imagePullSecrets
kubeconfig_path: /var/lib/jenkins/secrets/k8s.yaml       # kubeconfig file path on jenkins
private_ingress_custom_annotations: true                 # this ensure the LB is a internal LB
graph_passport_key: "{{core_vault_graph_passport_key}}"
sunbird_portal_player_cdn_enabled: false
sunbird_ekstep_proxy_base_url: "{{proto}}://{{domain_name}}"
monitor_alerts_mail_from_email: "{{ sunbird_mail_server_from_email }}"
ekstep_s3_env: ""                                        # This variable is not used and leave the value as empty
freshDesk_token: ""

# Below endpoint is not required in current release
cloud_public_storage_endpoint: ""

# Update below vars if seperate object storage is required
cloud_private_storage_accountname: "{{ cloud_public_storage_accountname }}" 
cloud_private_storage_endpoint: "{{ cloud_public_storage_endpoint }}"    
cloud_private_storage_region: "{{ cloud_public_storage_region }}"      
cloud_private_storage_project: "{{ cloud_public_storage_project }}"

cloud_management_storage_accountname: "{{ cloud_public_storage_accountname }}"  
cloud_management_storage_endpoint: "{{ cloud_public_storage_endpoint }}"     
cloud_management_storage_region: "{{ cloud_public_storage_region }}"       
cloud_management_storage_project: "{{ cloud_public_storage_project }}"

cloud_artifact_storage_accountname: "{{ cloud_public_storage_accountname }}"  
cloud_artifact_storage_endpoint: "{{ cloud_public_storage_endpoint }}"     
cloud_artifact_storage_region: "{{ cloud_public_storage_region }}"       
cloud_artifact_storage_project: "{{ cloud_public_storage_project }}"

## Enable below vars to upload database backups in seperate buckets 
# cloud_storage_cassandrabackup_bucketname: ""
# cloud_storage_dpcassandrabackup_bucketname: ""
# cloud_storage_dppostgresbackup_bucketname: ""
# cloud_storage_dpredisbackup_bucketname: ""
# cloud_storage_esbackup_bucketname: ""
# cloud_storage_influxdbbackup_bucketname: ""
# cloud_storage_jenkinsbackup_bucketname: ""
# cloud_storage_mongobackup_bucketname: ""
# cloud_storage_neo4jbackup_bucketname: ""
# cloud_storage_redisbackup_bucketname: ""

# Building block vars
cloud_storage_base_url: "{{ cloud_storage_url }}"
cloudstorage_base_path: "{{ cloud_storage_url }}"
valid_cloudstorage_base_urls: '["{{ cloud_storage_url }}"]'
cloudstorage_relative_path_prefix: "CONTENT_STORAGE_BASE_PATH"

# Provide the admin-api consumer access to all API's - The public repo restricts this for security reasons
# If you dont want the admin api key to have access to all API's, please remove the variables "all_apis_access_group" and "kong_consumers" or edit the groups to have a smaller subset
all_apis_access_group:
  - announcementAccess
  - anonymousAppAccess
  - anonymousCertificateAccess
  - anonymousContentAccess
  - anonymousCourseAccess
  - anonymousOrgAccess
  - anonymousUserAccess
  - anonymousUserCreate
  - appAccess
  - appAdmin
  - appCreate
  - appUpdate
  - badgeAccess
  - badgeAdmin
  - badgeCreate
  - badgeUpdate
  - certificateAccess
  - certificateAdmin
  - certificateCreate
  - certificateUpdate
  - channelAccess
  - channelAdmin
  - channelCreate
  - channelUpdate
  - cloudUrlsCreate
  - contentAccess
  - contentAdmin
  - contentCreate
  - contentSuperAdmin
  - contentUpdate
  - courseAccess
  - courseAdmin
  - courseCreate
  - courseSuperAdmin
  - courseUpdate
  - dataAccess
  - dataCreate
  - deleteNotificationFeed
  - desktopAdmin
  - desktopSuperAdmin
  - deviceCreate
  - dialcodeAccess
  - dialcodeAdmin
  - dialcodeCreate
  - dialcodeUpdate
  - discussionAccess
  - discussionCreate
  - druidReportAdmin
  - druidReportCreate
  - experimentCreate
  - expirementAccess
  - formCreate
  - formUpdate
  - frameworkAccess
  - frameworkAdmin
  - frameworkCreate
  - frameworkUpdate
  - groupAccess
  - groupAdmin
  - groupCreate
  - groupUpdate
  - igotAdmin
  - igotApp
  - itemSetAdmin
  - kongConsumerAdmin
  - locationAccess
  - locationAdmin
  - locationCreate
  - locationSuperAdmin
  - locationUpdate
  - mobileAdmin
  - mobileOpenRAPAdmin
  - mobileOpenRAPSuperAdmin
  - mobileSuperAdmin
  - mobileTeacherAidAdmin
  - mobileTeacherAidSuperAdmin
  - noteAccess
  - noteAdmin
  - noteCreate
  - noteUpdate
  - objectAccess
  - observationAccess
  - observationCreate
  - observationUpdate
  - orgAccess
  - orgAdmin
  - orgCreate
  - orgSuperAdmin
  - orgUpdate
  - pageAccess
  - pageCreate
  - pageUpdate
  - pluginAccess
  - portalAdmin
  - programAccess
  - projectAccess
  - projectCreate
  - projectUpdate
  - readNotificationFeed
  - refreshTokenCreate
  - reportsAccess
  - reportsAdmin
  - reportsCreate
  - reportsUpdate
  - solutionAccess
  - ssoAdmin
  - ssoCreate
  - surveyAccess
  - surveyUpdate
  - telemetryCreate
  - updateNotificationFeed
  - userAccess
  - userAdmin
  - userCreate
  - userSuperAccess
  - userSuperAdmin
  - userTempAdmin
  - userUpdate

kong_consumers:
  - username: api-admin
    groups: "{{ all_apis_access_group }}"
    state: present
  - username: mobile_admin
    groups: "{{ mobile_admin_groups }}"
    print_credentials: true
    state: present
  - username: mobile_app
    groups: "{{ mobile_app_groups }}"
    state: present
  - username: mobile_device
    groups: "{{ mobile_device_groups }}"
    state: present
  - username: mobile_devicev2
    groups: "{{ mobile_device_groups }}"
    state: present
  - username: portal_anonymous_register
    groups: "{{ portal_anonymous_register }}"
    state: present
  - username: portal_loggedin_register
    groups: "{{ portal_loggedin_register }}"
    state: present
  - username: portal_anonymous
    groups: "{{ anonymous_user_groups }}"
    state: present
  - username: portal_loggedin
    groups: "{{ kong_all_consumer_groups }}"
    state: present
  - username: portal_anonymous_fallback_token
    groups: "{{ anonymous_user_groups }}"
    state: present
  - username: portal_loggedin_fallback_token
    groups: "{{ kong_all_consumer_groups }}"
    state: present
  - username: adminutil_learner_api_key
    groups: "{{ userAccess }}"
    state: present


## Grafana oauth

# Grafana access htpasswd
# You can generate one at
# https://wtools.io/generate-htpasswd-online
# admin:{{ grafana_admin_password }}
# eg: grafana_nginx_private_htpasswd: admin:$apr1$mf3whl$79CIvrwS7B2EZsEhKhH8w0
grafana_nginx_private_htpasswd: ""
# This is the header with which grafana will authorize the admin user.
# Make sure this is a random text.
# Ref: https://grafana.com/docs/grafana/latest/auth/auth-proxy/
grafana_admin_user_http_header: "X-privateSecretHeader-Auth"

grafana_google_oauth_client_id: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com"
grafana_google_oauth_client_secret: "xxxxxxxxxxxxxxxxxxxxxxxx"

# New line sperated list of users.
# For example:
# grafana_login_whitelisted_emails: |-
#   user1@gmail.com
#   user2@yahoo.com
grafana_login_whitelisted_emails: |-
  user@dummy.local

# Add below var to monitor report-cassandra server
report_cassandra_server_count: "{{ groups['report-cassandra'] | length }}"

# graylog variables
graylog_open_to_public: true  # allows you to access via domain/graylog
send_logs_to_graylog: true    # filebeat agents will send logs to graylog instead of ES
graylog_root_timezone: "Asia/Kolkata"  # timezone
graylog_elasticsearch_discovery_enabled: "true"  # auto discover ES nodes and version
graylog_allow_leading_wildcard_searches: "true"  # allows wild card searching
graylog_allow_highlighting: "true"   # shows yellow highlights on matches
graylog_transport_email_enabled: "true"  # enables emails to be sent via graylog
graylog_transport_email_hostname: "{{ mail_server_host }}"  # email server host name
graylog_transport_email_auth_username: "apikey"   # sendgrid  / email service api key 
graylog_transport_email_from_email: "{{ sunbird_mail_server_from_email }}"  # from email address
graylog_transport_email_use_ssl: "false"  # cannot use both tls and ssl, so disabling ssl as tls is enabled by default

# Opa and Adminutils
# Prefixes will match the starting part of the files under keys dirctory in inventory
adminutil__device_keyprefix: "mobile_devicev2_key"  # private key prefix for mobile apps
adminutil__device_keystart: 1   # starting number of the key file
adminutil__device_keycount: 10  # ending number of the key file
adminutil__access_keyprefix: "accessv1_key"  # private key prefix for user access tokens
adminutil__access_keystart: 1  # starting number of the key file
adminutil__access_keycount: 10  # ending number of the key file
adminutil__desktop_keyprefix: "desktop_devicev2_key"  # private key prefix for desktop apps
adminutil__desktop_keystart: 1  # starting number of the key file
adminutil__desktop_keycount: 10  # ending number of the key file
adminutil__portal_anonymous_keyprefix: "portal_anonymous_key"  # private key prefix for portal anonymous sessions
adminutil__portal_anonymous_keystart: 1  # starting number of the key file
adminutil__portal_anonymous_keycount: 10  # ending number of the key file
adminutil__portal_loggedin_keyprefix: "portal_loggedin_key"  # private key prefix for portal loggedin sessions
adminutil__portal_loggedin_keystart: 1  # starting number of the key file
adminutil__portal_loggedin_keycount: 10  # ending number of the key file
adminutil_embed_role: 'true'  # embeds user roles in access tokens

# Kong and Adminutils
# Consumer names will match the starting part of the files under keys dirctory in inventory 
kong_mobile_v2_consumer: "mobile_devicev2"  # kong consumer name for mobile apps
kong_desktop_v2_consumer: "desktop_devicev2"  # kong consumer name for desktop apps
kong_portal_anonymous_consumer: "portal_anonymous"  # kong consumer name for portal anonymous sessions
kong_portal_loggedin_consumer: "portal_loggedin"  # kong consumer name for portal loggedin sessions
kong_desktop_device_consumer_names_for_opa: '["desktop_devicev2", "desktop_device"]'  # ops checks will be skipped for desktop consumers

# Portal sessions
sunbird_kong_device_register: 'true'  # enables refersh token api call after login
sunbird_kong_device_register_anonymous: 'true'  # enables anonymous sessions
sunbird_session_store_type: redis  # uses redis for session data instead of cassandra
portal_redis_connection_string: "redis://:@{{ sunbird_redis_host }}:6379/3"  # Uses KP redis and DB number 3 to store session data
