@Library('deploy-conf') _
node() {
    try {
        // This stage will clone both public and private repo
        stage('Initialize repos') {
            cleanWs()
            // Checking out public repo
            checkout scm
            // Below block is required to clone the private repo
            // as it's mandatory to deploy cdn before player
            // if cdn is enabled.
            values = docker_params()
            currentWs = sh(returnStdout: true, script: 'pwd').trim()
            ansiblePlaybook = "$currentWs/ansible/deploy.yml"
            ansibleExtraArgs = "--syntax-check"
            values.put('currentWs', currentWs)
            values.put('ansiblePlaybook', ansiblePlaybook)
            values.put('ansibleExtraArgs', ansibleExtraArgs)
            ansible_playbook_run(values)
            archiveArtifacts 'metadata.json'
            currentBuild.description = "${values.image_tag}"
        }

        cdnEnable = env.cdnEnable ?: false
        if (cdnEnable) {
            stage ('Deploying CDN') {
                // scrapping cdn url
                def filePath = "$WORKSPACE/private/ansible/inventory/${values.envDir}/${values.module}/common.yml"
                url = sh(
                script: "grep cdn $filePath | grep -v \"^#\" $filePath ",
                returnStdout: true
                )
                if ( url == '' ) {
                    print " cdnEnable env variable is true, But no sunbird_portal_cdn_url in $filePath "
                    error 'sunbird_portal_cdn_url is not set'
                } else {
                    cdnUrl = url.split(' ')[2]
                    error 'cdn url is not defined'
                    stage('Build-CDN') {
                        sh ("docker run --rm -v `pwd`:/work -w /work node:8.11.2-alpine sh ./build-cdn.sh ${params.cdnUrl} ${commit_hash} ${artifact_version}")
                        archiveArtifacts 'src/app/player_artifacts.zip*'
                        // Appending artifact info into metadata
                        sh (" sed -i 's/}/,\"artifact_name\" : \"player_artifacts.zip\", \"artifact_version\":\"${artifact_version}\"}/g' metadata.json")
                    }
                }
            }
        }
        stage('deploy') {
            ansibleExtraArgs = "--tags \"stack-sunbird\" --extra-vars \"hub_org=$hub_org image_name=$values.image_name image_tag=$values.image_tag service_name=player deploy_stack=True\" --vault-password-file /var/lib/jenkins/secrets/vault-pass"
            values.put('ansibleExtraArgs', ansibleExtraArgs)
            ansible_playbook_run(values)
            archiveArtifacts 'metadata.json'
            currentBuild.description = "${values.image_tag}"
        }
    }
    catch (err) {
        currentBuild.result = "FAILURE"
        throw err
    }
}
