@Library('deploy-conf') _
node() {
    try {
        String ANSI_GREEN = "\u001B[32m"
        String ANSI_NORMAL = "\u001B[0m"
        String ANSI_BOLD = "\u001B[1m"
        String ANSI_RED = "\u001B[31m"
        String ANSI_YELLOW = "\u001B[33m"

        if (params.size() == 0){
            envDir = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-2].trim()
            properties([[$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false], parameters([
                    choice(choices: ['GitHub', 'Local'], description: '<font color=teal size=2>Choose the ansible inventory source</font>', name: 'inventory_source'),
                    string(defaultValue: "${WORKSPACE}/private/ansible/inventories/${envDir}", description: '<font color=teal size=2>Please sepecify the full path to the inventory directory. The default value is $WORKSPACE/private/ansible/env. Here env is the previous directory of the job.</font>', name: 'inventory_path', trim: false)])])
            ansiColor('xterm') {
                println (ANSI_BOLD + ANSI_GREEN + '''\
                        First run of the job. Parameters created. Stopping the current build.
                        Please trigger new build and provide parameters if required.
                        '''.stripIndent().replace("\n"," ") + ANSI_NORMAL)
            }
            currentBuild.result = 'SUCCESS'
            return "first run"
        }

        triggers {
            cron('H 0 * * *')
        }

        stage('checkout public repo') {
            cleanWs()
            checkout scm
        }

        ansiColor('xterm') {
            stage('deploy'){
                values = [:]
                currentWs = sh(returnStdout: true, script: 'pwd').trim()
                values.put('currentWs', currentWs)
                ansiblePlaybook = "${currentWs}/ansible/keycloak.yml"
                ansibleExtraArgs = "--tags provision --vault-password-file  /run/secrets/vault-pass"
                values.put('ansiblePlaybook', ansiblePlaybook)
                values.put('ansibleExtraArgs', ansibleExtraArgs)
                println values
//                    ansible_playbook_run(values)
            }
        }

        post {
            failure {
                slackSend channel: '#devops-team', color: 'danger', message: "Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
            }
        }
    }
    catch (err) {
        throw err
    }
}
