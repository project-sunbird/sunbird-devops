#!/usr/bin/groovy

node {

    String ANSI_GREEN = "\u001B[32m"
    String ANSI_NORMAL = "\u001B[0m"
    String ANSI_BOLD = "\u001B[1m"
    String ANSI_RED = "\u001B[31m"
    try{
        // Checking first build and creating parameters
        if (params.size() == 0){
            properties([[$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false],
                        parameters([string(defaultValue: '', description: '<font color=teal size=2>Release Branch name to create</font>',
                        name: 'releaseBranch', trim: true)])])
            ansiColor('xterm') {
                println (ANSI_BOLD + ANSI_GREEN + '''\
                        First run of the job. Parameters created. Stopping the current build.
                        Please trigger new build and provide parameters if required.
                        '''.stripIndent().replace("\n"," ") + ANSI_NORMAL)
            }
        return
        }
        stage('Checking out branch'){
            // Cleaning workspace
            cleanWs()
            checkout scm
        }
        stage('pushing branch to upstream'){
            if (params.releaseBranch == ''){
                ansiColor('xterm'){
                    println(ANSI_BOLD + ANSI_RED + 'Release branch name not set' + ANSI_NORMAL)
                    error 'Release branch name not set'
                }
            }
            withCredentials([usernameColonPassword(credentialsId: '64bdfe13-cc30-4864-bd3c-4e89be89fc9d', variable: 'gitpass')]) {
                // Getting commit short hash
                remoteUrl = sh (
                script: 'git config --get remote.upstream.url',
                returnStdout: true
                ).trim()
                sh("git push origin HEAD:${params.releaseBranch} https://${gitpass}@${remoteUrl}")
            }
        }
    }
    catch(Exception e){
        throw e
    }
}
