#!/usr/bin/groovy

/*
*
* This script will create a branch out of gitscm branch with name specified in `releaseBranch` parameter variable.
* Checks for upstream branch with same name; then stops execution throwing an error.
* Parameters:
*   `gitCredentialId`: environment variable or jenkins parameter
*       contains github username and password for the user to be used
*   `releaseBranch`: jenkins parameter
*       Name of the branch to create
*
* Author: Rajesh Rajendran<rjshrjndrn@gmail.com>
*/

node {
    // Creating color code strings
    String ANSI_GREEN = "\u001B[32m"
    String ANSI_NORMAL = "\u001B[0m"
    String ANSI_BOLD = "\u001B[1m"
    String ANSI_RED = "\u001B[31m"
    try{
        // Checking first build and creating parameters
        if (params.size() == 0){
            properties([[$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false],
                        parameters([string(defaultValue: '', description: '<font color=teal size=2>Release Branch name to create</font>',
                        name: 'releaseBranch', trim: true)])])
            ansiColor('xterm') {
                println (ANSI_BOLD + ANSI_GREEN + '''\
                        First run of the job. Parameters created. Stopping the current build.
                        Please trigger new build and provide parameters if required.
                        '''.stripIndent().replace("\n"," ") + ANSI_NORMAL)
            }
        return
        }
        stage('Checking out branch'){
            // Cleaning workspace
            cleanWs()
            checkout scm
        }
        stage('pushing branch to upstream'){
            // Using withCredentials as gitpublish plugin is not yet ported for pipelines
            // Defining credentialsId for default value passed from Parameter or environment value.
            def gitCredentialId = "${params.gitCredentialId}" ?: "${env.gitCredentialId}"
            withCredentials([usernamePassword(credentialsId: "${gitCredentialId}",
            passwordVariable: 'gitPassword', usernameVariable: 'gitUser')]) {

                // Getting git remote url
                origin = "https://${gitUser}:${gitPassword}@"+sh (
                script: 'git config --get remote.origin.url',
                returnStdout: true
                ).trim().split('https://')[1]
                echo "Git Hash: ${origin}"
                // Checks whether remtoe branch is present
                // Stdouts 1 if true
                remoteBranch = sh(script: "git ls-remote --heads ${origin} ${params.releaseBranch} | wc -l ", returnStdout: true).trim()
                echo "${remoteBranch}"
                // If releaseBranch variable not set
                if (params.releaseBranch == ''){
                    println(ANSI_BOLD + ANSI_RED + 'Release branch name not set' + ANSI_NORMAL)
                    error 'Release branch name not set'
                 // If remote branch exists
                 } else if( remoteBranch == "1") {
                    println(ANSI_BOLD + ANSI_RED + "Upstream has branch with same name: ${params.releaseBranch}" + ANSI_NORMAL)
                    error 'remote branch found with same name'
                }
                sh("git push ${origin} HEAD:refs/heads/${params.releaseBranch}")
            }
        }
    }
    catch(Exception e){
        ansiColor('xterm'){
            throw e
        }
    }
}
