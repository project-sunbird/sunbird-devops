#!/usr/bin/groovy

/*
*
* This script will create a branch out of master branch with name specified in `releaseBranch` parameter variable.
* Checks for upstream branch with same name; then stops execution with and exception if same branch found in upstream.
* This Jenkinsfile only support git urls start from `https://`
*
* Parameters:
*   Name:   gitCredentialId
*      Type:   jenkins parameter; Default value is githubPassword
*      Description:    contains github username and password for the user to be used
*   Name:   releaseBranch
*      Type:   jenkins parameter
*      Description:    Name of the branch to create
*
* Author: Rajesh Rajendran<rjshrjndrn@gmail.com>
*
*
*/

// Error message formatting
def errorMessage(message){
    // Creating color code strings
    String ANSI_GREEN = "\u001B[32m"
    String ANSI_NORMAL = "\u001B[0m"
    String ANSI_BOLD = "\u001B[1m"
    String ANSI_RED = "\u001B[31m"
    println (ANSI_BOLD + ANSI_RED + message.stripIndent())
}

repos = ['Sunbird-Ed/SunbirdEd-portal',
'Sunbird-Ed/SunbirdEd-mobile',
'Sunbird-Ed/SunbirdEd-portal',
'Sunbird-Ed/SunbirdEd-mobile',
'project-sunbird/sunbird-lms-service',
'project-sunbird/sunbird-data-pipeline',
'project-sunbird/sunbird-content-service'
,'project-sunbird/sunbird-auth',
'project-sunbird/sunbird-learning-platform',
'project-sunbird/sunbird-content-plugins',
'project-sunbird/sunbird-lms-mw',
'project-sunbird/sunbird-ml-workbench',
'project-sunbird/sunbird-utils',
'project-sunbird/sunbird-analytics',
'project-sunbird/sunbird-telemetry-service',
'project-sunbird/secor',
'project-sunbird/sunbird-devops']

// getting Repos to which we've to start release
upstreamRepos = params.repos
releaseBranch = params.releaseBranch

node {
    def gitCredentialId = env.githubPassword
    try{

        // Checking first build and creating parameters
        if (params.size() == 0){
            // Creating active choice compatible choices list
            localRepoList = "['"+repos.join("','")+"']"
            properties([parameters([[$class: 'ChoiceParameter',
                choiceType: 'PT_CHECKBOX', description: '<font color=black size=2><b>Choose the repo to start release</b></font>',
                filterLength: 1, filterable: true, name: 'repos', randomName: 'choice-parameter-115616285976692',
                script: [$class: 'GroovyScript',
                    fallbackScript: [classpath: [], sandbox: false,
                    script: ''],
                script: [classpath: [], sandbox: false, script: """return $localRepoList """]]],
                string(defaultValue: '', description: '<font color=black size=2><b>Enter the branch name to be created</b></font>',
                name: 'releaseBranch', trim: false)])])

            ansiColor('xterm') {
                errorMessage '''
                        First run of the job. Parameters created. Stopping the current build.
                        Please trigger new build and provide parameters if required.
                        '''
            }
        return
        }

        // Make sure prerequisites are met
        // If releaseBranch variable not set
        if (releaseBranch == ''){
            errorMessage 'Release branch name not set'
            error 'Release branch name not set'
        } else if (upstreamRepos == ''){
            errorMessage 'No Repos Selected'
            error 'no repos selected'
        }

        // Checking out public repo from where the branch should be created
        stage('Start New Release'){
            // Cleaning workspace
            upstreamRepos.split(',').each { repo ->
            cleanWs()
            checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CloneOption', noTags: true, reference: '', shallow: true]], submoduleCfg: [], userRemoteConfigs: [[url: "https://github.com/$repo"]]]
            // Using withCredentials as gitpublish plugin is not yet ported for pipelines
            // Defining credentialsId for default value passed from Parameter or environment value.
            // gitCredentialId is username and password type
            withCredentials([usernamePassword(credentialsId: "${gitCredentialId}",
            passwordVariable: 'gitPassword', usernameVariable: 'gitUser')]) {

                // Getting git remote url
                origin = "https://${gitUser}:${gitPassword}@"+sh (
                script: 'git config --get remote.origin.url',
                returnStdout: true
                ).trim().split('https://')[1]
                echo "Git Hash: ${origin}"
                // Checks whether remote branch is present
                remoteBranch =
                ansiColor('xterm'){
                    // If remote branch exists
                    if( sh(script: "git ls-remote --exit-code --heads ${origin} ${releaseBranch} > /dev/null ", returnStatus: true) == 0 ) {
                        errorMessage "Upstream has branch with same name: ${releaseBranch}"
                        error 'remote branch found with same name'
                    }
                }
                sh("git push ${origin} refs/remotes/origin/master:refs/heads/${releaseBranch}")
            }
            }
        }
    }
    catch(org.jenkinsci.plugins.credentialsbinding.impl.CredentialNotFoundException e){
        ansiColor('xterm'){
            errorMessage '''
            Create environment variable `githubPassword` and store the `credential id`.
            '''
        }
        error 'either gitCredentialId is not set or wrong value'
    }
}
