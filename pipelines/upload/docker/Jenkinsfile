@Library('deploy-conf') _
node(){
    try {
        stage('checkout public repo') {
            folder = new File("$WORKSPACE/.git")
            if (folder.exists())
            {
               println "Found .git folder. Clearing it.."
               sh'git clean -fxd'
            }
            checkout scm
        }

        stage('Artifact Upload') {
            values = docker_params()
            if(params.artifact_source == "ArtifactRepo") {
                currentWs = sh(returnStdout: true, script: 'pwd').trim()
                ansiblePlaybook = "$currentWs/ansible/docker_image_push.yml"
                ansibleExtraArgs = "--extra-vars \"hub_org=${hub_org} image_name=${values.image_name} image_tag=${values.image_tag}\" --vault-password-file /var/lib/jenkins/secrets/vault-pass"
                values.put('currentWs', currentWs)
                values.put('ansiblePlaybook', ansiblePlaybook)
                values.put('ansibleExtraArgs', ansibleExtraArgs)
                ansible_playbook_run(values)
                currentBuild.result = 'SUCCESS'
            }
            archiveArtifacts 'metadata.json'
            cdn_file_exists = new File("$currentWs/index_cdn.ejs")
            if (cdn_file_exists.exists()) {
                archiveArtifacts "index_cdn.ejs, cdn_assets.zip"
            }    
            currentBuild.description = "Image: ${values.image_tag}, Private: ${params.private_branch}, Public: ${params.branch_or_tag}"
        }
    }

    catch (err) {
        currentBuild.result = "FAILURE"
        throw err
    }
    finally {
        slack_notify(currentBuild.result)
        email_notify()
    }
}
