@Library('deploy-conf') _
node() {
    try {
        String ANSI_GREEN = "\u001B[32m"
        String ANSI_NORMAL = "\u001B[0m"
        String ANSI_BOLD = "\u001B[1m"
        String ANSI_RED = "\u001B[31m"
        String ANSI_YELLOW = "\u001B[33m"

        stage('checkout public repo') {
            folder = new File("$WORKSPACE/.git")
            if (folder.exists())
            {
               println "Found .git folder. Clearing it.."
               sh'git clean -fxd'
            }
            checkout scm
        }

        stage('clone chatbot config repo') {
            if (params.bot_repo == "https://github.com/project-sunbird/sunbird-bot.git") {
                sh("rm -rf sunbird-bot")
                sh("git clone ${params.bot_repo} -b ${params.bot_repo_branch}")
            }
            else {
                sh("rm -rf private-bot-repo")
                dir('private-bot-repo') {
                    checkout([$class: 'GitSCM', branches: [[name: "refs/remotes/origin/$params.bot_repo_branch"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CloneOption', depth: 0, noTags: false, reference: '', shallow: true]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'private_repo_credentials', url: "$params.bot_repo"]]])
                }
            }    
        }

        ansiColor('xterm') {
            stage('deploy'){
                values = [:]
                envDir = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-3].trim()
                module = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-2].trim()
                jobName = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-1].trim()
                currentWs = sh(returnStdout: true, script: 'pwd').trim()
                ansiblePlaybook = "${currentWs}/ansible/desktop-faq-upload.yml"
                ansibleExtraArgs = "--extra-vars \" desktop_container=${params.container_name} src_file_path=${params.source_path} destination_path=${params.destination_path}\" --vault-password-file /var/lib/jenkins/secrets/vault-pass --tags ${params.tag}"
                values.put('currentWs', currentWs)
                values.put('env', envDir)
                values.put('module', module)
                values.put('jobName', jobName)
                values.put('ansiblePlaybook', ansiblePlaybook)
                values.put('ansibleExtraArgs', ansibleExtraArgs)
                println values
                ansible_playbook_run(values)
            }
        }
        summary()
     }
    catch (err) {
        throw err
    }
}

