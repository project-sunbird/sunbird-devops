apiVersion: v1
kind: ConfigMap
metadata:
  name: proxy-default
  namespace: {{ .Release.namespace }}
data:
  proxy-default.conf: |
    server {
      listen 80;
      listen [::]:80;
      server_name {{ .Values.domain }};
      # Limitting open connection per ip
      limit_conn limitbyaddr 400;
      return 301 https://{{ .Values.domain }}$request_uri;
    }
    server {
      listen                443 ssl;
      ssl_certificate       /etc/secrets/tls.crt;
      ssl_certificate_key   /etc/secrets/tls.key;
      ssl_protocols TLSv1.2 TLSv1.3;
      ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA HIGH !RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";
      server_name *.{{ .Values.domain }} {{ .Values.domain }};
      # Limitting open connection per ip
      limit_conn limitbyaddr 400;
      proxy_set_header    Host              $host;
      proxy_set_header    X-Real-IP         $remote_addr;
      proxy_set_header    X-Forwarded-SSL   on;
      proxy_set_header    X-Forwarded-Proto $scheme;
      ignore_invalid_headers off;  #pass through headers from Jenkins which are considered invalid by Nginx server.
      resolver {{ (lookup "v1" "Service" "kube-system" "kube-dns").spec.clusterIP }} valid=30s;
      
      location ~* ^/auth/(.*)/impersonation {
        return 301 {{ .Values.domain }};
        }
      location ~* ^/auth/realms/master {
        return 301 {{ .Values.domain }};
      }
      location ~* ^/auth/admin/master/console/ {
        return 301 {{ .Values.domain }};
      }
      location ~* ^/auth/realms/(.+)/token/introspect/ {
      return 301 https://$host/api/auth/v1/realms/$1/token/introspect;
      }
      location ~* ^/auth/realms/(.+)/token/ {
        return 301  https://$host/api/auth/v1/realms/$1/token/;
      }
      location ~* ^/auth/realms/(.+)/userinfo/ {
        return 301 https://$host/api/auth/v1/realms/$1/userinfo/;
      }
      location ~* ^/auth/realms/(.+)/logout/ {
        return 301 https://$host/api/auth/v1/realms/$1/logout/;
      }
      location ~* ^/auth/realms/(.+)/certs/ {
        return 301 https://$host/api/auth/v1/realms/$1/certs/;
      }
      location ~* ^/auth/realms/(.+)/clients-registrations/ {
        return 301 https://$host/api/auth/v1/realms/$1/clients-registrations/;
      }
      location ~* ^/auth/admin/master/console/ {
        return 301 https://{{ .Values.domain }}.sunbirded.org;
      }

    location ~* ^/api/org/v1/search {
      rewrite ^/api/org/v1/search/(.*) /api/search/v1/search/$1 break;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Scheme $scheme;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_pass http://player;
    }
      
    location ~* ^/auth/v1/refresh/token  {
      rewrite ^/auth/(.*) /auth/$1 break;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Scheme $scheme;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_connect_timeout 5;
      proxy_send_timeout 60;
      proxy_read_timeout 70;
      proxy_http_version 1.1;
      proxy_set_header X-Request-ID $sb_request_id;
      proxy_pass http://kong;
    }
    # This is Caching mechanism for POST requests location search
    location ~ /learner/data/v1/location/search {
      # Enabling caching
      proxy_cache_key "$request_uri|$request_body";
      proxy_cache framework_cache;
      add_header X-Proxy-Cache $upstream_cache_status;
      add_header X-Proxy-Cache-Date $upstream_http_date;
      proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
      proxy_cache_methods GET HEAD POST;
      proxy_cache_revalidate on;
      proxy_cache_background_update on;
      proxy_cache_lock on;
      proxy_cache_valid 200 3600s;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Scheme $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_connect_timeout 5;
      proxy_send_timeout 60;
      proxy_read_timeout 70;
      proxy_http_version 1.1;
      proxy_set_header X-Request-ID $sb_request_id;
      proxy_pass http://player;
    }
    # This is Caching mechanism for POST requests
    location ~ /api/content/v1/search {
      # Enabling caching
      proxy_cache_key "$request_uri|$request_body";
      proxy_cache content_cache;
      add_header X-Proxy-Cache $upstream_cache_status;
      add_header X-Proxy-Cache-Date $upstream_http_date;
      proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
      proxy_cache_methods GET HEAD POST;
      proxy_cache_revalidate on;
      proxy_cache_background_update on;
      proxy_cache_lock on;
      proxy_cache_valid 200 900s;
      # Increasing the proxy buffer size
      proxy_buffer_size 16k;
      proxy_busy_buffers_size 16k;
      rewrite ^/api/(.*) /$1 break;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Scheme $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_connect_timeout 5;
      proxy_send_timeout 60;
      proxy_read_timeout 70;
      proxy_http_version 1.1;
      proxy_pass http://kong;
    }
    # This is Caching mechanism for POST requests
    location ~ /api/org/v1/search|/api/data/v1/(form/read|location/search) {
      # Enabling caching
      proxy_cache_key "$request_uri|$request_body";
      proxy_cache framework_cache;
      add_header X-Proxy-Cache $upstream_cache_status;
      add_header X-Proxy-Cache-Date $upstream_http_date;
      proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
      proxy_cache_methods GET HEAD POST;
      proxy_cache_revalidate on;
      proxy_cache_background_update on;
      proxy_cache_lock on;
      proxy_cache_valid 200 3600s;
      rewrite ^/api/(.*) /$1 break;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Scheme $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_connect_timeout 5;
      proxy_send_timeout 60;
      proxy_read_timeout 70;
      proxy_http_version 1.1;
      proxy_set_header X-Request-ID $sb_request_id;
      proxy_pass http://kong;
    }
    location ~ /api/(framework/v1/read|data/v1/system/settings/get) {
      # Enabling caching
      proxy_cache_key $proxy_host$request_uri;
      proxy_cache framework_cache;
      add_header X-Proxy-Cache $upstream_cache_status;
      add_header X-Proxy-Cache-Date $upstream_http_date;
      proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
      proxy_cache_revalidate on;
      proxy_cache_background_update on;
      proxy_cache_lock on;
      proxy_cache_valid 200 3600s;
      rewrite ^/api/(.*) /$1 break;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Scheme $scheme;
      proxy_set_header    X-Forwarded-For   $remote_addr;
      proxy_connect_timeout 5;
      proxy_send_timeout 60;
      proxy_read_timeout 70;
      proxy_http_version 1.1;
      proxy_set_header X-Request-ID $sb_request_id;
      proxy_pass http://kong;
    }
    location /api/ {
      if ($request_method = OPTIONS ) {
          add_header Access-Control-Allow-Origin "*" ;
          add_header Access-Control-Allow-Methods "GET, OPTIONS, PATCH, POST";
          add_header Access-Control-Allow-Headers "Access-Control-Allow-Origin, Authorization, Content-Type, user-id, Content-Encoding";
          add_header Content-Length 0;
          add_header Content-Type text/plain;
          return 200;
      }
      if ( $arg_eHVyhwSdt ) {
        set $custom_header "Bearer $arg_eHVyhwSdt";
      }
      if ( $http_authorization ) {
        set $custom_header "$http_authorization";
      }
      proxy_set_header Authorization $custom_header;
      rewrite ^/api/(.*) /$1 break;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Scheme $scheme;
      proxy_set_header    X-Forwarded-For   $remote_addr;
      proxy_connect_timeout 5;
      proxy_send_timeout 60;
      proxy_read_timeout 70;
      proxy_http_version 1.1;
      proxy_set_header X-Request-ID $sb_request_id;
      proxy_pass http://kong;
    }
    location /dashboard/ {
      auth_request /oauth2/auth;
      error_page 401 = /oauth2/sign_in;
      # Setting target url
      auth_request_set $target http://0.0.0.0:5601;
      # pass information via X-User and X-Email headers to backend,
      # requires running with --set-xauthrequest flag
      auth_request_set $user   $upstream_http_x_auth_request_user;
      auth_request_set $email  $upstream_http_x_auth_request_email;
      proxy_set_header X-User  $user;
      proxy_set_header X-Email $email;
      # if you enabled --cookie-refresh, this is needed for it to work with auth_request
      auth_request_set $auth_cookie $upstream_http_set_cookie;
      add_header Set-Cookie $auth_cookie;
      proxy_set_header X-Request-ID $sb_request_id;
      proxy_pass $target;
    }
  
    location /grafana/ {
      set $target http://prometheus-operator-grafana.monitoring.svc.cluster.local;
      rewrite ^/grafana/(.*) /$1 break;
      proxy_pass $target;
    }
    location ~* ^/assets/public/(.*) {
      # Enabling cache for Response code 200
      expires 1M;
      add_header Pragma public;
      add_header Cache-Control "public";
      # Enabling compression
      gzip            on;
      gzip_min_length 100000;
      gzip_proxied    expired no-cache no-store private auth;
      gzip_types application/javascript application/x-javascript text/javascript;
      if ($request_method = OPTIONS ) {
          add_header Access-Control-Allow-Origin "*" ;
          add_header Access-Control-Allow-Methods "GET, OPTIONS, PATCH, POST";
          add_header Access-Control-Allow-Headers "Access-Control-Allow-Origin, Authorization, Content-Type, user-id";
          # add_header Access-Control-Allow-Credentials "true";
          add_header Content-Length 0;
          add_header Content-Type text/plain;
          return 200;
      }
      set $bucket        "{{ .Values.cloud_storage_base_url }}/{{ .Values.cloud_public_storage_container }}";
      set $url_full         '$1';
      proxy_http_version     1.1;
      proxy_set_header       Host "{{ (split "//" .Values.cloud_storage_base_url)._1 }}";
      proxy_set_header       Authorization '';
      proxy_hide_header      Access-Control-Allow-Origin;
      proxy_hide_header      Access-Control-Allow-Methods;
      proxy_hide_header      x-amz-id-2;
      proxy_hide_header      x-amz-request-id;
      proxy_hide_header      Set-Cookie;
      proxy_ignore_headers   "Set-Cookie";
      proxy_buffering        off;
      proxy_intercept_errors on;
      add_header             Access-Control-Allow-Origin "*";
      add_header             Access-Control-Allow-Methods GET;
      proxy_set_header X-Request-ID $sb_request_id;
      proxy_pass             https://$bucket/$url_full;
    }
    location ~* ^/content/preview/(.*) {
      # Enabling compression
      gzip            on;
      gzip_min_length 100000;
      gzip_proxied    expired no-cache no-store private auth;
      gzip_types application/javascript application/x-javascript text/css text/javascript;
      if ($request_method = OPTIONS ) {
          add_header Access-Control-Allow-Origin "*" ;
          add_header Access-Control-Allow-Methods "GET, OPTIONS, PATCH, POST";
          add_header Access-Control-Allow-Headers "Access-Control-Allow-Origin, Authorization, Content-Type, user-id";
          # add_header Access-Control-Allow-Credentials "true";
          add_header Content-Length 0;
          add_header Content-Type text/plain;
          return 200;
        }
      set $bucket        "{{ .Values.cloud_storage_base_url }}/{{ .Values.cloud_public_storage_container }}";
      set $url_full         '$1';
      proxy_http_version     1.1;
      proxy_set_header       Host "{{ (split "//" .Values.cloud_storage_base_url)._1 }}";
      proxy_set_header       Authorization '';
      proxy_hide_header      Access-Control-Allow-Origin;
      proxy_hide_header      Access-Control-Allow-Methods;
      proxy_hide_header      x-amz-id-2;
      proxy_hide_header      x-amz-request-id;
      proxy_hide_header      Set-Cookie;
      proxy_ignore_headers   "Set-Cookie";
      proxy_buffering        off;
      proxy_intercept_errors on;
      add_header             Access-Control-Allow-Origin "*" ;
      add_header             Access-Control-Allow-Methods GET;
      proxy_set_header X-Request-ID $sb_request_id;
      proxy_pass             https://$bucket/v3/preview/$url_full;
    }
    location ~ /content-editor/telemetry|collection-editor/telemetry {
      rewrite ^/(.*) /$1 break;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Scheme $scheme;
      proxy_connect_timeout 5;
          proxy_send_timeout 60;
          proxy_read_timeout 70;
          proxy_set_header    X-Forwarded-Proto $scheme;
          proxy_set_header Connection "";
          proxy_http_version 1.1;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass http://player;
        }
        location ~* ^/content-editor/(.*) {
          # Enabling compression
          gzip            on;
          gzip_min_length 100000;
          gzip_proxied    expired no-cache no-store private auth;
          gzip_types application/javascript application/x-javascript text/css text/javascript;
          if ($request_method = OPTIONS ) {
                  add_header Access-Control-Allow-Origin "*" ;
                  add_header Access-Control-Allow-Methods "GET, OPTIONS, PATCH, POST";
                  add_header Access-Control-Allow-Headers "Access-Control-Allow-Origin, Authorization, Content-Type, user-id";
                  # add_header Access-Control-Allow-Credentials "true";
                  add_header Content-Length 0;
                  add_header Content-Type text/plain;
                  return 200;
          }
      set $bucket        "{{ .Values.cloud_storage_base_url }}/{{ .Values.cloud_public_storage_container }}";
      set $url_full         '$1';
      proxy_http_version     1.1;
      proxy_set_header       Host "{{ (split "//" .Values.cloud_storage_base_url)._1 }}";
      proxy_set_header       Authorization '';
      proxy_hide_header      Access-Control-Allow-Origin;
      proxy_hide_header      Access-Control-Allow-Methods;
      proxy_hide_header      x-amz-id-2;
      proxy_hide_header      x-amz-request-id;
      proxy_hide_header      Set-Cookie;
      proxy_ignore_headers   "Set-Cookie";
      proxy_buffering        off;
      proxy_intercept_errors on;
      add_header             Access-Control-Allow-Origin "*" ;
      add_header             Access-Control-Allow-Methods GET;
      proxy_set_header X-Request-ID $sb_request_id;
      proxy_pass             https://$bucket/content-editor/$url_full;
    }
    location ~* ^/collection-editor/(.*) {
          # Enabling compression
          gzip            on;
          gzip_min_length 100000;
          gzip_proxied    expired no-cache no-store private auth;
          gzip_types application/javascript application/x-javascript text/css text/javascript;
          if ($request_method = OPTIONS ) {
                  add_header Access-Control-Allow-Origin "*" ;
                  add_header Access-Control-Allow-Methods "GET, OPTIONS, PATCH, POST";
                  add_header Access-Control-Allow-Headers "Access-Control-Allow-Origin, Authorization, Content-Type, user-id";
                  # add_header Access-Control-Allow-Credentials "true";
                  add_header Content-Length 0;
                  add_header Content-Type text/plain;
                  return 200;
          }
      set $bucket        "{{ .Values.cloud_storage_base_url }}/{{ .Values.cloud_public_storage_container }}";
      set $url_full         '$1';
      proxy_http_version     1.1;
      proxy_set_header       Host "{{ (split "//" .Values.cloud_storage_base_url)._1 }}";
      proxy_set_header       Authorization '';
      proxy_hide_header      Access-Control-Allow-Origin;
      proxy_hide_header      Access-Control-Allow-Methods;
      proxy_hide_header      x-amz-id-2;
      proxy_hide_header      x-amz-request-id;
      proxy_hide_header      Set-Cookie;
      proxy_ignore_headers   "Set-Cookie";
      proxy_buffering        off;
      proxy_intercept_errors on;
      add_header             Access-Control-Allow-Origin "*" ;
      add_header             Access-Control-Allow-Methods GET;
      proxy_set_header X-Request-ID $sb_request_id;
      proxy_pass             https://$bucket/collection-editor/$url_full;
    }
    location ~* ^/generic-editor/(.*) {
          # Enabling compression
          gzip            on;
          gzip_min_length 100000;
          gzip_proxied    expired no-cache no-store private auth;
          gzip_types application/javascript application/x-javascript text/css text/javascript;
          if ($request_method = OPTIONS ) {
                  add_header Access-Control-Allow-Origin "*" ;
                  add_header Access-Control-Allow-Methods "GET, OPTIONS, PATCH, POST";
                  add_header Access-Control-Allow-Headers "Access-Control-Allow-Origin, Authorization, Content-Type, user-id";
                  # add_header Access-Control-Allow-Credentials "true";
                  add_header Content-Length 0;
                  add_header Content-Type text/plain;
                  return 200;
          }
          set $bucket        "{{ .Values.cloud_storage_base_url }}/{{ .Values.cloud_public_storage_container }}";
          set $url_full         '$1';
          proxy_http_version     1.1;
          proxy_set_header       Host "{{ (split "//" .Values.cloud_storage_base_url)._1 }}";
          proxy_set_header       Authorization '';
          proxy_hide_header      Access-Control-Allow-Origin;
          proxy_hide_header      Access-Control-Allow-Methods;
          proxy_hide_header      x-amz-id-2;
          proxy_hide_header      x-amz-request-id;
          proxy_hide_header      Set-Cookie;
          proxy_ignore_headers   "Set-Cookie";
          proxy_buffering        off;
          proxy_intercept_errors on;
          add_header             Access-Control-Allow-Origin "*" ;
          add_header             Access-Control-Allow-Methods GET;
          proxy_set_header X-Request-ID $sb_request_id;
          proxy_pass             https://$bucket/generic-editor/$url_full;
        }
  
    location ~* ^/content-plugins/(.*) {
          # Enabling cache for Response code 200
          expires 1M;
          add_header Pragma public;
          add_header Cache-Control "public";
          # Enabling compression
          gzip            on;
          gzip_min_length 100000;
          gzip_proxied    expired no-cache no-store private auth;
          gzip_types application/javascript application/x-javascript text/css text/javascript;
          if ($request_method = OPTIONS ) {
                  add_header Access-Control-Allow-Origin "*" ;
                  add_header Access-Control-Allow-Methods "GET, OPTIONS, PATCH, POST";
                  add_header Access-Control-Allow-Headers "Access-Control-Allow-Origin, Authorization, Content-Type, user-id";
                  # add_header Access-Control-Allow-Credentials "true";
                  add_header Content-Length 0;
                  add_header Content-Type text/plain;
                  return 200;
          }
        set $bucket        "{{ .Values.cloud_storage_base_url }}/{{ .Values.cloud_public_storage_container }}";
        set $url_full         '$1';
        proxy_http_version     1.1;
        proxy_set_header       Host "{{ (split "//" .Values.cloud_storage_base_url)._1 }}";
        proxy_set_header       Authorization '';
        proxy_hide_header      Access-Control-Allow-Origin;
        proxy_hide_header      Access-Control-Allow-Methods;
        proxy_hide_header      x-amz-id-2;
        proxy_hide_header      x-amz-request-id;
        proxy_hide_header      Set-Cookie;
        proxy_ignore_headers   "Set-Cookie";
        proxy_buffering        off;
        proxy_intercept_errors on;
        add_header             Access-Control-Allow-Origin "*";
        add_header             Access-Control-Allow-Methods GET;
        proxy_set_header X-Request-ID $sb_request_id;
        proxy_pass             https://$bucket/content-plugins/$url_full;
    }
    location /thirdparty {
          # Enabling cache for Response code 200
          expires 1M;
          add_header Pragma public;
          add_header Cache-Control "public";
          # Enabling compression
          gzip            on;
          gzip_min_length 100000;
          gzip_proxied    expired no-cache no-store private auth;
          gzip_types application/javascript application/x-javascript text/css text/javascript;
      rewrite ^/(.*) /$1 break;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Scheme $scheme;
      proxy_connect_timeout 5;
      proxy_send_timeout 60;
      proxy_read_timeout 70;
      proxy_set_header    X-Forwarded-Proto $scheme;
      proxy_set_header Connection "";
      proxy_http_version 1.1;
      proxy_set_header X-Request-ID $sb_request_id;
      proxy_pass http://player;
    }
    location ~* ^/desktop/(.*) {
          # Enabling cache for Response code 200
          expires 1M;
          add_header Pragma public;
          add_header Cache-Control "public";
          # Enabling compression
          gzip            on;
          gzip_min_length 100000;
          gzip_proxied    expired no-cache no-store private auth;
          gzip_types application/javascript application/x-javascript text/css text/javascript;
          if ($request_method = OPTIONS ) {
                  add_header Access-Control-Allow-Origin "*" ;
                  add_header Access-Control-Allow-Methods "GET, OPTIONS, PATCH, POST";
                  add_header Access-Control-Allow-Headers "Access-Control-Allow-Origin, Authorization, Content-Type, user-id";
                  # add_header Access-Control-Allow-Credentials "true";
                  add_header Content-Length 0;
                  add_header Content-Type text/plain;
                  return 200;
          }
        set $bucket        "{{ .Values.cloud_storage_base_url }}/{{ .Values.cloud_public_storage_container }}";
        set $url_full         '$1';
        proxy_http_version     1.1;
        proxy_set_header       Host "{{ (split "//" .Values.cloud_storage_base_url)._1 }}";
        proxy_set_header       Authorization '';
        proxy_hide_header      Access-Control-Allow-Origin;
        proxy_hide_header      Access-Control-Allow-Methods;
        proxy_hide_header      x-amz-id-2;
        proxy_hide_header      x-amz-request-id;
        proxy_hide_header      Set-Cookie;
        proxy_ignore_headers   "Set-Cookie";
        proxy_buffering        off;
        proxy_intercept_errors on;
        add_header             Access-Control-Allow-Origin "*";
        add_header             Access-Control-Allow-Methods GET;
        proxy_set_header X-Request-ID $sb_request_id;
        proxy_pass             https://$bucket/$url_full;
    }
    location / {
      rewrite ^/(.*) /$1 break;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Scheme $scheme;
      proxy_connect_timeout 5;
      proxy_send_timeout 60;
      proxy_read_timeout 70;
      proxy_set_header    X-Forwarded-Proto $scheme;
      proxy_set_header Connection "";
      proxy_http_version 1.1;
      proxy_set_header X-Request-ID $sb_request_id;
      proxy_pass http://player;
    }
    location /v3/device/register {
      proxy_set_header X-Request-ID $sb_request_id;
      proxy_pass http://kong;
      proxy_set_header Connection "";
      rewrite ^/v3/device/register/(.*) /v3/device/register/$1 break;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Scheme $scheme;
      proxy_connect_timeout 5;
      proxy_send_timeout 60;
      proxy_read_timeout 70;
      proxy_http_version 1.1;
    }
    location /action/data/v3/metrics {
      proxy_set_header X-Request-ID $sb_request_id;
      proxy_pass http://kong;
      proxy_set_header Connection "";
      rewrite ^/action/data/v3/metrics/(.*) /data/v3/metrics/$1 break;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Scheme $scheme;
      proxy_connect_timeout 5;
      proxy_send_timeout 60;
      proxy_read_timeout 70;
    }
    location  ~ /resourcebundles/v1/read|/learner/data/v1/(role/read|system/settings/get)|/v1/tenant/info  {
      proxy_cache_key $proxy_host$request_uri;
      proxy_cache proxy_cache;
      add_header X-Proxy-Cache $upstream_cache_status;
      add_header X-Proxy-Cache-Date $upstream_http_date;
      proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
      proxy_cache_revalidate on;
      proxy_cache_background_update on;
      proxy_cache_lock on;
      proxy_cache_valid 200 3600s;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Scheme $scheme;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Request-ID $sb_request_id;
      proxy_pass http://player;
    }
    location /api/channel/v1/read {
      proxy_cache_key $proxy_host$request_uri;
      proxy_cache framework_cache;
      add_header X-Proxy-Cache $upstream_cache_status;
      add_header X-Proxy-Cache-Date $upstream_http_date;
      proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
      proxy_cache_revalidate on;
      proxy_cache_background_update on;
      proxy_cache_lock on;
      proxy_cache_valid 200 3600s;
      rewrite ^/api/channel/v1/read/(.*) /channel/v1/read/$1 break;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Scheme $scheme;
      proxy_set_header    X-Forwarded-For   $remote_addr;
      proxy_connect_timeout 5;
      proxy_send_timeout 60;
      proxy_read_timeout 70;
      proxy_http_version 1.1;
      proxy_set_header X-Request-ID $sb_request_id;
      proxy_pass http://kong;
    }
    location ~ /chatapi/bot {
      set $target http://router-service.{{ .Release.namespace }}.svc.cluster.local:8000;
      rewrite ^/chatapi/(.*) /$1 break;
      proxy_pass $target;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Scheme $scheme;
      proxy_connect_timeout 5;
      proxy_send_timeout 60;
      proxy_read_timeout 70;
      proxy_set_header    X-Forwarded-Proto $scheme;
      proxy_set_header Connection "";
      proxy_http_version 1.1;
    }
    location /oauth2callback {
      return 200 'OK';
      add_header Content-Type text/plain;
    }
    }
---    
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
  namespace: {{ .Release.namespace }}
data:    
  nginx.conf: |    
    user  nginx;
    worker_processes  auto;
    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;
    events {
        worker_connections  10000;
    }
    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        resolver {{ (lookup "v1" "Service" "kube-system" "kube-dns").spec.clusterIP }} valid=30s;
        lua_load_resty_core off;
        log_format  main  '$remote_addr - $remote_user [$time_local] '
                          '"$request" $status $body_bytes_sent'
                          ' $request_time $upstream_response_time $pipe'
                          ' "$http_referer" "$http_user_agent" "$sb_request_id"'
                          ' "$http_x_device_id" "$http_x_channel_id" "$http_x_app_id"';
        access_log  /var/log/nginx/access.log  main;
        # Shared dictionary to store metrics
        lua_shared_dict prometheus_metrics 100M;
        lua_package_path "/etc/nginx/lua_modules/?.lua";
        # Defining request_id
        # If the client send request_id it should be preffered over the default one
        map $http_x_request_id $sb_request_id {
          default  $http_x_request_id;
          ''  $request_id;
        }
        # Defining upstream cache status for nginx metrics
        map $upstream_cache_status $cache_status {
          default  $upstream_cache_status;
          ''       "NONE";
        }
        # Defining metrics
        init_worker_by_lua_block {
          prometheus = require("prometheus").init("prometheus_metrics")
          metric_requests = prometheus:counter(
            "nginx_http_requests_total", "Number of HTTP requests", {"host", "status", "request_method", "cache_status"})
          metric_latency = prometheus:histogram(
            "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
          metric_connections = prometheus:gauge(
            "nginx_http_connections", "Number of HTTP connections", {"state"})
        }
        log_by_lua_block {
          metric_requests:inc(1, {ngx.var.server_name, ngx.var.status, ngx.var.request_method, ngx.var.cache_status })
          metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
        }
        header_filter_by_lua_block {
        ngx.header["server"] = nil
        }
        sendfile        on;
        #tcp_nopush     on;
        client_max_body_size 60M;
        keepalive_timeout  65s;
        keepalive_requests 200;
        # Nginx connection limit per ip
        limit_conn_zone $binary_remote_addr zone=limitbyaddr:10m;
        limit_conn_status 429;


        upstream player {
            server player:3000;
            keepalive 1000;
        }

        upstream kong {
            server kong:8000;
            keepalive 1000;
        }
        
        include /etc/nginx/defaults.d/*.conf;
        # local caching for images and files
        proxy_cache_path /tmp/proxy_cache levels=1:2 keys_zone=tmp_cache:5m max_size=10m inactive=60m use_temp_path=off;
        proxy_cache_path /tmp/api_cache levels=1:2 keys_zone=proxy_cache:5m max_size=300m inactive=60m use_temp_path=off;
        # cache framework
        proxy_cache_path /tmp/framework_cache levels=1:2 keys_zone=framework_cache:5m max_size=700m inactive=60m use_temp_path=off;
        # cache content
        # 1‑MB zone can store data for about 8,000 keys, so the 10‑MB zone configured in the example can store data for about 80,000 keys.
        proxy_cache_path /tmp/content_cache levels=1:2 keys_zone=content_cache:100m max_size=1500m inactive=60m use_temp_path=off;
      server {
        listen 9145;
        location /metrics {
          content_by_lua_block {
              metric_connections:set(ngx.var.connections_reading, {"reading"})
              metric_connections:set(ngx.var.connections_waiting, {"waiting"})
              metric_connections:set(ngx.var.connections_writing, {"writing"})
              prometheus:collect()
            }
        }
      }
    }

