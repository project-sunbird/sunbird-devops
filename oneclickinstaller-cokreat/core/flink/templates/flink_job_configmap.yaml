apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-config
  namespace: {{ .Values.namespace }}
  labels:
    app: flink
data:
  base-config: |+
    kafka {
      broker-servers = "{{ .Values.kafka_host }}:9092"
      producer.broker-servers = "{{ .Values.kafka_host }}:9092"
      consumer.broker-servers = "{{ .Values.kafka_host }}:9092"
      zookeeper = "{{ .Values.zookeeper_host }}:2181"
      producer {
        max-request-size = 1572864
        batch.size = 98304
        linger.ms = 10
        compression = "snappy"
      }
      output.system.event.topic = "dev.system.events"
    }
    job {
      env = "dev"
      enable.distributed.checkpointing = false
      statebackend {
        blob {
          storage {
            account = "{{ .Values.cloud_storage_key }}.blob.core.windows.net"
            container = "{{ .Values.cloud_storage_flink_bucketname }}"
            checkpointing.dir = "checkpoint"
          }
        }
        base.url = "wasbs://"${job.statebackend.blob.storage.container}"@"${job.statebackend.blob.storage.account}"/"${job.statebackend.blob.storage.checkpointing.dir} }
    }
    task {
      parallelism = 1
      consumer.parallelism = 1
      checkpointing.compressed = true
      checkpointing.interval = 10
      checkpointing.pause.between.seconds = 3000
      restart-strategy.attempts = 3
      restart-strategy.delay = 30000 # in milli-seconds
    }
  
  
    redis {
    host = {{ .Values.redis_host }}
    port = 6379
    connection {
      max = 2
      idle.min = 1
      idle.max = 2
      minEvictableIdleTimeSeconds = 120
      timeBetweenEvictionRunsSeconds = 300
        }
    }
    lms-cassandra {
    host = {{ .Values.cassandra_host }}
    port = "9042"
    }
  
    neo4j {
    routePath = "bolt://{{ .Values.neo4j_host }}:7687"
    graph = "domain"
    }
  
    es {
      basePath = "{{ .Values.elasticsearch_host }}:9200"
    }
    schema {
      basePath = "{{ .Values.kp_schema_base_path }}"
      supportedVersion = {
        itemset = "2.0"
      }
    }
  
{{ if eq .Release.Name "post-publish-processor" }}
  post-publish-processor: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = dock.content.postpublish.request
      groupId = dock-post-publish-processor-group
      publish.topic = dock.publish.job.request
      qrimage.topic = dock.qrimage.request
      dialcode.context.topic = dock.dialcode.context.job.request
    }
    task {
      consumer.parallelism = 1
      router.parallelism = 1
      shallow_copy.parallelism = 1
      link_dialcode.parallelism = 1
      batch_create.parallelism = 1
      dialcode_context_updater.parallelism = 1
    }
    lms-cassandra {
      keyspace = "sunbird_courses"
      batchTable = "course_batch"
    }

    dialcode-cassandra {
      keyspace = "dialcodes"
      imageTable = "dialcode_images"
    }
    service {
      search.basePath = "http://{{ .Values.nginx_private_ingress_ip }}/search"
      lms.basePath = "http://{{ .Values.nginx_private_ingress_ip }}/lms"
      learning_service.basePath = "http://learning-service.dock.svc.cluster.local:8080/learning-service"
      dial.basePath = "https://{{ .Values.domain }}/dial/"
    }

    cloud_storage_type="{{ .Values.cloud_service_provider }}"
    cloud_storage_key="{{ .Values.cloud_storage_key }}"
    cloud_storage_secret="{{ .Values.cloud_storage_secret }}"
    cloud_storage_container="{{ .Values.cloud_storage_content_bucketname }}"

    cloudstorage.metadata.replace_absolute_path=false
    cloudstorage.relative_path_prefix=CONTENT_STORAGE_BASE_PATH
    cloudstorage.read_base_path="https://{{ .Values.cloud_storage_key }}.core.windows.net"
    cloudstorage.write_base_path=["https://{{ .Values.cloud_storage_key }}.core.windows.net","https://obj.dev.sunbird.org"]
    cloudstorage.metadata.list=["appIcon", "artifactUrl", "posterImage", "previewUrl", "thumbnail", "assetsMap", "certTemplate", "itemSetPreviewUrl", "grayScaleAppIcon", "sourceURL", "variants", "downloadUrl", "streamingUrl", "toc_url", "data", "question", "solutions", "editorState", "media", "pdfUrl", "transcripts"]

  flink-conf: |+
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
    scheduler-mode: reactive
    heartbeat.timeout: 8000
    heartbeat.interval: 5000
    taskmanager.memory.process.size: 1700m
    jobmanager.memory.process.size: 1600m
  {{ end }}

{{ if eq .Release.Name "search-indexer" }}
  search-indexer: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = "staging.learning.graph.events"
      error.topic = "staging.learning.events.failed"
      groupId = "staging-search-indexer-group"
    }
    task {
      consumer.parallelism = 1
      router.parallelism = 1
      compositeSearch.parallelism = 1
      dialcodeIndexer.parallelism = 1
      dialcodemetricsIndexer.parallelism = 1
    }
    compositesearch.index.name = "compositesearch"
    dialcode.index.name = "dialcode"
    dailcodemetrics.index.name = "dialcodemetrics"
    restrict.metadata.objectTypes = []
    nested.fields = ["badgeAssertions", "targets", "badgeAssociations", "plugins", "me_totalTimeSpent", "me_totalPlaySessionCount", "me_totalTimeSpentInSec", "batches", "trackable", "credentials", "discussionForum", "provider", "osMetadata", "actions", "transcripts", "accessibility"]
    schema.definition_cache.expiry = 14400
    restrict.objectTypes = ["EventSet", "EventSetImage", "Event", "EventImage", "Questionnaire", "Misconception", "FrameworkType", "Concept", "Misconception", "Language", "Reference", "Dimension", "Method", "Library", "Domain", "Api"]
    ignored.fields=["responseDeclaration", "body", "options", "lastStatusChangedOn", "SYS_INTERNAL_LAST_UPDATED_ON", "sYS_INTERNAL_LAST_UPDATED_ON", "branchingLogic"]

    cloud_storage_type="{{ .Values.cloud_service_provider }}"
    cloud_storage_key="{{ .Values.cloud_storage_key }}"
    cloud_storage_secret="{{ .Values.cloud_storage_secret }}"
    cloud_storage_container="{{ .Values.cloud_storage_content_bucketname }}"

    cloudstorage.metadata.replace_absolute_path=false
    cloudstorage.relative_path_prefix=CONTENT_STORAGE_BASE_PATH
    cloudstorage.read_base_path="https://{{ .Values.cloud_storage_key }}.core.windows.net"
    cloudstorage.write_base_path=["https://{{ .Values.cloud_storage_key }}.core.windows.net","https://obj.dev.sunbird.org"]
    cloudstorage.metadata.list=["appIcon", "artifactUrl", "posterImage", "previewUrl", "thumbnail", "assetsMap", "certTemplate", "itemSetPreviewUrl", "grayScaleAppIcon", "sourceURL", "variants", "downloadUrl", "streamingUrl", "toc_url", "data", "question", "solutions", "editorState", "media", "pdfUrl", "transcripts"]

  flink-conf: |+
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
    scheduler-mode: reactive
    heartbeat.timeout: 8000
    heartbeat.interval: 5000
    taskmanager.memory.process.size: 1700m
    jobmanager.memory.process.size: 1600m
  {{ end }}


{{ if eq .Release.Name "video-stream-generator" }}
  video-stream-generator: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = "dock.content.postpublish.request"
      groupId = "dock-video-stream-generator-group"
    }
    task {
      timer.duration = 1800
      consumer.parallelism = 1
      parallelism = 1
      max.retries = 10
    }
    lms-cassandra {
      keyspace = dock_platform_db
      table = "job_request"
    }
    service.content.basePath="http://{{ .Values.nginx_private_ingress_ip }}/content"
    azure {
      location = "centralindia"
      login {
        endpoint="https://login.microsoftonline.com"
      }
      api {
        endpoint="https://management.azure.com"
        version = "2018-07-01"
      }
      transform {
        default = "media_transform_default"
        hls = "media_transform_hls"
      }
      stream {
        base_url=""
        endpoint_name = "default"
        protocol = "Hls"
        policy_name = "Predefined_ClearStreamingOnly"
      }
    }
    azure_tenant=""
    azure_subscription_id=""
    azure_account_name=""
    azure_resource_group_name=""
    azure_token_client_key=""
    azure_token_client_secret=""
    ## CSP Name. e.g: aws or azure
    media_service_type="azure"
    ## AWS Elemental Media Convert Config
    aws {
      region=""
      content_bucket_name=""
      token {
        access_key=""
        access_secret=""
      }
      api {
        endpoint=""
        version="2017-08-29"
      }
      service {
        name="mediaconvert"
        queue=""
        role=""
      }
      stream {
        protocol="Hls"
      }
    }

  flink-conf: |+
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
    scheduler-mode: reactive
    heartbeat.timeout: 8000
    heartbeat.interval: 5000
    taskmanager.memory.process.size: 1700m
    jobmanager.memory.process.size: 1600m  
  {{ end }}

{{ if eq .Release.Name "asset-enrichment" }}
  asset-enrichment: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = dock.learning.job.request
      groupId = dock-asset-enrichment-group
      video_stream.topic = dock.content.postpublish.request
    }
    task {
      checkpointing.timeout = 900000
      checkpointing.interval = 300000
      checkpointing.pause.between.seconds = 180000
      consumer.parallelism = 1
      router.parallelism = 1
      imageEnrichment.parallelism = 1
      videoEnrichment.parallelism = 1
    }
    content {
      stream {
        enabled = true
        mimeType = ["video/mp4", "video/webm"]
      }
      youtube {
        applicationName = "fetch-youtube-license"
        regexPattern = ["\\?vi?=([^&]*)", "watch\\?.*v=([^&]*)", "(?:embed|vi?)/([^/?]*)", "^([A-Za-z0-9\\-\\_]*)"]
      }
      upload.context.driven = true
      max.iteration.count = 2
    }
    thumbnail.max {
      sample = 5
      size.pixel = 150
    }

    content_youtube_apikey="{{ .Values.youtube_api_key }}"
    cloud_storage_type="{{ .Values.cloud_service_provider }}"
    cloud_storage_key="{{ .Values.cloud_storage_key }}"
    cloud_storage_secret="{{ .Values.cloud_storage_secret }}"
    cloud_storage_container="{{ .Values.cloud_storage_content_bucketname }}"

    cloudstorage.metadata.replace_absolute_path=false
    cloudstorage.relative_path_prefix=CONTENT_STORAGE_BASE_PATH
    cloudstorage.read_base_path="https://{{ .Values.cloud_storage_key }}.core.windows.net"
    cloudstorage.write_base_path=["https://{{ .Values.cloud_storage_key }}.core.windows.net","https://obj.dev.sunbird.org"]
    cloudstorage.metadata.list=["appIcon", "artifactUrl", "posterImage", "previewUrl", "thumbnail", "assetsMap", "certTemplate", "itemSetPreviewUrl", "grayScaleAppIcon", "sourceURL", "variants", "downloadUrl", "streamingUrl", "toc_url", "data", "question", "solutions", "editorState", "media", "pdfUrl", "transcripts"]


  flink-conf: |+
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
    scheduler-mode: reactive
    heartbeat.timeout: 8000
    heartbeat.interval: 5000
    taskmanager.memory.process.size: 1700m
    jobmanager.memory.process.size: 1600m  
  {{ end }}


{{ if eq .Release.Name "audit-history-indexer" }}
  audit-history-indexer: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = "dock.learning.graph.events"
      groupId = "dock-audit-history-indexer-group"
    }

    task {
      consumer.parallelism = 1
      parallelism = 1
      window.time = 60
    }

    timezone = "IST"

  flink-conf: |+
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
    scheduler-mode: reactive
    heartbeat.timeout: 8000
    heartbeat.interval: 5000
    taskmanager.memory.process.size: 1700m
    jobmanager.memory.process.size: 1600m   
  {{ end }}

{{ if eq .Release.Name "auto-creator-v2" }}
  auto-creator-v2: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = "dock.object.import.request"
      groupId = "dock-auto-creator-v2-group"
    }

    task {
      consumer.parallelism = 1
      parallelism = 1
      window.time = 60
    }

    question {
      keyspace = "dock_question_store"
    }
    questionset {
      keyspace = "dock_hierarchy_store"
    }
    service {
      content.basePath = ""http://{{ .Values.nginx_private_ingress_ip }}/content""
    }

    cloud_storage_type="{{ .Values.cloud_service_provider }}"
    cloud_storage_key="{{ .Values.cloud_storage_key }}"
    cloud_storage_secret="{{ .Values.cloud_storage_secret }}"
    cloud_storage_container="{{ .Values.cloud_storage_content_bucketname }}"

    source {
      baseUrl=""https://{{ .Values.domain }}/api""
    }

  flink-conf: |+
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
  {{ end }}

{{ if eq .Release.Name "content-auto-creator" }}
  content-auto-creator: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = "dock.auto.creation.job.request"
      groupId = "dock-content-auto-creator-group"
      failed.topic = "dock.auto.creation.job.request.failed"
    }

    task {
      consumer.parallelism = 1
      parallelism = 1
      window.time = 60
      checkpointing.timeout = 4200000
    }

    redis {
      database {
        relationCache.id = 10
        collectionCache.id = 5
      }
    }

    service {
      content_service.basePath = "http://{{ .Values.nginx_private_ingress_ip }}/content"
      search.basePath = "http://{{ .Values.nginx_private_ingress_ip }}/search"
      lms.basePath = "http://{{ .Values.nginx_private_ingress_ip }}/lms"
      learning_service.basePath = "http://learning-service.dock.svc.cluster.local:8080/learning-service"

    }

    cloud_storage_type="{{ .Values.cloud_service_provider }}"
    cloud_storage_key="{{ .Values.cloud_storage_key }}"
    cloud_storage_secret="{{ .Values.cloud_storage_secret }}"
    cloud_storage_container="{{ .Values.cloud_storage_content_bucketname }}"

    cloudstorage.metadata.replace_absolute_path=false
    cloudstorage.relative_path_prefix=CONTENT_STORAGE_BASE_PATH
    cloudstorage.read_base_path="https://{{ .Values.cloud_storage_key }}.core.windows.net"
    cloudstorage.write_base_path=["https://{{ .Values.cloud_storage_key }}.core.windows.net","https://obj.dev.sunbird.org"]
    cloudstorage.metadata.list=["appIcon", "artifactUrl", "posterImage", "previewUrl", "thumbnail", "assetsMap", "certTemplate", "itemSetPreviewUrl", "grayScaleAppIcon", "sourceURL", "variants", "downloadUrl", "streamingUrl", "toc_url", "data", "question", "solutions", "editorState", "media", "pdfUrl", "transcripts"]

    content_auto_creator {
        actions=auto-create
        allowed_object_types=["Content"]
        allowed_content_stages=["create","upload","review","publish"]
        content_mandatory_fields=["name","code","mimeType","primaryCategory","artifactUrl","lastPublishedBy"]
        content_props_to_removed=["identifier","downloadUrl","variants","createdOn","collections","children","lastUpdatedOn","SYS_INTERNAL_LAST_UPDATED_ON","versionKey","s3Key","status","pkgVersion","toc_url","mimeTypesCount","contentTypesCount","leafNodesCount","childNodes","prevState","lastPublishedOn","flagReasons","compatibilityLevel","size","publishChecklist","publishComment","lastPublishedBy","rejectReasons","rejectComment","badgeAssertions","leafNodes","sYS_INTERNAL_LAST_UPDATED_ON","previewUrl","channel","objectType","visibility","version","pragma","prevStatus","streamingUrl","idealScreenSize","contentDisposition","lastStatusChangedOn","idealScreenDensity","lastSubmittedOn","publishError","flaggedBy","flags","lastFlaggedOn","publisher","lastUpdatedBy","lastSubmittedBy","uploadError","lockKey","publish_type","reviewError","totalCompressedSize","origin","originData","importError","questions"]
        bulk_upload_mime_types=["video/mp4"]
        artifact_upload_max_size=157286400
        content_create_props=["name","code","mimeType","contentType","framework","processId","primaryCategory"]
        artifact_upload_allowed_source=[]
        g_service_acct_cred="{{ .Values.auto_creator_g_service_acct_cred }}"
        gdrive.application_name=drive-download
        initial_backoff_delay=120000
        maximum_backoff_delay=1200000
        increment_backoff_delay=2
        api_call_delay=1
        maxIteration=1
    }

    search_exists_fields=["originData"]
    search_fields=["identifier","mimeType","pkgVersion","channel","status","origin","originData","artifactUrl"]


  flink-conf: |+
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
  {{ end }}  

{{ if eq .Release.Name "content-publish" }}
  content-publish: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = dock.publish.job.request
      post_publish.topic = dock.content.postpublish.request
      mvc.topic = "dock.mvc.processor.job.request"
      error.topic = "dock.learning.events.failed"
      groupId = dock-content-publish-group
    }
    task {
      consumer.parallelism = 1
      parallelism = 1
      router.parallelism = 1
    }
    redis {
      host={{ .Values.redis_host }}
      port=6379
      database {
        contentCache.id = 0
      }
    }
    content {
      bundleLocation = "/tmp/contentBundle"
      isECARExtractionEnabled = true
      retry_asset_download_count = 1
      keyspace = "dock_content_store"
      table = "content_data"
      tmp_file_location = "/tmp"
      objectType = ["Content", "ContentImage","Collection","CollectionImage"]
      mimeType = ["application/pdf",
                                   "application/vnd.ekstep.ecml-archive",
                                   "application/vnd.ekstep.html-archive",
                                   "application/vnd.android.package-archive",
                                   "application/vnd.ekstep.content-archive",
                                   "application/epub",
                                   "application/msword",
                                   "application/vnd.ekstep.h5p-archive",
                                   "video/webm",
                                   "video/mp4",
                                   "application/vnd.ekstep.content-collection",
                                   "video/quicktime",
                                   "application/octet-stream",
                                   "application/json",
                                   "application/javascript",
                                   "application/xml",
                                   "text/plain",
                                   "text/html",
                                   "text/javascript",
                                   "text/xml",
                                   "text/css",
                                   "image/jpeg",
                                   "image/jpg",
                                   "image/png",
                                   "image/tiff",
                                   "image/bmp",
                                   "image/gif",
                                   "image/svg+xml",
                                   "image/x-quicktime",
                                   "video/avi",
                                   "video/mpeg",
                                   "video/quicktime",
                                   "video/3gpp",
                                   "video/mp4",
                                   "video/ogg",
                                   "video/webm",
                                   "video/msvideo",
                                   "video/x-msvideo",
                                   "video/x-qtc",
                                   "video/x-mpeg",
                                   "audio/mp3",
                                   "audio/mp4",
                                   "audio/mpeg",
                                   "audio/ogg",
                                   "audio/webm",
                                   "audio/x-wav",
                                   "audio/wav",
                                   "audio/mpeg3",
                                   "audio/x-mpeg-3",
                                   "audio/vorbis",
                                   "application/x-font-ttf",
                                   "application/vnd.ekstep.plugin-archive",
                                   "video/x-youtube",
                                   "video/youtube",
                                   "text/x-url"]
      asset_download_duration = "60 seconds"
      stream {
        enabled = false
        mimeType = ["video/mp4", "video/webm"]
      }
      artifact.size.for_online= 209715200

      downloadFiles {
        spine = ["appIcon"]
        full = ["appIcon", "grayScaleAppIcon", "artifactUrl", "itemSetPreviewUrl", "media"]
      }

      nested.fields=["badgeAssertions", "targets", "badgeAssociations", "plugins", "me_totalTimeSpent", "me_totalPlaySessionCount", "me_totalTimeSpentInSec", "batches", "trackable", "credentials", "discussionForum", "provider", "osMetadata", "actions", "transcripts", "accessibility"]

    }
    cloud_storage {
        folder {
            content = "content"
            artifact = "artifact"
        }
    }

    hierarchy {
      keyspace = "dock_hierarchy_store"
      table = "content_hierarchy"
    }

    contentTypeToPrimaryCategory {
      ClassroomTeachingVideo: "Explanation Content"
      ConceptMap: "Learning Resource"
      Course: "Course"
      CuriosityQuestionSet: "Practice Question Set"
      eTextBook: "eTextbook"
      Event: "Event"
      EventSet: "Event Set"
      ExperientialResource: "Learning Resource"
      ExplanationResource: "Explanation Content"
      ExplanationVideo: "Explanation Content"
      FocusSpot: "Teacher Resource"
      LearningOutcomeDefinition: "Teacher Resource"
      MarkingSchemeRubric: "Teacher Resource"
      PedagogyFlow: "Teacher Resource"
      PracticeQuestionSet: "Practice Question Set"
      PracticeResource: "Practice Question Set"
      SelfAssess: "Course Assessment"
      TeachingMethod: "Teacher Resource"
      TextBook: "Digital Textbook"
      Collection: "Content Playlist"
      ExplanationReadingMaterial: "Learning Resource"
      LearningActivity: "Learning Resource"
      LessonPlan: "Content Playlist"
      LessonPlanResource: "Teacher Resource"
      PreviousBoardExamPapers: "Learning Resource"
      TVLesson: "Explanation Content"
      OnboardingResource: "Learning Resource"
      ReadingMaterial: "Learning Resource"
      Template: "Template"
      Asset: "Asset"
      Plugin: "Plugin"
      LessonPlanUnit: "Lesson Plan Unit"
      CourseUnit: "Course Unit"
      TextBookUnit: "Textbook Unit"
      Asset: "Certificate Template"
    }

    compositesearch.index.name = "compositesearch"
    search.document.type = "cs"
    enableDIALContextUpdate = "Yes"

    cloud_storage_type="{{ .Values.cloud_service_provider }}"
    cloud_storage_key="{{ .Values.cloud_storage_key }}"
    cloud_storage_secret="{{ .Values.cloud_storage_secret }}"
    cloud_storage_container="{{ .Values.cloud_storage_content_bucketname }}"

    cloudstorage.metadata.replace_absolute_path=false
    cloudstorage.relative_path_prefix=CONTENT_STORAGE_BASE_PATH
    cloudstorage.read_base_path="https://{{ .Values.cloud_storage_key }}.core.windows.net"
    cloudstorage.write_base_path=["https://{{ .Values.cloud_storage_key }}.core.windows.net","https://obj.dev.sunbird.org"]
    cloudstorage.metadata.list=["appIcon", "artifactUrl", "posterImage", "previewUrl", "thumbnail", "assetsMap", "certTemplate", "itemSetPreviewUrl", "grayScaleAppIcon", "sourceURL", "variants", "downloadUrl", "streamingUrl", "toc_url", "data", "question", "solutions", "editorState", "media", "pdfUrl", "transcripts"

    master.category.validation.enabled ="False"
    service {
      print.basePath = "http://{{ .Values.nginx_private_ingress_ip }}/print"
    }

  flink-conf: |+
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
  {{ end }}

{{ if eq .Release.Name "csp-migrator" }}
  csp-migrator: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = "dock.csp.migration.job.request"
      groupId = "dock-csp-migrator-group"
      failed.topic = "dock.csp.migration.job.request.failed"
      live_video_stream.topic = "dock.live.video.stream.request"
      live_content_node_republish.topic = "dock.republish.job.request"
      live_question_node_republish.topic = "dock.assessment.republish.request"
    }
    task {
      timer.duration = 1800
      consumer.parallelism = 1
      parallelism = 1
      max.retries = 10
      cassandra-migrator.parallelism = 1
    }
    redis {
      database {
        relationCache.id = 10
        collectionCache.id = 5
      }
    }

    hierarchy {
      keyspace = "dock_hierarchy_store"
      table = "content_hierarchy"
    }

    content {
        keyspace = "dock_content_store"
        content_table = "content_data"
        assessment_table = "question_data"
    }

    questionset.hierarchy.keyspace="dock_hierarchy_store"
    questionset.hierarchy.table="questionset_hierarchy"

    key_value_strings_to_migrate = {
        "https://qa.ekstep.in/assets/public": "CONTENT_STORAGE_BASE_PATH",
        "https://dev.ekstep.in/assets/public": "CONTENT_STORAGE_BASE_PATH",
        "https://community.ekstep.in/assets/public": "CONTENT_STORAGE_BASE_PATH",
        "https://community.ekstep.in:443": "CONTENT_STORAGE_BASE_PATH",
        "https://ekstep-public-qa.s3-ap-south-1.amazonaws.com": "CONTENT_STORAGE_BASE_PATH",
        "https://ekstep-public-dev.s3-ap-south-1.amazonaws.com": "CONTENT_STORAGE_BASE_PATH",
        "https://ekstep-public-preprod.s3-ap-south-1.amazonaws.com": "CONTENT_STORAGE_BASE_PATH",
        "https://ekstep-public-prod.s3-ap-south-1.amazonaws.com": "CONTENT_STORAGE_BASE_PATH",
        "https://stagingdock.blob.core.windows.net/sunbird-content-dock": "CONTENT_STORAGE_BASE_PATH",
        "https://dockpreprodall.blob.core.windows.net/dock-content-preprod": "CONTENT_STORAGE_BASE_PATH",
        "https://dockprodall.blob.core.windows.net/dock-content-prod": "CONTENT_STORAGE_BASE_PATH",
        "CLOUD_STORAGE_BASE_PATH": "CONTENT_STORAGE_BASE_PATH"
    }

    neo4j_fields_to_migrate = {
        "asset": ["artifactUrl", "thumbnail", "downloadUrl","variants"],
        "content": ["appIcon", "artifactUrl", "posterImage", "previewUrl", "thumbnail", "assetsMap", "certTemplate", "itemSetPreviewUrl", "grayScaleAppIcon", "sourceURL", "variants", "downloadUrl","streamingUrl","transcripts"],
        "contentimage": ["appIcon", "artifactUrl", "posterImage", "previewUrl", "thumbnail", "assetsMap", "certTemplate", "itemSetPreviewUrl", "grayScaleAppIcon", "sourceURL", "variants", "downloadUrl","streamingUrl","transcripts"],
        "collection": ["appIcon", "artifactUrl", "posterImage", "previewUrl", "thumbnail", "toc_url", "grayScaleAppIcon", "variants", "downloadUrl"],
        "collectionimage": ["appIcon", "artifactUrl", "posterImage", "previewUrl", "thumbnail", "toc_url", "grayScaleAppIcon", "variants", "downloadUrl"],
        "plugins": ["artifactUrl"],
        "itemset": ["previewUrl", "downloadUrl"],
        "assessmentitem": ["data", "question", "solutions", "editorState", "media"],
        "question": ["appIcon","artifactUrl", "posterImage", "previewUrl","downloadUrl", "variants","pdfUrl"],
        "questionimage": ["appIcon","artifactUrl", "posterImage", "previewUrl","downloadUrl", "variants","pdfUrl"],
        "questionset": ["appIcon","artifactUrl", "posterImage", "previewUrl","downloadUrl", "variants","pdfUrl"],
        "questionsetimage": ["appIcon","artifactUrl", "posterImage", "previewUrl","downloadUrl", "variants","pdfUrl"]
    }

    cassandra_fields_to_migrate = {
        "assessmentitem": ["question", "editorstate", "solutions", "body"]
    }

    migrationVersion = 1
    video_stream_regeneration_enable = false
    live_node_republish_enable = true
    copy_missing_files_to_cloud = false
    download_path = /tmp

    cloud_storage_type="{{ .Values.cloud_service_provider }}"
    cloud_storage_key="{{ .Values.cloud_storage_key }}"
    cloud_storage_secret="{{ .Values.cloud_storage_secret }}"
    cloud_storage_container="{{ .Values.cloud_storage_content_bucketname }}"

    cloudstorage.metadata.replace_absolute_path=false
    cloudstorage.relative_path_prefix=CONTENT_STORAGE_BASE_PATH
    cloudstorage.read_base_path="https://{{ .Values.cloud_storage_key }}.core.windows.net"
    cloudstorage.write_base_path=["https://{{ .Values.cloud_storage_key }}.core.windows.net","https://obj.dev.sunbird.org"]
    cloudstorage.metadata.list=["appIcon", "artifactUrl", "posterImage", "previewUrl", "thumbnail", "assetsMap", "certTemplate", "itemSetPreviewUrl", "grayScaleAppIcon", "sourceURL", "variants", "downloadUrl", "streamingUrl", "toc_url", "data", "question", "solutions", "editorState", "media", "pdfUrl", "transcripts"]


  flink-conf: |+
    jobmanager.memory.flink.size: 2048m
    taskmanager.memory.flink.size: 2048m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
  {{ end }}  

{{ if eq .Release.Name "live-node-publisher" }}
  live-node-publisher: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = dock.republish.job.request
      live_video_stream.topic = "dock.live.video.stream.request"
      error.topic = "dock.learning.events.failed"
      skipped.topic = "dock.learning.events.skipped"
      groupId = dock-content-republish-group
    }
    task {
      parallelism = 1
      consumer.parallelism = 2
      router.parallelism = 2
      window.time = 60
      checkpointing.timeout = 900000
    }
    redis {
      host={{ .Values.redis_host }}
      port=6379
      database {
        contentCache.id = 0
      }
    }
    content {
      bundleLocation = "/tmp/contentBundle"
      isECARExtractionEnabled = true
      retry_asset_download_count = 1
      keyspace = "dock_content_store"
      table = "content_data"
      tmp_file_location = "/tmp"
      objectType = ["Content", "ContentImage","Collection","CollectionImage"]
      mimeType = ["application/pdf",
                   "application/vnd.ekstep.ecml-archive",
                   "application/vnd.ekstep.html-archive",
                   "application/vnd.android.package-archive",
                   "application/vnd.ekstep.content-archive",
                   "application/epub",
                   "application/msword",
                   "application/vnd.ekstep.h5p-archive",
                   "video/webm",
                   "video/mp4",
                   "application/vnd.ekstep.content-collection",
                   "video/quicktime",
                   "application/octet-stream",
                   "application/json",
                   "application/javascript",
                   "application/xml",
                   "text/plain",
                   "text/html",
                   "text/javascript",
                   "text/xml",
                   "text/css",
                   "image/jpeg",
                   "image/jpg",
                   "image/png",
                   "image/tiff",
                   "image/bmp",
                   "image/gif",
                   "image/svg+xml",
                   "image/x-quicktime",
                   "video/avi",
                   "video/mpeg",
                   "video/quicktime",
                   "video/3gpp",
                   "video/mp4",
                   "video/ogg",
                   "video/webm",
                   "video/msvideo",
                   "video/x-msvideo",
                   "video/x-qtc",
                   "video/x-mpeg",
                   "audio/mp3",
                   "audio/mp4",
                   "audio/mpeg",
                   "audio/ogg",
                   "audio/webm",
                   "audio/x-wav",
                   "audio/wav",
                   "audio/mpeg3",
                   "audio/x-mpeg-3",
                   "audio/vorbis",
                   "application/x-font-ttf",
                   "application/vnd.ekstep.plugin-archive",
                   "video/x-youtube",
                   "video/youtube",
                   "text/x-url"]
      asset_download_duration = "60 seconds"
      stream {
        enabled = false
        mimeType = ["video/mp4", "video/webm"]
      }
      artifact.size.for_online= 209715200

      downloadFiles {
        spine = ["appIcon"]
        full = ["appIcon", "grayScaleAppIcon", "artifactUrl", "itemSetPreviewUrl", "media"]
      }

      nested.fields=["badgeAssertions", "targets", "badgeAssociations", "plugins", "me_totalTimeSpent", "me_totalPlaySessionCount", "me_totalTimeSpentInSec", "batches", "trackable", "credentials", "discussionForum", "provider", "osMetadata", "actions", "transcripts", "accessibility"]

    }
    cloud_storage {
        folder {
            content = "content"
            artifact = "artifact"
        }
    }

    hierarchy {
      keyspace = "dock_hierarchy_store"
      table = "content_hierarchy"
    }

    contentTypeToPrimaryCategory {
      ClassroomTeachingVideo: "Explanation Content"
      ConceptMap: "Learning Resource"
      Course: "Course"
      CuriosityQuestionSet: "Practice Question Set"
      eTextBook: "eTextbook"
      Event: "Event"
      EventSet: "Event Set"
      ExperientialResource: "Learning Resource"
      ExplanationResource: "Explanation Content"
      ExplanationVideo: "Explanation Content"
      FocusSpot: "Teacher Resource"
      LearningOutcomeDefinition: "Teacher Resource"
      MarkingSchemeRubric: "Teacher Resource"
      PedagogyFlow: "Teacher Resource"
      PracticeQuestionSet: "Practice Question Set"
      PracticeResource: "Practice Question Set"
      SelfAssess: "Course Assessment"
      TeachingMethod: "Teacher Resource"
      TextBook: "Digital Textbook"
      Collection: "Content Playlist"
      ExplanationReadingMaterial: "Learning Resource"
      LearningActivity: "Learning Resource"
      LessonPlan: "Content Playlist"
      LessonPlanResource: "Teacher Resource"
      PreviousBoardExamPapers: "Learning Resource"
      TVLesson: "Explanation Content"
      OnboardingResource: "Learning Resource"
      ReadingMaterial: "Learning Resource"
      Template: "Template"
      Asset: "Asset"
      Plugin: "Plugin"
      LessonPlanUnit: "Lesson Plan Unit"
      CourseUnit: "Course Unit"
      TextBookUnit: "Textbook Unit"
      Asset: "Certificate Template"
    }

    compositesearch.index.name = "compositesearch"
    search.document.type = "cs"

    master.category.validation.enabled ="False"
    service {
      print.basePath = "http://{{ .Values.nginx_private_ingress_ip }}/print"
      search.basePath = "http://{{ .Values.nginx_private_ingress_ip }}/search"
    }  
    
    cloud_storage_type="{{ .Values.cloud_service_provider }}"
    cloud_storage_key="{{ .Values.cloud_storage_key }}"
    cloud_storage_secret="{{ .Values.cloud_storage_secret }}"
    cloud_storage_container="{{ .Values.cloud_storage_content_bucketname }}"

    cloudstorage.metadata.replace_absolute_path=false
    cloudstorage.relative_path_prefix=CONTENT_STORAGE_BASE_PATH
    cloudstorage.read_base_path="https://{{ .Values.cloud_storage_key }}.core.windows.net"
    cloudstorage.write_base_path=["https://{{ .Values.cloud_storage_key }}.core.windows.net","https://obj.dev.sunbird.org"]
    cloudstorage.metadata.list=["appIcon", "artifactUrl", "posterImage", "previewUrl", "thumbnail", "assetsMap", "certTemplate", "itemSetPreviewUrl", "grayScaleAppIcon", "sourceURL", "variants", "downloadUrl", "streamingUrl", "toc_url", "data", "question", "solutions", "editorState", "media", "pdfUrl", "transcripts"]

  flink-conf: |+
    jobmanager.memory.flink.size: 2048m
    taskmanager.memory.flink.size: 2048m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1  
  {{ end }}


{{ if eq .Release.Name "activity-aggregate-updater" }}
  activity-aggregate-updater: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = dock.coursebatch.job.request
      output.audit.topic = dock.telemetry.raw
      output.failed.topic = dock.activity.agg.failed
      output.certissue.topic = dock.issue.certificate.request
      groupId = dock-activity-aggregate-group
    }
    task {
      window.shards = 1000
      checkpointing.interval = 300000
      checkpointing.pause.between.seconds = 90000
      restart-strategy.attempts = 3 # max 3 restart attempts
      restart-strategy.delay = 240000 # in milli-seconds # on max restarts (3) within 4 min the job will fail.
      consumer.parallelism = 1
      dedup.parallelism = 1
      activity.agg.parallelism = 1
      enrolment.complete.parallelism = 1
    }
    lms-cassandra {
      keyspace = "sunbird_courses"
      consumption.table = "user_content_consumption"
      user_activity_agg.table = "user_activity_agg"
      user_enrolments.table = "user_enrolments"
    }
    redis {
      database {
        relationCache.id = 10
      }
    }
    dedup-redis {
      host = {{ .Values.redis_host }}
      port = 6379
      database.index = 13
      database.expiry = 604800
    }
    threshold.batch.read.interval = 60
    threshold.batch.read.size = 1
    threshold.batch.write.size = 10
    activity {
      module.aggs.enabled = true
      input.dedup.enabled = true
      filter.processed.enrolments = true
      collection.status.cache.expiry = 3600
    }
    service {
      search.basePath = "http://{{ .Values.nginx_private_ingress_ip }}/search"
    }

  flink-conf: |+
    jobmanager.memory.flink.size: 2048m
    taskmanager.memory.flink.size: 2048m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1  
  {{ end }}
  
{{ if eq .Release.Name "relation-cache-updater" }}
  relation-cache-updater: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = dock.content.postpublish.request
      groupId = dock-relation-cache-updater-group
    }
    task {
      consumer.parallelism = 1
      parallelism = 1
    }
    lms-cassandra {
          keyspace = "dock_hierarchy_store"
          table = "content_hierarchy"
    }
    redis {
      database.index = 10
    }
    dp-redis {
      host = {{ .Values.redis_host }}
      port = 6379
      database.index = 5
    }

  flink-conf: |+
    jobmanager.memory.flink.size: 2048m
    taskmanager.memory.flink.size: 2048m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1  
  {{ end }}

  log4j_console_properties: |+
{{ .Values.log4j_console_properties | indent 4 }}
