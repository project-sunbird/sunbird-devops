apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-config
  namespace: {{ .Values.namespace }}
  labels:
    app: flink
data:
  base-config: |+
    kafka {
      broker-servers = "{{ .Values.kafka_host }}:9092"
      producer.broker-servers = "{{ .Values.kafka_host }}:9092"
      consumer.broker-servers = "{{ .Values.kafka_host }}:9092"
      zookeeper = "{{ .Values.zookeeper_host }}:2181"
      producer {
        max-request-size = 1572864
        batch.size = 98304
        linger.ms = 10
        compression = "snappy"
      }
      output.system.event.topic = "dev.system.events"
    }
    job {
      env = "dev"
      enable.distributed.checkpointing = false
      statebackend {
        blob {
          storage {
            account = "{{ .Values.cloud_storage_key }}.blob.core.windows.net"
            container = "{{ .Values.cloud_storage_flink_bucketname }}"
            checkpointing.dir = "checkpoint"
          }
        }
        base.url = "wasbs://"${job.statebackend.blob.storage.container}"@"${job.statebackend.blob.storage.account}"/"${job.statebackend.blob.storage.checkpointing.dir} }
    }
    task {
      parallelism = 1
      consumer.parallelism = 1
      checkpointing.compressed = true
      checkpointing.interval = 10
      checkpointing.pause.between.seconds = 3000
      restart-strategy.attempts = 3
      restart-strategy.delay = 30000 # in milli-seconds
    }
  
  
    redis {
    host = {{ .Values.redis_host }}
    port = 6379
    connection {
      max = 2
      idle.min = 1
      idle.max = 2
      minEvictableIdleTimeSeconds = 120
      timeBetweenEvictionRunsSeconds = 300
        }
    }
    lms-cassandra {
    host = {{ .Values.cassandra_host }}
    port = "9042"
    }
  
    neo4j {
    routePath = "bolt://{{ .Values.neo4j_host }}:7687"
    graph = "domain"
    }
  
    es {
      basePath = "{{ .Values.elasticsearch_host }}:9200"
    }
    schema {
      basePath = "{{ .Values.kp_schema_base_path }}"
      supportedVersion = {
        itemset = "2.0"
      }
    }
  

{{ if eq .Release.Name "async-questionset-publish" }}
  async-questionset-publish: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = "dock.assessment.publish.request"
      post_publish.topic = "dock.assessment.postpublish.request"
      groupId = "dock-questionset-publish-group"
    }
    task {
      consumer.parallelism = 1
      parallelism = 1
      router.parallelism = 1
    }
    question {
      keyspace = "dock_question_store"
      table = "question_data"
    }
    questionset {
      keyspace = "dock_hierarchy_store"
      table = "questionset_hierarchy"
    }
    print_service.base_url = "http://{{ .Values.nginx_private_ingress_ip}}/print"
    master.category.validation.enabled ="False"

    cloud_storage_type="{{ .Values.cloud_service_provider }}"
    cloud_storage_key="{{ .Values.cloud_storage_key }}"
    cloud_storage_secret="{{ .Values.cloud_storage_secret }}"
    cloud_storage_container="{{ .Values.cloud_storage_content_bucketname }}"
    cloud_storage_endpoint: ""

    cloudstorage.metadata.replace_absolute_path=false
    cloudstorage.relative_path_prefix=CONTENT_STORAGE_BASE_PATH
    cloudstorage.read_base_path="https://{{ .Values.cloud_storage_key }}.core.windows.net"
    cloudstorage.write_base_path=["https://{{ .Values.cloud_storage_key }}.core.windows.net","https://obj.dev.sunbird.org"]
    cloudstorage.metadata.list=["appIcon","posterImage","artifactUrl","downloadUrl","variants","previewUrl","pdfUrl"]

  flink-conf: |+
    jobmanager.memory.flink.size: 2048m
    taskmanager.memory.flink.size: 2048m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
   {{ end }}

{{ if eq .Release.Name "questionset-republish" }}
  questionset-republish: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = dock.assessment.publish.request
      post_publish.topic = dock.content.postpublish.request
      groupId = dock-questionset-publish-group
    }
    task {
      consumer.parallelism = 1
      parallelism = 1
      router.parallelism = 1
    }
    question {
      keyspace = "dock_question_store"
      table = "question_data"
    }
    questionset {
      keyspace = "dock_hierarchy_store"
      table = "questionset_hierarchy"
    }
    print_service.base_url = "http://{{ .Values.nginx_private_ingress_ip}}/print"
    master.category.validation.enabled ="False"

    cloud_storage_type="{{ .Values.cloud_service_provider }}"
    cloud_storage_key="{{ .Values.cloud_storage_key }}"
    cloud_storage_secret="{{ .Values.cloud_storage_secret }}"
    cloud_storage_container="{{ .Values.cloud_storage_content_bucketname }}"
    cloud_storage_endpoint: ""

  flink-conf: |+
    jobmanager.memory.flink.size: 2048m
    taskmanager.memory.flink.size: 2048m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
  {{ end }}  

  log4j_console_properties: |+
{{ .Values.log4j_console_properties | indent 4 }}
