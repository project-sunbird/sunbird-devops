apiVersion: v1
kind: ConfigMap
metadata:
  name: learning-config
  namespace: {{ .Release.Namespace }}
data:
  learning-service_application.conf: |
    #Platform Configuration
    platform.services=["learning", "language", "config"]

    # Learning-Service Configuration
    learning.graph_ids=["domain"]
    content.metadata.visibility.parent=["textbookunit", "courseunit", "lessonplanunit"]

    # Language-Service Configuration
    language.graph_ids=["as","bn","en","gu","hi","hoc","jun","ka","mai","mr","unx","or","san","sat","ta","te","urd","pj"]

    # Redis Configuration
    redis.host="{{ .Values.sunbird_redis_host }}"
    redis.port=6379
    redis.maxConnections=128

    # Cassandra Configuration
    content.keyspace.name="{{ .Values.content_keyspace_name }}"
    hierarchy.keyspace.name="{{ .Values.hierarchy_keyspace_name }}"
    content.hierarchy.table="{{ .Values.content_hierarchy_table }}"
    framework.hierarchy.table="{{ .Values.framework_hierarchy_table }}"

    dialcode.keyspace.name="{{ .Values.dialcode_keyspace_name }}"
    dialcode.keyspace.table="{{ .Values.dialcode_keyspace_table}}"
    dialcode.max_count=1000

    system.config.keyspace.name="{{ .Values.dialcode_keyspace_name }}"
    system.config.table="{{ .Values.dialcode_keyspace_name }}"
    publisher.keyspace.name="{{ .Values.system_config_table }}"
    publisher.keyspace.table="{{ .Values.publisher_keyspace_table }}"

    #DIAL Code Generator Configuration
    dialcode.strip.chars="0"
    dialcode.length=6.0
    dialcode.large.prime_number=1679979167

    dialcode.es_conn_info="{{ .Values.es_connection }}"
    dialcode.search.limit=1000

    #DIAL Code ElasticSearch Configuration
    dialcode_store.dial_code.index=true
    dialcode_store.dial_code.object_type="DialCode"

    audit.es_conn_info="{{ .Values.es_connection }}"

    #Assessment Item Configuration 
    assessment.keyspace.name="{{ .Values.assessment_keyspace_name }}"
    assessment.keyspace.table="{{ .Values.assessment_keyspace_table }}"

    # Actor System Configuration
    LearningActorSystem {
      akka {
        actor {
          default-dispatcher {
              type = "Dispatcher"
            executor = "fork-join-executor"
            fork-join-executor {
                parallelism-min = 1
                parallelism-factor = 2.0
                parallelism-max = 4
            }
              # Throughput for default Dispatcher, set to 1 for as fair as possible
              throughput = 1
          }
          deployment {
            /HealthCheckManager
            {
              router = smallest-mailbox-pool
                      nr-of-instances = 5
            }
          }
        }
      }
    }

    env= ""

    #Current environment
    cloud_storage.env = "{{ .Values.cloud_storage_env }}"

    #Folder configuration
    cloud_storage.content.folder = "{{ .Values.cloud_storage_content_folder }}"
    cloud_storage.asset.folder = "{{ .Values.cloud_storage_asset_folder }}"
    cloud_storage.artefact.folder = "{{ .Values.cloud_storage_artefact_folder }}"
    cloud_storage.bundle.folder = "{{ .Values.cloud_storage_bundle_folder }}"
    cloud_storage.media.folder = "{{ .Values.cloud_storage_media_folder }}"
    cloud_storage.ecar.folder = "{{ .Values.cloud_storage_ecar_folder }}"
    cloud_storage.itemset.folder = "{{ .Values.cloud_storage_itemse_folder }}"

    cloud_storage.upload.url.ttl = 600


    # Media download configuration
    content.media.base.url="https://{{ .Values.domain}}"
    plugin.media.base.url="https://{{ .Values.domain}}"


    # Content Extraction Configuration

    #directory location where store unzip file
    dist.directory = "/data/tmp/dist/"
    output.zipfile = "/data/tmp/story.zip"
    source.folder  = "/data/tmp/temp2/"
    save.directory = "/data/tmp/temp/"

    # FOR CONTENT WORKFLOW PIPELINE (CWP)

    #--Content Workflow Pipeline Mode
    OPERATION_MODE = "TEST"

    #--Maximum Content Package File Size Limit in Bytes (50 MB)
    MAX_CONTENT_PACKAGE_FILE_SIZE_LIMIT = 52428800

    #--Maximum Asset File Size Limit in Bytes (20 MB - 20971520)
    MAX_ASSET_FILE_SIZE_LIMIT = 52428800

    #--No of Retry While File Download Fails
    RETRY_ASSET_DOWNLOAD_COUNT = 1

    # H5P Library Path
    content.h5p.library.path="learning_content_h5p_library_path"

    # ElasticSearch Configuration
    search.es_conn_info="{{ .Values.es_connection }}"
    search.fields.query=["name^100","title^100","lemma^100","code^100","domain","subject","description^10","keywords^100","ageGroup^10","filter^10","theme^10","genre^10","objects^25","contentType^100","language^200","teachingMode^25","skills^10","learningObjective^10","curriculum^100","gradeLevel^100","developer^100","attributions^10","identifier^100","IL_UNIQUE_ID^100","owner^50","board^100", "creator^100", "dialcodes^100","text","words","releaseNotes"]
    search.fields.date=["lastUpdatedOn","createdOn","versionDate","lastSubmittedOn","lastPublishedOn"]
    search.batch.size=500
    search.connection.timeout=30

    platform-api-url="http://localhost:8080/learning-service"

    # Language Index Configuration
    ignoreStartWordsList=["<Sentence","id=","<fs","head=","case_name=","paradigm=","name=","inf="]
    tagNamesList=["NN","NST","PRP","DEM","VM","VAUX","JJ","RB","PSP","RP","CC","WQ","QF","QC","QO","CL","INTF","INJ","NEG","*C","RDP","ECH","UNK","NP","VGF","VGNF","VGINF","VGNN","JJP","RBP","NEGP","CCP","FRAGP","BLK"]
    discardTokensList=["NNP","((","))","SYM"]
    attributesTagIdentifier=af
    specialCharRegEx="^([$&+,:;=?@#|!]*)$"
    numberRegEx="^([+-]?\\d*\\.?\\d*)$"
    defaultTokenCountAfterWord=10

    # Neo4j Graph Configuration
    graph.dir="/data/graphDB"
    akka.request_timeout=30
    environment.id="20000000"
    graph.passport.key.base="jd5ECm/o0BXwQCe8PfZY1NoUkB9HN41QjA80p22MKyRIcP5RW4qHw8sZztCzv87M"
    route.domain="bolt://{{ .Values.neo4j_domain_connection }}"
    route.bolt.write.domain="bolt://{{ .Values.neo4j_domain_connection }}"
    route.bolt.read.domain="bolt://{{ .Values.neo4j_domain_connection }}"
    route.all="bolt://{{ .Values.neo4j_all_connection }}"
    route.bolt.write.all="bolt://{{ .Values.neo4j_all_connection }}"
    route.bolt.read.all="bolt://{{ .Values.neo4j_all_connection }}"
    shard.id="1"
    platform.auth.check.enabled=false
    platform.cache.ttl=3600000
    platform.object.bookmark.expiry="15"

    language.map={"Hindi":"hi", "English":"en", "Telugu":"te", "Kannada":"ka", "Tamil":"ta", "Assamese":"as", "Bengali":"bn", "Bodo":"bo", "Gujarati":"gu", "Konkani":"ko", "Malayalam":"ml", "Marathi":"mr", "Nepali":"ne", "Odia":"or", "Punjabi":"pj", "Sanskrit":"san"}

    framework.max_term_creation_limit=200

    # Enable Suggested Framework in Get Channel API.
    channel.fetch.suggested_frameworks=true

    # Kafka configuration details
    kafka.topics.instruction="dock.learning.job.request"
    kafka.publish.request.topic="dock.publish.job.request"
    kafka.urls="{{ .Values.kafka_connection }}"
    kafka.topic.system.command="dock.system.command"
    job.request.event.mimetype=["application/pdf",
                                  "application/vnd.ekstep.ecml-archive",
                                  "application/vnd.ekstep.html-archive",
                                  "application/vnd.android.package-archive",
                                  "application/vnd.ekstep.content-archive",
                                  "application/epub",
                                  "application/msword",
                                  "application/vnd.ekstep.h5p-archive",
                                  "video/webm",
                                  "video/mp4",
                                  "application/vnd.ekstep.content-collection",
                                  "video/quicktime",
                                  "application/octet-stream",
                                  "application/json",
                                  "application/javascript",
                                  "application/xml",
                                  "text/plain",
                                  "text/html",
                                  "text/javascript",
                                  "text/xml",
                                  "text/css",
                                  "image/jpeg",
                                  "image/jpg",
                                  "image/png",
                                  "image/tiff",
                                  "image/bmp",
                                  "image/gif",
                                  "image/svg+xml",
                                  "image/x-quicktime",
                                  "video/avi",
                                  "video/mpeg",
                                  "video/quicktime",
                                  "video/3gpp",
                                  "video/mp4",
                                  "video/ogg",
                                  "video/webm",
                                  "video/msvideo",
                                  "video/x-msvideo",
                                  "video/x-qtc",
                                  "video/x-mpeg",
                                  "audio/mp3",
                                  "audio/mp4",
                                  "audio/mpeg",
                                  "audio/ogg",
                                  "audio/webm",
                                  "audio/x-wav",
                                  "audio/wav",
                                  "audio/mpeg3",
                                  "audio/x-mpeg-3",
                                  "audio/vorbis",
                                  "application/x-font-ttf",
                                  "application/vnd.ekstep.plugin-archive",
                                  "video/x-youtube",
                                  "video/youtube",
                                  "text/x-url"]

    #Youtube Standard Licence Validation
    learning.content.youtube.validate.license=true
    learning.content.youtube.application.name="fetch-youtube-license"
    learning_content_youtube_apikey=""

    #Telemetry pdata ID
    telemetry_env="dock"
    telemetry.pdata_id="dock.ekstep.learning.platform"
    telemetry.search.topn=5

    #Copy Content validation configuration
    learning.content.copy.invalid_status_list=["Flagged","FlagDraft","FlagReview","Retired", "Processing"]
    learning.content.copy.props_to_remove=["downloadUrl", "artifactUrl", "variants","createdOn", "collections", "children",
    "lastUpdatedOn", "SYS_INTERNAL_LAST_UPDATED_ON","versionKey", "s3Key", "status", "pkgVersion", "toc_url",
    "mimeTypesCount", "contentTypesCount", "leafNodesCount", "childNodes", "prevState", "lastPublishedOn", "flagReasons",
    "compatibilityLevel", "size", "publishChecklist", "publishComment", "lastPublishedBy", "rejectReasons", "rejectComment",
    "gradeLevel", "subject", "medium", "board", "topic", "purpose", "subtopic", "contentCredits", "owner",
    "collaborators", "creators", "contributors", "badgeAssertions", "dialcodes", "concepts", "keywords", "reservedDialcodes", "dialcodeRequired", "leafNodes"]

    # Metadata to be added to copied content from origin
    learning.content.copy.origin_data=["name", "author", "license", "organisation"]

    learning.content.type.not.copied.list=["Asset"]

    #Youtube License Validation Regex Pattern
    youtube.license.regex.pattern=["\\?vi?=([^&]*)", "watch\\?.*v=([^&]*)", "(?:embed|vi?)/([^/?]*)","^([A-Za-z0-9\\-\\_]*)"]

    #Cloud Storage details
    cloud_storage_type="azure"
    cloud_storage_key=""
    cloud_storage_secret=""
    cloud_storage_container=""

    installation.id="sunbird"

    # Configuration for DIALCode linking
    learning.content.link_dialcode_validation=true
    dialcode.api.search.url=" dial_service_search_url "
    dialcode.api.generate.url=" dial_service_generate_url "

    # Configuration for default channel ID
    channel.default="in.ekstep"

    learning.telemetry_ignored_props=["body","screenshots","stageIcons","editorState"]
    learning.telemetry_req_length=100

    learning.valid_license=["creativeCommon"]
    learning.service_provider=["youtube"]

    # Valid content type for dialcode reserve
    learning.reserve_dialcode.mimeType=["application/vnd.ekstep.content-collection"]

    # Max count to be reserved against a content
    learnig.reserve_dialcode.max_count=2500

    cassandra.lp.connection="{{ .Values.cassandra_connection }}"
    cassandra.lpa.connection="{{ .Values.cassandra_connection }}"

    compositesearch.index.name="compositesearch"

    #restrict.metadata.objectTypes="Content,ContentImage,AssessmentItem,Channel,Framework,Category,CategoryInstance,Term,Concept,Dimension,Domain"

    # Consistency Level for Multi Node Cassandra cluster
    cassandra.lp.consistency.level=QUORUM

    # Redis Cache Configuration
    content.cache.ttl=86400
    content.cache.read=true
    content.cache.hierarchy=true

    framework.categories_cached=["subject", "medium", "gradeLevel", "board"]
    framework.cache.ttl=86400
    framework.cache.read=true

    # Creative common license type
    content.license="CC BY 4.0"

    # Content Tagging Config
    content.tagging.backward_enable=true
    content.tagging.property="subject,medium"

    # Search Service Config
    kp.search_service.base_url="http://localhost/search"

    # CNAME migration variables

    cloudstorage {
      metadata.replace_absolute_path=true
      relative_path_prefix="{{ .Values.cloudstorage_relative_path_prefix_content }}"
      metadata.list="{{ .Values.cloudstorage_metadata_list }}"
      read_base_path="{{ .Values.cloud_storage_base_url }}"
      write_base_path="{{ .Values.cloud_storage_base_url }}"
    }
