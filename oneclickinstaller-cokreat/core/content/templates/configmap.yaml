apiVersion: v1
kind: ConfigMap
metadata:
  name: content-xml-config
  namespace: {{ .Release.Namespace }}
data:
  content-service_logback.xml: |
    <configuration>

      <conversionRule conversionWord="coloredLevel" converterClass="play.api.libs.logback.ColoredLevel" />

      <!-- transaction-event-trigger START -->
      <timestamp key="timestamp" datePattern="yyyy-MM-dd"/>
      <!-- common transactions logs -->
      <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
          <pattern>%d %msg%n</pattern>
        </encoder>
      </appender>

      <appender name="ASYNCSTDOUT" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="STDOUT" />
      </appender>


      <logger name="play" level="INFO" />
      <logger name="DefaultPlatformLogger" level="INFO" />
      <!-- Telemetry Loggers-->

      <root level="INFO">
        <appender-ref ref="ASYNCSTDOUT" />
      </root>

      <logger name="TelemetryEventLogger" level="INFO">
      <appender-ref ref="STDOUT" />
      </logger>

    </configuration>


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: content-config
  namespace: {{ .Values.api_namespace }}
data:
  content-service_application.conf: |
    # This is the main configuration file for the application.
    # https://www.playframework.com/documentation/latest/ConfigFile
    # ~~~~~
    # Play uses HOCON as its configuration file format. HOCON has a number
    # of advantages over other config formats, but there are two things that
    # can be used when modifying settings.
    #
    # You can include other configuration files in this main application.conf file:
    #include "extra-config.conf"
    #
    # You can declare variables and substitute for them:
    #mykey = ${some.value}
    #
    # And if an environment variable exists when there is no other substitution, then
    # HOCON will fall back to substituting environment variable:
    #mykey = ${JAVA_HOME}

    ## Akka
    # https://www.playframework.com/documentation/latest/ScalaAkka#Configuration
    # https://www.playframework.com/documentation/latest/JavaAkka#Configuration
    # ~~~~~
    # Play uses Akka internally and exposes Akka Streams and actors in Websockets and
    # other streaming HTTP responses.
    akka {
    # "akka.log-config-on-start" is extraordinarly useful because it log the complete
    # configuration at INFO level, including defaults and overrides, so it s worth
    # putting at the very top.
    #
    # Put the following in your conf/logback.xml file:
    #
    # <logger name="akka.actor" level="INFO" />
    #
    # And then uncomment this line to debug the configuration.
    #
    #log-config-on-start = true
    default-dispatcher {
        # This will be used if you have set "executor = "fork-join-executor""
        fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 8

        # The parallelism factor is used to determine thread pool size using the
        # following formula: ceil(available processors * factor). Resulting size
        # is then bounded by the parallelism-min and parallelism-max values.
        parallelism-factor = 32.0

        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 64

        # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
        # like peeking mode which "pop".
        task-peeking-mode = "FIFO"
        }
    }
    actors-dispatcher {
        type = "Dispatcher"
        executor = "fork-join-executor"
        fork-join-executor {
        parallelism-min = 8
        parallelism-factor = 32.0
        parallelism-max = 64
        }
        # Throughput for default Dispatcher, set to 1 for as fair as possible
        throughput = 1
    }
    actor {
        deployment {
        /contentActor
            {
            router = smallest-mailbox-pool
            nr-of-instances = 10
            dispatcher = actors-dispatcher
            }
        /channelActor
            {
            router = smallest-mailbox-pool
            nr-of-instances = 10
            dispatcher = actors-dispatcher
            }
        /collectionActor
            {
            router = smallest-mailbox-pool
            nr-of-instances = 10
            dispatcher = actors-dispatcher
            }
        /healthActor
            {
            router = smallest-mailbox-pool
            nr-of-instances = 5
            dispatcher = actors-dispatcher
            }
        /licenseActor
            {
            router = smallest-mailbox-pool
            nr-of-instances = 2
            dispatcher = actors-dispatcher
            }
        }
    }
    }

    ## Secret key
    # http://www.playframework.com/documentation/latest/ApplicationSecret
    # ~~~~~
    # The secret key is used to sign Play's session cookie.
    # This must be changed for production, but we don't recommend you change it in this file.
    play.http.secret.key="jd5ECm/o0BXwQCe8PfZY1NoUkB9HN41QjA80p22MKyRIcP5RW4qHw8sZztCzv87M"

    ## Modules
    # https://www.playframework.com/documentation/latest/Modules
    # ~~~~~
    # Control which modules are loaded when Play starts. Note that modules are
    # the replacement for "GlobalSettings", which are deprecated in 2.5.x.
    # Please see https://www.playframework.com/documentation/latest/GlobalSettings
    # for more information.
    #
    # You can also extend Play functionality by using one of the publically available
    # Play modules: https://playframework.com/documentation/latest/ModuleDirectory
    play.modules {
    # By default, Play will load any class called Module that is defined
    # in the root package (the "app" directory), or you can define them
    # explicitly below.
    # If there are any built-in modules that you want to enable, you can list them here.
    enabled += modules.ContentModule

    # If there are any built-in modules that you want to disable, you can list them here.
    #disabled += ""
    }

    ## IDE
    # https://www.playframework.com/documentation/latest/IDE
    # ~~~~~
    # Depending on your IDE, you can add a hyperlink for errors that will jump you
    # directly to the code location in the IDE in dev mode. The following line makes
    # use of the IntelliJ IDEA REST interface:
    #play.editor="http://localhost:63342/api/file/?file=%s&line=%s"

    ## Internationalisation
    # https://www.playframework.com/documentation/latest/JavaI18N
    # https://www.playframework.com/documentation/latest/ScalaI18N
    # ~~~~~
    # Play comes with its own i18n settings, which allow the user's preferred language
    # to map through to internal messages, or allow the language to be stored in a cookie.
    play.i18n {
    # The application languages
    langs = [ "en" ]

    # Whether the language cookie should be secure or not
    #langCookieSecure = true

    # Whether the HTTP only attribute of the cookie should be set to true
    #langCookieHttpOnly = true
    }

    ## Play HTTP settings
    # ~~~~~
    play.http {
    ## Router
    # https://www.playframework.com/documentation/latest/JavaRouting
    # https://www.playframework.com/documentation/latest/ScalaRouting
    # ~~~~~
    # Define the Router object to use for this application.
    # This router will be looked up first when the application is starting up,
    # so make sure this is the entry point.
    # Furthermore, it's assumed your route file is named properly.
    # So for an application router like `my.application.Router`,
    # you may need to define a router file `conf/my.application.routes`.
    # Default to Routes in the root package (aka "apps" folder) (and conf/routes)
    #router = my.application.Router

    ## Action Creator
    # https://www.playframework.com/documentation/latest/JavaActionCreator
    # ~~~~~
    #actionCreator = null

    ## ErrorHandler
    # https://www.playframework.com/documentation/latest/JavaRouting
    # https://www.playframework.com/documentation/latest/ScalaRouting
    # ~~~~~
    # If null, will attempt to load a class called ErrorHandler in the root package,
    #errorHandler = null

    ## Session & Flash
    # https://www.playframework.com/documentation/latest/JavaSessionFlash
    # https://www.playframework.com/documentation/latest/ScalaSessionFlash
    # ~~~~~
    session {
        # Sets the cookie to be sent only over HTTPS.
        #secure = true

        # Sets the cookie to be accessed only by the server.
        #httpOnly = true

        # Sets the max-age field of the cookie to 5 minutes.
        # NOTE: this only sets when the browser will discard the cookie. Play will consider any
        # cookie value with a valid signature to be a valid session forever. To implement a server side session timeout,
        # you need to put a timestamp in the session and check it at regular intervals to possibly expire it.
        #maxAge = 300

        # Sets the domain on the session cookie.
        #domain = "example.com"
    }

    flash {
        # Sets the cookie to be sent only over HTTPS.
        #secure = true

        # Sets the cookie to be accessed only by the server.
        #httpOnly = true
    }
    }

    play.server.http.idleTimeout = 60s
    play.http.parser.maxDiskBuffer = 100MB
    parsers.anyContent.maxLength = 100MB

    ## Netty Provider
    # https://www.playframework.com/documentation/latest/SettingsNetty
    # ~~~~~
    play.server.netty {
    # Whether the Netty wire should be logged
    log.wire = true

    # If you run Play on Linux, you can use Netty's native socket transport
    # for higher performance with less garbage.
    transport = "native"
    }

    ## WS (HTTP Client)
    # https://www.playframework.com/documentation/latest/ScalaWS#Configuring-WS
    # ~~~~~
    # The HTTP client primarily used for REST APIs. The default client can be
    # configured directly, but you can also create different client instances
    # with customized settings. You must enable this by adding to build.sbt:
    #
    # libraryDependencies += ws // or javaWs if using java
    #
    play.ws {
    # Sets HTTP requests not to follow 302 requests
    #followRedirects = false

    # Sets the maximum number of open HTTP connections for the client.
    #ahc.maxConnectionsTotal = 50

    ## WS SSL
    # https://www.playframework.com/documentation/latest/WsSSL
    # ~~~~~
    ssl {
            # Configuring HTTPS with Play WS does not require programming. You can
        # set up both trustManager and keyManager for mutual authentication, and
        # turn on JSSE debugging in development with a reload.
        #debug.handshake = true
        #trustManager = {
        #  stores = [
        #    { type = "JKS", path = "exampletrust.jks" }
        #  ]
        #}
    }
    }

    ## Cache
    # https://www.playframework.com/documentation/latest/JavaCache
    # https://www.playframework.com/documentation/latest/ScalaCache
    # ~~~~~
    # Play comes with an integrated cache API that can reduce the operational
    # overhead of repeated requests. You must enable this by adding to build.sbt:
    #
    # libraryDependencies += cache
    #
    play.cache {
    # If you want to bind several caches, you can bind the individually
    #bindCaches = ["db-cache", "user-cache", "session-cache"]
    }

    ## Filter Configuration
    # https://www.playframework.com/documentation/latest/Filters
    # ~~~~~
    # There are a number of built-in filters that can be enabled and configured
    # to give Play greater security.
    #
    play.filters {

    # Enabled filters are run automatically against Play.
    # CSRFFilter, AllowedHostFilters, and SecurityHeadersFilters are enabled by default.
    enabled = [filters.AccessLogFilter]

    # Disabled filters remove elements from the enabled list.
    # disabled += filters.CSRFFilter


    ## CORS filter configuration
    # https://www.playframework.com/documentation/latest/CorsFilter
    # ~~~~~
    # CORS is a protocol that allows web applications to make requests from the browser
    # across different domains.
    # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
    # dependencies on CORS settings.
    cors {
        # Filter paths by a whitelist of path prefixes
        #pathPrefixes = ["/some/path", ...]

        # The allowed origins. If null, all origins are allowed.
        #allowedOrigins = ["http://www.example.com"]

        # The allowed HTTP methods. If null, all methods are allowed
        #allowedHttpMethods = ["GET", "POST"]
    }

    ## Security headers filter configuration
    # https://www.playframework.com/documentation/latest/SecurityHeaders
    # ~~~~~
    # Defines security headers that prevent XSS attacks.
    # If enabled, then all options are set to the below configuration by default:
    headers {
        # The X-Frame-Options header. If null, the header is not set.
        #frameOptions = "DENY"

        # The X-XSS-Protection header. If null, the header is not set.
        #xssProtection = "1; mode=block"

        # The X-Content-Type-Options header. If null, the header is not set.
        #contentTypeOptions = "nosniff"

        # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
        #permittedCrossDomainPolicies = "master-only"

        # The Content-Security-Policy header. If null, the header is not set.
        #contentSecurityPolicy = "default-src 'self'"
    }

    ## Allowed hosts filter configuration
    # https://www.playframework.com/documentation/latest/AllowedHostsFilter
    # ~~~~~
    # Play provides a filter that lets you configure which hosts can access your application.
    # This is useful to prevent cache poisoning attacks.
    hosts {
        # Allow requests to example.com, its subdomains, and localhost:9000.
        #allowed = [".example.com", "localhost:9000"]
    }
    }

    play.http.parser.maxMemoryBuffer = 50MB
    akka.http.parsing.max-content-length = 50MB
    schema.base_path="https://sunbirddevbbpublic.blob.core.windows.net/sunbird-content-staging-knowlg/schemas/local"

    # Cassandra Configuration
    cassandra {
    lp {
            connection: "{{ .Values.sunbird_cassandra_host }}"
    }
    lpa {
            connection: "{{ .Values.sunbird_cassandra_host }}"
    }
    }

    # Consistency Level for Multi Node Cassandra cluster
    cassandra.lp.consistency.level=QUORUM

    collection {
        keyspace: "{{ .Values.collection_keyspace }}"
    cache.enable: true
    image.migration.enabled: true
    }

    content {
        keyspace: "{{ .Values.content_keyspace }}"
    cache {
        ttl: 86400
        enable: true
    }
    hierarchy {
        removed_props_for_leafNodes: ["collections", "children", "usedByContent", "item_sets", "methods", "libraries", "editorState"]
    }
    # Added for supporting backward compatibility - remove in release-2.7.0
    tagging {
        backward_enable: true
        property: "subject,medium"
    }
    h5p {
        library {
            path: "https://sunbirdpublic.blob.core.windows.net/installation/h5p-standalone-1.3.4.zip"
        }
    }
    copy {
        invalid_statusList: ["Flagged","FlaggedDraft","FraggedReview","Retired", "Processing"]
        origin_data: ["name", "author", "license", "organisation"]
        props_to_remove: ["downloadUrl", "artifactUrl", "variants", "createdOn", "collections", "children", "lastUpdatedOn", "SYS_INTERNAL_LAST_UPDATED_ON", "versionKey", "s3Key", "status", "pkgVersion", "toc_url", "mimeTypesCount", "contentTypesCount", "leafNodesCount", "childNodes", "prevState", "lastPublishedOn", "flagReasons", "compatibilityLevel", "size", "publishChecklist", "publishComment", "LastPublishedBy", "rejectReasons", "rejectComment", "gradeLevel", "subject", "medium", "board", "topic", "purpose", "subtopic", "contentCredits", "owner", "collaborators", "creators", "contributors", "badgeAssertions", "dialcodes", "concepts", "keywords", "reservedDialcodes", "dialcodeRequired", "leafNodes", "sYS_INTERNAL_LAST_UPDATED_ON", "prevStatus", "lastPublishedBy", "streamingUrl", "boardIds", "gradeLevelIds", "subjectIds", "mediumIds", "topicsIds", "targetFWIds", "targetBoardIds", "targetGradeLevelIds", "targetSubjectIds", "targetMediumIds", "targetTopicIds", "se_boards", "se_subjects", "se_mediums", "se_gradeLevels", "se_topics", "se_FWIds", "se_boardIds", "se_subjectIds", "se_mediumIds", "se_gradeLevelIds", "se_topicIds"]
    }
    media {
            base.url: "https://{{ .Values.domain}}"
    }
    }

    # Redis Configuration
    redis {
        host: "{{ .Values.sunbird_redis_host }}"
    port: 6379
    maxConnections: 128
    }


    #--Maximum Content Package File Size Limit in Bytes (2GGB)
    MAX_CONTENT_PACKAGE_FILE_SIZE_LIMIT=2000000000

    #--Maximum Asset File Size Limit in Bytes (150 MB)
    MAX_ASSET_FILE_SIZE_LIMIT=157286400

    #--No of Retry While File Download Fails
    RETRY_ASSET_DOWNLOAD_COUNT=1

    #Current environment - need this property post cloud-store implementation
    cloud_storage {
        env: {{ .Values.cloud_storage_env }}
        content.folder: "{{ .Values.cloud_storage_content_folder }}"
        asset.folder: "{{ .Values.cloud_storage_asset_folder }}"
        artefact.folder: "{{ .Values.cloud_storage_artefact_folder }}"
        bundle.folder: "{{ .Values.cloud_storage_bundle_folder }}"
        media.folder: "{{ .Values.cloud_storage_media_folder }}"
        ecar.folder: "{{ .Values.cloud_storage_ecar_folder }}"
        upload.url.ttl: "{{ .Values.cloud_storage_upload_url_ttl }}"
    }

    # Configuration
    akka.request_timeout: 30
    environment.id: 20000000
    graph {
    dir: "/data/graphDB"
    ids: ["domain"]
        passport.key.base: "jd5ECm/o0BXwQCe8PfZY1NoUkB9HN41QjA80p22MKyRIcP5RW4qHw8sZztCzv87M"
    }
    route {
        domain: "bolt://{{ .Values.learning_neo4j_bolt_url }}"
        all: "bolt://{{ .Values.language_neo4j_bolt_url }}"
    bolt {
        write {
                domain: "bolt://{{ .Values.learning_write_elb_url }}"
                all: "bolt://{{ .Values.language_neo4j_bolt_url }}"
        },
        read {
                domain: "bolt://{{ .Values.learning_read_elb_url }}"
                all: "bolt://{{ .Values.language_neo4j_bolt_url }}"
        }
    }
    }

    shard.id: 1
    platform {
    auth.check.enabled: false
    cache.ttl: 3600000
    language.codes: ["as","bn","en","gu","hi","hoc","jun","ka","mai","mr","unx","or","san","sat","ta","te","urd", "pj"]
    }

    #Top N Config for Search Telemetry
    telemetry_env: dev

    installation.id: ekstep

    channel {
    default: "in.ekstep"
    fetch.suggested_frameworks: true
    }

    languageCode {
    assamese : "as"
    bengali : "bn"
    english : "en"
    gujarati : "gu"
    hindi : "hi"
    kannada : "ka"
    marathi : "mr"
    odia : "or"
    tamil : "ta"
    telugu : "te"
    }
    composite {
    search {
            url : "http://search-service.dock.svc.cluster.local:9000/v3/search"
    }
    }

    cloud_storage_type: "{{ .Values.cloud_service_provider }}"
    cloud_storage_key: "{{ .Values.cloud_storage_key }}"
    cloud_storage_secret: "{{ .Values.cloud_storage_secret }}"
    cloud_storage_endpoint: ""
    cloud_storage_container: "{{ .Values.cloud_public_storage_container }}"

    # Google Drive APIKEY
    learning_content_drive_apiKey = ""

    #Youtube Standard Licence Validation
    learning.content.youtube.application.name=""
    learning_content_youtube_apikey=""
    youtube.license.regex.pattern=["\\?vi?=([^&]*)", "watch\\?.*v=([^&]*)", "(?:embed|vi?)/([^/?]*)","^([A-Za-z0-9\\-\\_]*)"]
    learning.valid_license=["creativeCommon"]

    kafka {
        urls : "{{ .Values.kafka_connection }}"
    topic.send.enable : true
        topics.instruction : "learning.job.request"
        publish.request.topic : "dev.publish.job.request"
    }

    # DIAL Link Config
    dial_service {
        api {
            base_url : "http://dial-service.dock.svc.cluster.local:9000"
            auth_key : ""
            search : "/dialcode/v3/search"
            generate : "/dialcode/v3/generate"
        }
    }

    reserve_dialcode {
        mimeType : ["application/vnd.ekstep.content-collection"]
        max_count : 250
    }

    content.link_dialcode.validation=true
    content.link_dialcode.max_limit=10


    # Content Import API Config
    import {
    request_size_limit : 300
    output_topic_name : "dock.auto.creation.job.request"
    required_props : ["name","code","mimeType","primaryCategory","artifactUrl","framework"]
    remove_props : ["downloadUrl","variants","previewUrl","streamingUrl","itemSets","level1Name","level1Concept","level2Name","level2Concept","level3Name","level3Concept","me_totalPlaySessionCount","me_totalTimeSpentInSec","me_totalSessionsCount","me_totalTimespent","me_totalInteractions","me_creationSessions","me_creationTimespent","me_averageInteractionsPerMin","me_averageSessionsPerDevice","me_totalDevices","me_averageTimespentPerSession","me_averageRating","me_totalDownloads","me_totalSideloads","me_totalRatings","me_totalComments","me_totalDialcode","me_totalDialcodeLinkedToContent","me_totalDialcodeAttached","me_hierarchyLevel","origin","originData","questions"]
    }

    contentTypeToPrimaryCategory {
    ClassroomTeachingVideo: "Explanation Content"
    ConceptMap: "Learning Resource"
    Course: "Course"
    CuriosityQuestionSet: "Practice Question Set"
    eTextBook: "eTextbook"
    ExperientialResource: "Learning Resource"
    ExplanationResource: "Explanation Content"
    ExplanationVideo: "Explanation Content"
    FocusSpot: "Teacher Resource"
    LearningOutcomeDefinition: "Teacher Resource"
    MarkingSchemeRubric: "Teacher Resource"
    PedagogyFlow: "Teacher Resource"
    PracticeQuestionSet: "Practice Question Set"
    PracticeResource: "Practice Question Set"
    SelfAssess: "Course Assessment"
    TeachingMethod: "Teacher Resource"
    TextBook: "Digital Textbook"
    Collection: "Content Playlist"
    ExplanationReadingMaterial: "Learning Resource"
    LearningActivity: "Learning Resource"
    LessonPlan: "Content Playlist"
    LessonPlanResource: "Teacher Resource"
    PreviousBoardExamPapers: "Learning Resource"
    TVLesson: "Explanation Content"
    OnboardingResource: "Learning Resource"
    ReadingMaterial: "Learning Resource"
    Template: "Template"
    Asset: "Asset"
    Plugin: "Plugin"
    LessonPlanUnit: "Lesson Plan Unit"
    CourseUnit: "Course Unit"
    TextBookUnit: "Textbook Unit"
    }

    resourceTypeToPrimaryCategory {
    Learn: "Learning Resource"
    Read: "Learning Resource"
    Practice: "Learning Resource"
    Teach: "Teacher Resource"
    Test: "Learning Resource"
    Experiment: "Learning Resource"
    LessonPlan: "Teacher Resource"
    }

    mimeTypeToPrimaryCategory {
    "application/vnd.ekstep.h5p-archive": ["Learning Resource"]
    "application/vnd.ekstep.html-archive": ["Learning Resource"]
    "application/vnd.android.package-archive": ["Learning Resource"]
    "video/webm": ["Explanation Content"]
    "video/x-youtube": ["Explanation Content"]
    "video/mp4": ["Explanation Content"]
    "application/pdf": ["Learning Resource", "Teacher Resource"]
    "application/epub": ["Learning Resource", "Teacher Resource"]
    "application/vnd.ekstep.ecml-archive": ["Learning Resource", "Teacher Resource"]
    "text/x-url": ["Learnin Resource", "Teacher Resource"]
    }

    #Default objectCategory mapping for channel
    channel.content.primarycategories=["Explanation Content", "Learning Resource", "Practice Question Set", "eTextbook", "Teacher Resource", "Course Assessment","Exam Question"]
    channel.collection.primarycategories=["Course", "Digital Textbook", "Content Playlist", "Question paper"]
    channel.asset.primarycategories=["Asset"]

    # Need to depreacte 
    #Collection CSV
    sunbird_dialcode_search_api="http://dial-service.dock.svc.cluster.local:9000/dialcode/v3/list"
    framework_read_api_url="http://learning-serviceock.svc.cluster.local:8080/learning-service/framework/v3/read"
    sunbird_link_dial_code_api="http://content-service.dock.svc.cluster.local:9000/collection/v4/dialcode/link"

    # Need to depreacte 
    collection {
        csv {
            maxRows = 6500
            allowedContentTypes = ["TextBook","Collection","Course"]
            maxFirstLevelUnits=30
            ttl = 86400
            maxUnitFieldLength=120
            maxDescFieldLength=1500
            contentTypeToUnitType = {"TextBook": "TextBookUnit", "Course": "CourseUnit", "Collection":"Collection"}
            headers {
                folderIdentifier = ["Folder Identifier"]
                hierarchy = ["Level 1 Folder","Level 2 Folder","Level 3 Folder","Level 4 Folder"]
                QR = ["QR Code Required?","QR Code"]
                topics = ["Mapped Topics"]
                collectionName = ["Collection Name"]
                linkedContents = ["Linked Content 1","Linked Content 2","Linked Content 3","Linked Content 4","Linked Content 5","Linked Content 6","Linked Content 7","Linked Content 8","Linked Content 9","Linked Content 10","Linked Content 11","Linked Content 12","Linked Content 13","Linked Content 14","Linked Content 15","Linked Content 16","Linked Content 17","Linked Content 18","Linked Content 19","Linked Content 20","Linked Content 21","Linked Content 22","Linked Content 23","Linked Content 24","Linked Content 25","Linked Content 26","Linked Content 27","Linked Content 28","Linked Content 29","Linked Content 30"]
                output = ["Collection Name","Folder Identifier","Level 1 Folder","Level 2 Folder","Level 3 Folder","Level 4 Folder","Description","Mapped Topics","Keywords","QR Code Required?","QR Code","Linked Content 1","Linked Content 2","Linked Content 3","Linked Content 4","Linked Content 5","Linked Content 6","Linked Content 7","Linked Content 8","Linked Content 9","Linked Content 10","Linked Content 11","Linked Content 12","Linked Content 13","Linked Content 14","Linked Content 15","Linked Content 16","Linked Content 17","Linked Content 18","Linked Content 19","Linked Content 20","Linked Content 21","Linked Content 22","Linked Content 23","Linked Content 24","Linked Content 25","Linked Content 26","Linked Content 27","Linked Content 28","Linked Content 29","Linked Content 30"]
                sequence {
                    create = {"Level 1 Folder":0,"Level 2 Folder":1,"Level 3 Folder":2,"Level 4 Folder":3,"Description":4}
                    update = {"Collection Name":0,"Folder Identifier":1,"Level 1 Folder":2,"Level 2 Folder":3,"Level 3 Folder":4,"Level 4 Folder":5,"Description":6,"Mapped Topics":7,"Keywords":8,"QR Code Required?":9,"QR Code":10,"Linked Content 1":11,"Linked Content 2":12,"Linked Content 3":13,"Linked Content 4":14,"Linked Content 5":15,"Linked Content 6":16,"Linked Content 7":17,"Linked Content 8":18,"Linked Content 9":19,"Linked Content 10":20,"Linked Content 11":21,"Linked Content 12":22,"Linked Content 13":23,"Linked Content 14":24,"Linked Content 15":25,"Linked Content 16":26,"Linked Content 17":27,"Linked Content 18":28,"Linked Content 19":29,"Linked Content 20":30,"Linked Content 21":31,"Linked Content 22":32,"Linked Content 23":33,"Linked Content 24":34,"Linked Content 25":35,"Linked Content 26":36,"Linked Content 27":37,"Linked Content 28":38,"Linked Content 29":39,"Linked Content 30":40}
                    linkedContents = {"Linked Content 1":0,"Linked Content 2":1,"Linked Content 3":2,"Linked Content 4":3,"Linked Content 5":4,"Linked Content 6":5,"Linked Content 7":6,"Linked Content 8":7,"Linked Content 9":8,"Linked Content 10":9,"Linked Content 11":10,"Linked Content 12":11,"Linked Content 13":12,"Linked Content 14":13,"Linked Content 15":14,"Linked Content 16":15,"Linked Content 17":16,"Linked Content 18":17,"Linked Content 19":18,"Linked Content 20":19,"Linked Content 21":20,"Linked Content 22":21,"Linked Content 23":22,"Linked Content 24":23,"Linked Content 25":24,"Linked Content 26":25,"Linked Content 27":26,"Linked Content 28":27,"Linked Content 29":28,"Linked Content 30":29}
                }
            }
            mandatory {
                create = ["Level 1 Folder"]
                update = ["Collection Name","Folder Identifier"]
            }
        }
    }

    # Framework master category validation
    master.category.validation.enabled="Yes"

    plugin.media.base.url= "https://{{ .Values.domain}}"

    cloudstorage {
        metadata.replace_absolute_path=true
        relative_path_prefix=CONTENT_STORAGE_BASE_PATH
        metadata.list=["appIcon", "artifactUrl", "posterImage", "previewUrl", "thumbnail", "assetsMap", "certTemplate", "itemSetPreviewUrl", "grayScaleAppIcon", "sourceURL", "variants", "downloadUrl", "streamingUrl", "toc_url", "data", "question", "solutions", "editorState", "media", "pdfUrl", "transcripts"]
        read_base_path="https://{{ .Values.cloud_storage_key }}.blob.core.windows.net"  
        write_base_path=["https://{{ .Values.cloud_storage_key }}.blob.core.windows.net","https://{{ .Values.cloud_storage_key }}.blob.core.windows.net"]
    } 