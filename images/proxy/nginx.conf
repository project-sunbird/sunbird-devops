user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  10000;
}


http {
    include       /etc/nginx/mime.types;
    # Don't need complete openresty
    lua_load_resty_core off;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] '
                      '"$request" $status $body_bytes_sent '
                      '$request_time $upstream_response_time $pipe'
                      '"$http_referer" "$http_user_agent"';

    access_log  /var/log/nginx/access.log  main;

    # Shared dictionary to store metrics
    lua_shared_dict prometheus_metrics 100M;
    lua_package_path "/etc/nginx/lua_modules/?.lua";

    # Defining upstream cache status for nginx metrics
    map $upstream_cache_status $cache_status {
      default  $upstream_cache_status;
      ''       "NONE";
    }

    # Defining metrics
    init_worker_by_lua_block {
      prometheus = require("prometheus").init("prometheus_metrics")
      metric_requests = prometheus:counter(
          "nginx_http_requests_total", "Number of HTTP requests", {"host", "status", "request_method", "cache_status"})
      metric_latency = prometheus:histogram(
        "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
      metric_connections = prometheus:gauge(
        "nginx_http_connections", "Number of HTTP connections", {"state"})
    }
    log_by_lua_block {
        metric_requests:inc(1, {ngx.var.server_name, ngx.var.status, ngx.var.request_method, ngx.var.cache_status })
      metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
    }

    # local caching for images and files
    proxy_cache_path /tmp/proxy_cache levels=1:2 keys_zone=proxy_cache:5m max_size=10m inactive=60m use_temp_path=off;

    # cache framework
    proxy_cache_path /tmp/framework_cache levels=1:2 keys_zone=framework_cache:5m max_size=700m inactive=60m use_temp_path=off;


    header_filter_by_lua_block {
     ngx.header["server"] = nil
    }

    sendfile        on;
    #tcp_nopush     on;
    client_max_body_size 60M;

    keepalive_timeout  65s;
    keepalive_requests 200;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;

   server {
     listen 9145;
     location /metrics {
       content_by_lua_block {
          metric_connections:set(ngx.var.connections_reading, {"reading"})
          metric_connections:set(ngx.var.connections_waiting, {"waiting"})
          metric_connections:set(ngx.var.connections_writing, {"writing"})
          prometheus:collect()
        }
     }
   }
}
