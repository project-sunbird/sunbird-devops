<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@2.36">
  <actions>
    <hudson.model.ParametersAction>
      <safeParameters class="sorted-set"/>
      <parameters>
        <hudson.model.StringParameterValue>
          <name>github_release_tag</name>
          <description>&lt;font color=red size=2&gt;&lt;b&gt;CAUTION: If the value is blank, latest code will be built. Specify github tag name to build from a tag.&lt;/b&gt;&lt;/font&gt;</description>
          <value>release-2.8.0</value>
        </hudson.model.StringParameterValue>
      </parameters>
      <parameterDefinitionNames>
        <string>github_release_tag</string>
      </parameterDefinitionNames>
    </hudson.model.ParametersAction>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>badal</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <hudson.plugins.git.util.BuildData plugin="git@4.0.0">
      <buildsByBranchName>
        <entry>
          <string>origin/release-2.8.0</string>
          <hudson.plugins.git.util.Build>
            <marked plugin="git-client@3.0.0">
              <sha1>bcb7387ef81e65f8aec6f0ff12ec47f10b174cd5</sha1>
              <branches class="list">
                <hudson.plugins.git.Branch>
                  <sha1 reference="../../../sha1"/>
                  <name>origin/release-2.8.0</name>
                </hudson.plugins.git.Branch>
              </branches>
            </marked>
            <revision reference="../marked"/>
            <hudsonBuildNumber>1</hudsonBuildNumber>
          </hudson.plugins.git.util.Build>
        </entry>
      </buildsByBranchName>
      <lastBuild reference="../buildsByBranchName/entry/hudson.plugins.git.util.Build"/>
      <remoteUrls>
        <string>https://github.com/project-sunbird/sunbird-content-editor.git</string>
      </remoteUrls>
    </hudson.plugins.git.util.BuildData>
    <hudson.plugins.git.GitTagAction plugin="git@4.0.0">
      <tags class="hudson.util.CopyOnWriteMap$Tree">
        <entry>
          <string>origin/release-2.8.0</string>
          <list/>
        </entry>
      </tags>
      <ws>/var/lib/jenkins/workspace/Build/Plugins/ContentEditor@script</ws>
    </hudson.plugins.git.GitTagAction>
    <org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState plugin="workflow-scm-step@2.9">
      <revisionStates>
        <entry>
          <string>git https://github.com/project-sunbird/sunbird-content-editor.git</string>
          <hudson.scm.SCMRevisionState_-None/>
        </entry>
      </revisionStates>
    </org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="workflow-cps-global-lib@2.15">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <hudson.plugins.ansicolor.ColorizedAction plugin="ansicolor@0.6.2">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.ColorizedAction>
    <hudson.plugins.git.util.BuildData plugin="git@4.0.0">
      <buildsByBranchName>
        <entry>
          <string>refs/tags/release-2.8.0</string>
          <hudson.plugins.git.util.Build>
            <marked plugin="git-client@3.0.0">
              <sha1>cb138f910deb203d8b3a1a3ff60f9ea468159d75</sha1>
              <branches class="list">
                <hudson.plugins.git.Branch>
                  <sha1 reference="../../../sha1"/>
                  <name>refs/tags/release-2.8.0</name>
                </hudson.plugins.git.Branch>
              </branches>
            </marked>
            <revision reference="../marked"/>
            <hudsonBuildNumber>1</hudsonBuildNumber>
          </hudson.plugins.git.util.Build>
        </entry>
      </buildsByBranchName>
      <lastBuild reference="../buildsByBranchName/entry/hudson.plugins.git.util.Build"/>
      <remoteUrls>
        <string>https://github.com/project-sunbird/sunbird-content-editor.git</string>
      </remoteUrls>
      <index>2</index>
    </hudson.plugins.git.util.BuildData>
    <org.jenkinsci.plugins.workflow.cps.EnvActionImpl plugin="workflow-cps@2.75">
      <env class="tree-map"/>
    </org.jenkinsci.plugins.workflow.cps.EnvActionImpl>
    <com.sonyericsson.rebuild.RebuildAction plugin="rebuild@1.31"/>
  </actions>
  <queueId>256</queueId>
  <timestamp>1587184319192</timestamp>
  <startTime>1587184319205</startTime>
  <result>SUCCESS</result>
  <description>release-2.8.0</description>
  <duration>974918</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>SUCCESS</result>
    <script>node() {
    try {
        String ANSI_GREEN = &quot;\u001B[32m&quot;
        String ANSI_NORMAL = &quot;\u001B[0m&quot;
        String ANSI_BOLD = &quot;\u001B[1m&quot;
        String ANSI_RED = &quot;\u001B[31m&quot;
        String ANSI_YELLOW = &quot;\u001B[33m&quot;

        ansiColor(&apos;xterm&apos;) {
            stage(&apos;Checkout&apos;) {
                cleanWs()
                if (params.github_release_tag == &quot;&quot;) {
                    checkout scm
                    commit_hash = sh(script: &apos;git rev-parse --short HEAD&apos;, returnStdout: true).trim()
                    branch_name = sh(script: &apos;git name-rev --name-only HEAD | rev | cut -d &quot;/&quot; -f1| rev&apos;, returnStdout: true).trim()
                    artifact_version = branch_name + &quot;_&quot; + commit_hash
                    println(ANSI_BOLD + ANSI_YELLOW + &quot;github_release_tag not specified, using the latest commit hash: &quot; + commit_hash + ANSI_NORMAL)
                    sh &quot;git clone https://github.com/project-sunbird/sunbird-content-plugins.git plugins&quot;
                    sh &quot;cd plugins &amp;&amp; git checkout origin/${branch_name} -b ${branch_name}&quot;
                } else {
                    def scmVars = checkout scm
                    checkout scm: [$class: &apos;GitSCM&apos;, branches: [[name: &quot;refs/tags/${params.github_release_tag}&quot;]], userRemoteConfigs: [[url: scmVars.GIT_URL]]]
                    artifact_version = params.github_release_tag
                    commit_hash = sh(script: &apos;git rev-parse --short HEAD&apos;, returnStdout: true).trim()
                    branch_name = params.github_release_tag.split(&apos;_&apos;)[0]
                    println(ANSI_BOLD + ANSI_YELLOW + &quot;github_release_tag specified, building from github_release_tag: &quot; + params.github_release_tag + ANSI_NORMAL)
                    sh &quot;git clone https://github.com/project-sunbird/sunbird-content-plugins.git plugins&quot;
                    sh &quot;&quot;&quot;
                        cd plugins
                        checkout_tag=\$(git ls-remote --tags origin $branch_name* | grep -o &quot;$branch_name.*&quot; | sort -V | tail -n1)
                        git checkout tags/\${checkout_tag} -b \${checkout_tag}
                        
                    &quot;&quot;&quot;
                }
                echo &quot;artifact_version: &quot; + artifact_version

                stage(&apos;Build&apos;) {
                    sh &quot;&quot;&quot;
                        export framework_version_number=${branch_name}
                        export editorType=&quot;contentEditor&quot;
                        export editor_version_number=${branch_name}
                        export build_number=${commit_hash}
                        export CHROME_BIN=google-chrome
                        rm -rf ansible/content-editor.zip
                        rm -rf content-editor
                        node -v
                        npm install
                        cd app
                        bower cache clean
                        bower prune -f 
                        bower install --force -V
                        cd ..
                        #grunt compress
                        #zip -r ce-docs.zip docs
                        gulp packageCorePlugins
                        #npm install 
                        npm run build-plugins
                        #cd ..
                        npm run build
                        #npm run test
                    &quot;&quot;&quot;
                }
                
                //stage(&apos;Publish_test_results&apos;) {
               //cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: &apos;coverage/PhantomJS*/cobertura-coverage.xml&apos;, conditionalCoverageTargets: &apos;70, 0, 0&apos;, failUnhealthy: false, failUnstable: false, lineCoverageTargets: &apos;80, 0, 0&apos;, maxNumberOfBuilds: 0, methodCoverageTargets: &apos;80, 0, 0&apos;, onlyStable: false, sourceEncoding: &apos;ASCII&apos;, zoomCoverageChart: false 
            //}
                
                stage(&apos;ArchiveArtifacts&apos;) {
                    sh &quot;&quot;&quot;
                        mkdir content-editor-artifacts
                        cp content-editor.zip content-editor-artifacts
                        zip -j  content-editor-artifacts.zip:${artifact_version}  content-editor-artifacts/*                      
                    &quot;&quot;&quot;
                    archiveArtifacts &quot;content-editor-artifacts.zip:${artifact_version}&quot;
                    sh &quot;&quot;&quot;echo {\\&quot;artifact_name\\&quot; : \\&quot;content-editor-artifacts.zip\\&quot;, \\&quot;artifact_version\\&quot; : \\&quot;${artifact_version}\\&quot;, \\&quot;node_name\\&quot; : \\&quot;${env.NODE_NAME}\\&quot;} &gt; metadata.json&quot;&quot;&quot;
                    archiveArtifacts artifacts: &apos;metadata.json&apos;, onlyIfSuccessful: true
                    currentBuild.description = &quot;${artifact_version}&quot;
                }
            }
        }
    }
    catch (err) {
        currentBuild.result = &quot;FAILURE&quot;
        throw err
    }

}
</script>
    <loadedScripts class="map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>1053935993</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>28909702</long>
      </entry>
      <entry>
        <string>run</string>
        <long>4853838323</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>48802529</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>3363512198</long>
      </entry>
    </timings>
    <sandbox>true</sandbox>
    <iota>36</iota>
    <head>1:36</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList">
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" plugin="git@4.0.0">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <url>https://github.com/project-sunbird/sunbird-content-editor.git</url>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches>
          <hudson.plugins.git.BranchSpec>
            <name>${github_release_tag}</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="list"/>
        <extensions>
          <hudson.plugins.git.extensions.impl.CloneOption>
            <shallow>true</shallow>
            <noTags>false</noTags>
            <reference></reference>
            <depth>0</depth>
            <honorRefspec>false</honorRefspec>
          </hudson.plugins.git.extensions.impl.CloneOption>
        </extensions>
      </scm>
      <node></node>
      <workspace>/var/lib/jenkins/workspace/Build/Plugins/ContentEditor@script</workspace>
      <changelogFile>/var/lib/jenkins/jobs/Build/jobs/Plugins/jobs/ContentEditor/builds/1/changelog916029918361768161.xml</changelogFile>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" reference="../../org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout/scm"/>
      <node></node>
      <workspace>/var/lib/jenkins/workspace/Build/Plugins/ContentEditor</workspace>
      <changelogFile>/var/lib/jenkins/jobs/Build/jobs/Plugins/jobs/ContentEditor/builds/1/changelog3810203632245731597.xml</changelogFile>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" plugin="git@4.0.0">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <url>https://github.com/project-sunbird/sunbird-content-editor.git</url>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches>
          <hudson.plugins.git.BranchSpec>
            <name>refs/tags/release-2.8.0</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="list"/>
        <extensions/>
      </scm>
      <node></node>
      <workspace>/var/lib/jenkins/workspace/Build/Plugins/ContentEditor</workspace>
      <changelogFile>/var/lib/jenkins/jobs/Build/jobs/Plugins/jobs/ContentEditor/builds/1/changelog7795425307234886602.xml</changelogFile>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
  </checkouts>
</flow-build>