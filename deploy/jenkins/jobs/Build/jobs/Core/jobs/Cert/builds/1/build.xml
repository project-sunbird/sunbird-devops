<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@2.36">
  <actions>
    <hudson.model.ParametersAction>
      <safeParameters class="sorted-set"/>
      <parameters>
        <hudson.model.StringParameterValue>
          <name>github_release_tag</name>
          <description>&lt;font color=blue size=2&gt;&lt;b&gt;CAUTION: If the value is blank, latest code will be built. Specify github tag name to build from a tag.&lt;/b&gt;&lt;/font&gt;</description>
          <value>release-1.1.1</value>
        </hudson.model.StringParameterValue>
      </parameters>
      <parameterDefinitionNames>
        <string>github_release_tag</string>
      </parameterDefinitionNames>
    </hudson.model.ParametersAction>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>badal</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <hudson.plugins.git.util.BuildData plugin="git@4.0.0">
      <buildsByBranchName>
        <entry>
          <string>release-1.1.1</string>
          <hudson.plugins.git.util.Build>
            <marked plugin="git-client@3.0.0">
              <sha1>21468dba8027d055d2f4ef70a440ed07cc081fce</sha1>
              <branches class="list">
                <hudson.plugins.git.Branch>
                  <sha1 reference="../../../sha1"/>
                  <name>release-1.1.1</name>
                </hudson.plugins.git.Branch>
              </branches>
            </marked>
            <revision reference="../marked"/>
            <hudsonBuildNumber>1</hudsonBuildNumber>
          </hudson.plugins.git.util.Build>
        </entry>
      </buildsByBranchName>
      <lastBuild reference="../buildsByBranchName/entry/hudson.plugins.git.util.Build"/>
      <remoteUrls>
        <string>https://github.com/project-sunbird/cert-service.git</string>
      </remoteUrls>
    </hudson.plugins.git.util.BuildData>
    <hudson.plugins.git.GitTagAction plugin="git@4.0.0">
      <tags class="hudson.util.CopyOnWriteMap$Tree">
        <entry>
          <string>release-1.1.1</string>
          <list/>
        </entry>
      </tags>
      <ws>/var/lib/jenkins/workspace/Build/Core/Cert@script</ws>
    </hudson.plugins.git.GitTagAction>
    <org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState plugin="workflow-scm-step@2.9">
      <revisionStates>
        <entry>
          <string>git https://github.com/project-sunbird/cert-service.git</string>
          <hudson.scm.SCMRevisionState_-None/>
        </entry>
      </revisionStates>
    </org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="workflow-cps-global-lib@2.15">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <hudson.plugins.ansicolor.ColorizedAction plugin="ansicolor@0.6.2">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.ColorizedAction>
    <org.jenkinsci.plugins.workflow.cps.EnvActionImpl plugin="workflow-cps@2.75">
      <env class="tree-map">
        <entry>
          <string>NODE_ENV</string>
          <string>build</string>
        </entry>
      </env>
    </org.jenkinsci.plugins.workflow.cps.EnvActionImpl>
    <com.sonyericsson.rebuild.RebuildAction plugin="rebuild@1.31"/>
  </actions>
  <queueId>70</queueId>
  <timestamp>1587128936208</timestamp>
  <startTime>1587128936216</startTime>
  <result>SUCCESS</result>
  <description>release-1.1.1</description>
  <duration>432517</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>SUCCESS</result>
    <script>node(&apos;build-slave&apos;) {
    try {
        String ANSI_GREEN = &quot;\u001B[32m&quot;
        String ANSI_NORMAL = &quot;\u001B[0m&quot;
        String ANSI_BOLD = &quot;\u001B[1m&quot;
        String ANSI_RED = &quot;\u001B[31m&quot;
        String ANSI_YELLOW = &quot;\u001B[33m&quot;

        ansiColor(&apos;xterm&apos;) {
            stage(&apos;Checkout&apos;) {
                if (!env.hub_org) {
                    println(ANSI_BOLD + ANSI_RED + &quot;Uh Oh! Please set a Jenkins environment variable named hub_org with value as registery/sunbidrded&quot; + ANSI_NORMAL)
                    error &apos;Please resolve the errors and rerun..&apos;
                } else
                    println(ANSI_BOLD + ANSI_GREEN + &quot;Found environment variable named hub_org with value as: &quot; + hub_org + ANSI_NORMAL)
            }
            cleanWs()
            if (params.github_release_tag == &quot;&quot;) {
                checkout scm
                commit_hash = sh(script: &apos;git rev-parse --short HEAD&apos;, returnStdout: true).trim()
                branch_name = sh(script: &apos;git name-rev --name-only HEAD | rev | cut -d &quot;/&quot; -f1| rev&apos;, returnStdout: true).trim()
                build_tag = branch_name + &quot;_&quot; + commit_hash
                println(ANSI_BOLD + ANSI_YELLOW + &quot;github_release_tag not specified, using the latest commit hash: &quot; + commit_hash + ANSI_NORMAL)
            } else {
                def scmVars = checkout scm
                checkout scm: [$class: &apos;GitSCM&apos;, branches: [[name: &quot;refs/tags/$params.github_release_tag&quot;]], userRemoteConfigs: [[url: scmVars.GIT_URL]]]
                build_tag = params.github_release_tag
                println(ANSI_BOLD + ANSI_YELLOW + &quot;github_release_tag specified, building from tag: &quot; + params.github_release_tag + ANSI_NORMAL)
            }
            echo &quot;build_tag: &quot; + build_tag

            stage(&apos;Build&apos;) {
		        currentDir = sh(returnStdout: true, script: &apos;pwd&apos;).trim()
                env.NODE_ENV = &quot;build&quot;
                print &quot;Environment will be : ${env.NODE_ENV}&quot;
                sh &apos;git log -1&apos;
	
		        sh &quot;cd $currentDir&quot;
		        // Build the dependencies for sunbird user-org service
                sh &apos;mvn clean install -DskipTests&apos;
            }

            stage(&apos;Package&apos;) {
		        // Create a deployment package
                dir(&apos;service&apos;) {
                    sh &apos;mvn play2:dist&apos;
		            sh &apos;cp target/cert-service-1.0.0-dist.zip ../&apos;
                }
                sh(&apos;chmod 777 ./build.sh&apos;)
                sh(&quot;./build.sh ${build_tag} ${env.NODE_NAME} ${hub_org}&quot;)
            }

            stage(&apos;ArchiveArtifacts&apos;) {
                archiveArtifacts &quot;metadata.json&quot;
                currentBuild.description = &quot;${build_tag}&quot;
            }
        }
    }
    catch (err) {
        currentBuild.result = &quot;FAILURE&quot;
        throw err
    }
}
</script>
    <loadedScripts class="map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>1014176074</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>509501526</long>
      </entry>
      <entry>
        <string>run</string>
        <long>12633423013</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>300402385</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>9203058975</long>
      </entry>
    </timings>
    <sandbox>true</sandbox>
    <iota>47</iota>
    <head>1:47</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList">
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" plugin="git@4.0.0">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <url>https://github.com/project-sunbird/cert-service.git</url>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches>
          <hudson.plugins.git.BranchSpec>
            <name>${github_release_tag}</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="list"/>
        <extensions>
          <hudson.plugins.git.extensions.impl.CloneOption>
            <shallow>true</shallow>
            <noTags>false</noTags>
            <reference></reference>
            <depth>0</depth>
            <honorRefspec>false</honorRefspec>
          </hudson.plugins.git.extensions.impl.CloneOption>
        </extensions>
      </scm>
      <node></node>
      <workspace>/var/lib/jenkins/workspace/Build/Core/Cert@script</workspace>
      <changelogFile>/var/lib/jenkins/jobs/Build/jobs/Core/jobs/Cert/builds/1/changelog8352380203388248908.xml</changelogFile>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" reference="../../org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout/scm"/>
      <node></node>
      <workspace>/var/lib/jenkins/workspace/Build/Core/Cert</workspace>
      <changelogFile>/var/lib/jenkins/jobs/Build/jobs/Core/jobs/Cert/builds/1/changelog4920217124556817073.xml</changelogFile>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" plugin="git@4.0.0">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <url>https://github.com/project-sunbird/cert-service.git</url>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches>
          <hudson.plugins.git.BranchSpec>
            <name>refs/tags/release-1.1.1</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="list"/>
        <extensions/>
      </scm>
      <node></node>
      <workspace>/var/lib/jenkins/workspace/Build/Core/Cert</workspace>
      <changelogFile>/var/lib/jenkins/jobs/Build/jobs/Core/jobs/Cert/builds/1/changelog33516619460012401.xml</changelogFile>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
  </checkouts>
</flow-build>