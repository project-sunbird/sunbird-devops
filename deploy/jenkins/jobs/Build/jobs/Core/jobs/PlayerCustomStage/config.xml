<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@2.38">
  <actions/>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.31">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.2">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.80">
    <script>node(){
ansiColor('xterm') {
  String ANSI_GREEN = "\u001B[32m"
  String ANSI_NORMAL = "\u001B[0m"
  String ANSI_BOLD = "\u001B[1m"
  String ANSI_RED = "\u001B[31m"
  String ANSI_YELLOW = "\u001B[33m"
  buildNumber = params.build_number
  try {
    copyArtifacts projectName: params.absolute_job_path, fingerprintArtifacts: true, flatten: true, selector: specific(buildNumber)
  }
  catch (err) {
    println ANSI_YELLOW + ANSI_BOLD + "Ok that failed!. Lets try an alertnative.." + ANSI_NORMAL
    copyArtifacts projectName: params.absolute_job_path, flatten: true, selector: upstream()
  }
  stage('ArchiveArtifacts') {
    archiveArtifacts "metadata.json"
    currentWs = sh(returnStdout: true, script: 'pwd').trim()
    image_tag = sh(returnStdout: true, script: 'jq -r .image_tag metadata.json').trim()
    agent = sh(returnStdout: true, script: 'jq -r .node_name metadata.json').trim()
    image_name = sh(returnStdout: true, script: 'jq -r .image_name metadata.json').trim()
    commit_hash = sh(returnStdout: true, script: 'jq -r .commit_hash metadata.json').trim()
    values = [:]
    values.put('image_name', image_name)
    values.put('image_tag', image_tag)
    values.put('commit_hash', commit_hash)
    cdn_file_exists = new File("$currentWs/index_cdn.ejs")
    if (cdn_file_exists.exists()) {
        archiveArtifacts "index_cdn.ejs, cdn_assets.zip"
    }
    currentBuild.description = "${values.image_tag}"
  }
}
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>