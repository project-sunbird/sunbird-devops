<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.31">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.4.1"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.4.1">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>absolute_job_path</name>
          <description></description>
          <defaultValue>somedockerbuild</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.63">
    <script>node(){
    try {
        stage(&apos;get nodes&apos;) {
            envDir = sh(returnStdout: true, script: &quot;echo $JOB_NAME&quot;).split(&apos;/&apos;)[-3].trim()
            label = envDir + &apos;-slave&apos;
            nodeList = [:]
            hudson.model.Hudson.instance.slaves.each {
                if (it.getLabelString().contains(label))
                    nodeList.put(it.getNodeName(), it.getComputer().isOffline())
            }
        }

        stage(&apos;Identify Node&apos;) {
            String ANSI_GREEN = &quot;\u001B[32m&quot;
            String ANSI_NORMAL = &quot;\u001B[0m&quot;
            String ANSI_BOLD = &quot;\u001B[1m&quot;
            String ANSI_RED = &quot;\u001B[31m&quot;
            String ANSI_YELLOW = &quot;\u001B[33m&quot;

            ansiColor(&apos;xterm&apos;) {
                copyArtifacts projectName: params.absolute_job_path, flatten: true
                nodeName = sh(returnStdout: true, script: &apos;jq -r .node_name metadata.json&apos;).trim()
                if (nodeList.size() != 0) {
                    flag = 0
                    println(ANSI_BOLD + ANSI_GREEN + &quot;Found label belonging to this environment: &quot; + label + ANSI_NORMAL)
                    for (slaveName in nodeList.keySet()) {
                        slaveStatus = nodeList.get(slaveName)
                        if (slaveStatus) {
                            println(ANSI_BOLD + ANSI_RED + slaveName + &quot; is offline. Looking for other slaves in label &quot; + label + &quot;...&quot; + ANSI_NORMAL)
                            flag = -1
                            continue
                        } else {
                            println(ANSI_BOLD + ANSI_GREEN + &quot;Found an online slave in label. Continuing on slave: &quot; + slaveName + ANSI_NORMAL)
                            nodeName = slaveName
                            flag = 1
                            break
                        }
                    }
                }
                if (flag == -1) {
                    println(ANSI_BOLD + ANSI_RED + &quot;All slaves are offline in label &quot; + label + &quot;. Aborting!&quot; + ANSI_NORMAL)
                    error &apos;Please check the slave connectivity and rerun..&apos;
                }
                if (flag == 0)
                    println(ANSI_BOLD + ANSI_YELLOW + &quot;Running on general slave with label: &quot; + nodeName + ANSI_NORMAL)
            }
        }
    }
    catch (err) {
        throw err
    }
}

node(nodeName){
    println &apos;in node &apos; + nodeName
}
</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>