- name: Make sure backup dir is empty
  file: path="{{ cassandra_backup_dir }}" state=absent
  ignore_errors: true

- name: Create the directory
  become: yes
  file: path=/data/cassandra/backup state=directory recurse=yes

- name: copy the backup script
  become: yes
  template:
    src: ../../../../deploy/cassandra_backup.py
    dest: /data/cassandra/backup/cassandra_backup.py
    mode: 0755

- set_fact:
    cassandra_backup_gzip_file_name: "cassandra-backup-{{ lookup('pipe', 'date +%Y%m%d') }}-{{ ansible_hostname }}-new"

- name: run the backup script
  become: yes
  shell: python3 cassandra_backup.py --snapshotname "{{ cassandra_backup_gzip_file_name }}" --snapshotdirectory "{{ cassandra_backup_gzip_file_name }}" "{{additional_arguments|d('')}}"
  args:
    chdir: /data/cassandra/backup
  async: 14400
  poll: 30

- name: Check doc_root path
  shell: ls -all /data/cassandra/backup/
  register: doc_data

- name: print doc_root to console
  debug:
    var: doc_data

- name: Ensure azure blob storage container exists
  command: az storage container create  --name {{ cassandra_backup_azure_container_name }}
  ignore_errors: true
  environment:
    AZURE_STORAGE_ACCOUNT: "{{ sunbird_management_storage_account_name }}"
    AZURE_STORAGE_KEY: "{{ sunbird_management_storage_account_key }}"

- name: Upload to azure blob storage
  command: "azcopy copy {{cassandra_backup_gzip_file_name}} 'https://{{sunbird_management_storage_account_name}}.blob.core.windows.net/{{cassandra_backup_azure_container_name}}{{sunbird_management_storage_account_sas}}' --recursive"
  environment:
    AZCOPY_CONCURRENT_FILES: 10 # How many files azcopy should read concurrently.
  args:
    chdir: /data/cassandra/backup
  async: 3600
  poll: 10

- name: clean up backup dir after upload
  file: path="{{ cassandra_backup_dir }}" state=absent
