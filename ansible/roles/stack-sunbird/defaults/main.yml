---
###################### Swarm variables #####################
sunbird_encryption_key:
sunbird_encryption_mode:
sunbird_sso_publickey:
sunbird_learner_service_api_key:
sunbird_keycloak_authServerUrl:
sunbird_keycloak_realm:
sunbird_keycloak_clientId:
sunbird_keycloak_public:
sunbird_cache_store:
sunbird_cache_ttl: 1800
sunbird_es_port: 9300 # If this port is same for all the machines, single vaule is enough! else comma seperated values
sunbird_es_http_port: 9200
actor_replicas: 1
actor_reservation_memory: 768M
actor_limit_memory: 1024M

learner_replicas: 1
learner_reservation_memory: 512M
learner_limit_memory: 1024M
learner_reservation_cpu: 0.2
learner_limit_cpu: 1
learner_java_mem_limit: '-Xmx600m'

#Config Service Vars
config_replicas: 1
config_reservation_memory: 1024M
config_limit_memory: 1024M
config_limit_cpu: 1
config_reservation_cpu: 0

# Notification Service vars
notification_replicas: 1
notification_limit_memory: 500MB
notification_limit_cpu: 1
notification_reserve_memory: 300MB
notification_reserve_cpu: 0.1

#Report service vars
report_replicas: 1
report_reservation_memory: 300M
report_reservation_cpu: 0.1
report_limit_memory: 500M
report_limit_cpu: 1
sunbird_report_summary_table_name: report_summary

player_replicas: 1
player_reservation_memory: 128M
player_limit_memory: 750M
player_reserve_cpu: 0.1
player_limit_cpu: 1

# This variable is not to access learner service but to call the api
# learner-service:9000/org/v1/search
sunbird_learner_service_base_url: http://kong:8000/

telemetry_replicas: 1
telemetry_reservation_memory: 300M
telemetry_limit_memory: 300M
telemetry_reservation_cpu: 0.1
telemetry_limit_cpu: 1
sunbird_telemetry_kafka_servers: "{{groups['kafka']|join(':9092,')}}:9092"
sunbird_data_pipeline_kafka_servers: "{{groups['processing-cluster-kafka']|join(':9092,')}}:9092"

sunbird_build_number:
keycloak_auth_server_url: "{{proto}}://{{proxy_server_name}}/auth"
keycloak_realm: sunbird
sunbird_web_url: "{{proto}}://{{proxy_server_name}}"
sunbird_cassandra_port: 9042
sunbird_portal_title_name: 'portal'
sunbird_keycloak_client_id: 'portal'
vault_sunbird_api_auth_token:
sunbird_public_storage_account_name:
sunbird_public_storage_account_key:
sunbird_container_name:
sunbird_portal_cdn_url:
sunbird_dataservice_url:
sunbird_background_actor_port:
sunbird_fcm_account_key:
sunbird_app_url:
sunbird_image_storage_url:
sunbird_telemetry_dispatchers: kafka
content_service_whitelisted_channels:
content_service_blacklisted_channels:
sunbird_env_logo_url:
desktop_app_storage_url: "https://{{sunbird_public_storage_account_name}}.blob.core.windows.net/{{offline_installer_container_name}}"

telemetry_logstash_heap_size: 512m
telemetry_logstash_replicas: 1
telemetry_logstash_reservation_memory: 1g
telemetry_logstash_limit_memory: 2g
sunbird_telemetry_api:
sunbird_enable_signup:

user_org_replicas: 1
user_org_reservation_memory: 750MB
user_org_limit_memory: 800MB
user_org_limit_cpu: 1
user_org_reservation_cpu: 0

cert_replicas: 1
cert_reservation_memory: 500MB
cert_limit_memory: 550MB
cert_limit_cpu: 1
cert_reservation_cpu: 0.1

cert_registry_replicas: 1
cert_registry_limit_memory: 512MB
cert_registry_limit_cpu: 0.5
cert_registry_reserve_cpu: 256MB
cert_registry_reserve_memory: 0.1

# Encryption service vars
enc_replicas: 1
enc_reservation_memory: 300MB
enc_limit_memory: 500MB
enc_limit_cpu: 0.5
enc_reservation_cpu: 0.1
postgres_port: 5432
enc_dialect: postgres
enc_entry_passwod: password

telemetry_service_threads:
telemetry_local_storage_enabled:
telemetry_local_storage_type:
telemetry_kafka_broker_list:
telemetry_kafka_topic:

# Encryption service
# Learner
sunbird_keycloak_required_action_link_expiration_seconds: 2592000
sunbird_time_zone: "Asia/Kolkata"
# Content-service
sunbird_content_service_log_level: info
sunbird_response_cache_ttl: 180

#adminutil
adminutil_base_url: http://adminutil:4000/
adminutil_sign_endpoint: v1/sign/payload

#learner
sunbird_time_zone: "Asia/Kolkata"

# Telemetry-logstash-datapipline
max_kafka_message_size: "5242880"
sunbird_gzip_enable: true
sunbird_analytics_blob_account_name:
sunbird_analytics_blob_account_key:
sunbird_portal_player_cdn_enabled: 
sunbird_portal_preview_cdn_url:
cdn_file_path:
sunbird_portal_cdn_blob_url:
itext_license_enabled: false

# Knowledge MW Service Config
knowledge_mw_service_replicas: 1
knowledge_mw_service_reservation_memory: 200M
knowledge_mw_service_limit_memory: 1000M
knowledge_mw_service_reservation_cpu: 0.1
knowledge_mw_service_limit_cpu: 1

# Content Service Config
content_service_replicas: 1
content_service_reservation_memory: 600M
content_service_limit_memory: 1000M
content_service_reservation_cpu: 0.1
content_service_limit_cpu: 1
content_java_mem_limit: '-Xmx600m'

# Assessment Service Config
assessment_service_replicas: 1
assessment_service_reservation_memory: 256M
assessment_service_limit_memory: 512M
assessment_service_reservation_cpu: 0.1
assessment_service_limit_cpu: 1

# LMS Service Config
lms_service_replicas: 1
lms_service_reservation_memory: 1000M
lms_service_limit_memory: 1000M
lms_service_reservation_cpu: 0.1
lms_service_limit_cpu: 1
lms_java_mem_limit: '-Xmx600m'

# Print Service Config
print_service_replicas: 1
print_service_reservation_memory: 128M
print_service_limit_memory: 512M
print_service_reservation_cpu: 0.1
print_service_limit_cpu: 0.5

# Search Service Config
search_service_replicas: 1
search_service_reservation_memory: 1000M
search_service_limit_memory: 1000M
search_service_reservation_cpu: 0
search_service_limit_cpu: 1

# Taxonomy Service Config
taxonomy_service_replicas: 1
taxonomy_service_reservation_memory: 256M
taxonomy_service_limit_memory: 512M
taxonomy_service_reservation_cpu: 0
taxonomy_service_limit_cpu: 1

############################ kube vars #######################
hub_org: sunbird
nginx_per_ip_connection_limit: 400
proxy_replicas: 1
proxy_reservation_memory: 32M
proxy_limit_memory: 64M
nginx_per_ip_connection_limit: 400
merge_proxy_server_name: 
proxy_prometheus: false

networks:
  - {name: 'application_default', subnet: '11.11.1.0/24'}

proxy_secrets:
  - name: prom_admin_creds
    value: "{{proxy_prometheus_admin_creds}}"
  - name: site.key
    value: "{{proxy_site_key}}"
  - name: site.crt
    value: "{{proxy_site_crt}}"

merge_proxy_secrets:
  - name: sitemerge.key
    value: "{{proxymerge_site_key}}"
  - name: sitemerge.crt
    value: "{{proxymerge_site_crt}}"

proxy_custom_config:

# These values should be overridden in inventory
proxy_site_key:
proxy_site_crt:
proxy_prometheus_admin_creds:
prometheus_route_prefix: prometheus
prometheus_alertmanager_route_prefix: alertmanager
ekstep_s3_env: "{{sunbird_env}}"
registry_url: "{{proto}}://{{proxy_server_name}}/registry"

upstream_url: "ekstep-public-{{ekstep_s3_env}}.s3-ap-south-1.amazonaws.com"
plugin_upstream_url: "ekstep-public-{{ekstep_s3_env}}.s3-ap-south-1.amazonaws.com"
sunbird_offline_azure_storage_account_url: "{{ sunbird_public_storage_account_name }}.blob.core.windows.net/{{ offline_installer_container_name }}"
# Override this dictionary in your common.yaml
proxy:  
  # repository:  'proxy'
  # image_tag:  2.4.0

sunbird_portal_player_cdn_enabled: false
sunbird_cert_qr_container_name: "certqr"

service_env:
  groups: ../../../../ansible/roles/stack-sunbird/templates/sunbird_groups-service.env
  learner:
    - ../../../../ansible/roles/stack-sunbird/templates/sunbird_learner-service.env
    - ../../../../ansible/roles/stack-sunbird/templates/learner-service_logback.xml
  lms: 
    - ../../../../ansible/roles/stack-sunbird/templates/sunbird_lms-service.env
    - ../../../../ansible/roles/stack-sunbird/templates/lms-service_logback.xml
  knowledgemw: ../../../../ansible/roles/stack-sunbird/templates/sunbird_knowledge-mw-service.env
  apimanager: ../../../../ansible/roles/stack-api-manager/templates/api-manager.env
  cert: ../../../../ansible/roles/stack-sunbird/templates/sunbird_cert-service.env
  certregistry: ../../../../ansible/roles/stack-sunbird/templates/sunbird_cert-registry-service.env
  content: 
    - ../../../../ansible/roles/stack-sunbird/templates/content-service_application.conf
    - ../../../../ansible/roles/stack-sunbird/templates/content-service_logback.xml
  assessment:
    -  ../../../../ansible/roles/stack-sunbird/templates/assessment-service_application.conf
    - ../../../../ansible/roles/stack-sunbird/templates/assessment-service_logback.xml
  enc: ../../../../ansible/roles/stack-sunbird/templates/sunbird_enc-service.env
  notification: ../../../../ansible/roles/stack-sunbird/templates/sunbird_notification-service.env
  telemetry: ../../../../ansible/roles/stack-sunbird/templates/sunbird_telemetry-service.env
  userorg: ../../../../ansible/roles/stack-sunbird/templates/sunbird_user-org-service.env
  player: ../../../../ansible/roles/stack-sunbird/templates/sunbird_player.env
  print: ../../../../ansible/roles/stack-sunbird/templates/sunbird_print-service.env
  search: 
    - ../../../../ansible/roles/stack-sunbird/templates/search-service_application.conf
    - ../../../../ansible/roles/stack-sunbird/templates/search-service_logback.xml
  taxonomy: 
    - ../../../../ansible/roles/stack-sunbird/templates/taxonomy-service_application.conf
    - ../../../../ansible/roles/stack-sunbird/templates/taxonomy-service_logback.xml
  report: ../../../../ansible/roles/stack-sunbird/templates/sunbird_report-service.env
  telemetry-dp-logstash: ../../../../ansible/roles/stack-sunbird/templates/telemetry-logstash-datapipeline.conf
  nodebb: ../../../../ansible/roles/stack-sunbird/templates/sunbird_nodebb.env
  analytics: ../../../../ansible/roles/stack-sunbird/templates/analytics_api_service.conf

sunbird_portal_player_cdn_enabled: false 

########### stack-apimanager defaults vars ##### for kubernetes #########
kong_database: postgres
kong_ssl: true
kong_replicas: 1
kong_reservation_memory: 64M
kong_limit_memory: 256M
kibana_oauth_authenticated_email_domains: []

##### livenessprobe and readinessprobe #######
groups_liveness_readiness:
  healthcheck: true
  readinessProbe:
    httpGet:
      path: /service/health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 2
  livenessProbe:
    httpGet:
      path: /service/health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

lms_liveness_readiness:
  healthcheck: true
  readinessProbe:
    httpGet:
      path: /service/health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 2
  livenessProbe:
    httpGet:
      path: /service/health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

apimanager_liveness_readiness:
  healthcheck: true
  readinessProbe:
    httpGet:
      path: /status
      port: 8001
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 2
  livenessProbe:
    httpGet:
      path: /status
      port: 8001
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 1

assessment_liveness_readiness:
  healthcheck: true
  readinessProbe:
    httpGet:
      path: /service/health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 2
  livenessProbe:
    httpGet:
      path: /service/health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

cert_liveness_readiness:
  healthcheck: true 
  readinessProbe:
    httpGet:
      path: /service/health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 2
  livenessProbe:
    httpGet:
      path: /service/health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

certregistry_liveness_readiness:
  healthcheck: true
  readinessProbe:
    httpGet:
      path: /service/health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 2
  livenessProbe:
    httpGet:
      path: /service/health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

content_liveness_readiness:
  healthcheck: true
  readinessProbe:
    httpGet:
      path: /service/health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 2
  livenessProbe:
    httpGet:
      path: /service/health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

enc_liveness_readiness:
  healthcheck: true
  readinessProbe:
    httpGet:
      path: /service/health
      port: 8013
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 2
  livenessProbe:
    httpGet:
      path: /service/health
      port: 8013
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

knowledgemw_liveness_readiness:
  healthcheck: true
  readinessProbe:
    httpGet:
      path: /service/health
      port: 5000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 2
  livenessProbe:
    httpGet:
      path: /service/health
      port: 5000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

learner_liveness_readiness:
  healthcheck: true
  readinessProbe:
    httpGet:
      path: /service/health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 2
  livenessProbe:
    httpGet:
      path: /service/health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

notification_liveness_readiness:
  healthcheck: true
  readinessProbe:
    httpGet:
      path: /service/health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 2
  livenessProbe:
    httpGet:
      path: /service/health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

player_liveness_readiness:
  healthcheck: true
  readinessProbe:
    httpGet:
      path: /service/health
      port: 3000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 2
  livenessProbe:
    httpGet:
      path: /service/health
      port: 3000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

print_liveness_readiness:
  healthcheck: true 
  readinessProbe:
    httpGet:
      path: /health
      port: 5000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 2
  livenessProbe:
    httpGet:
      path: /health
      port: 5000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

telemetry_liveness_readiness:
  healthcheck: true
  readinessProbe:
    httpGet:
      path: /health
      port: 9001
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 2
  livenessProbe:
    httpGet:
      path: /health
      port: 9001
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

userorg_liveness_readiness:
  readinessProbe:
    httpGet:
      path: /service/health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 2
  livenessProbe:
    httpGet:
      path: /service/health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

search_liveness_readiness:
  healthcheck: true
  readinessProbe:
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 2
  livenessProbe:
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 10
    failureThreshold: 5

taxonomy_liveness_readiness:
  healthcheck: true
  readinessProbe:
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 2
  livenessProbe:
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

search_liveness_readiness:
  healthcheck: true
  readinessProbe:
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 2
  livenessProbe:
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

taxonomy_liveness_readiness:
  healthcheck: true
  readinessProbe:
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 2
  livenessProbe:
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

report_liveness_readiness:
  healthcheck: true
  readinessProbe:
    httpGet:
      path: /health
      port: 3030
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 2
  livenessProbe:
    httpGet:
      path: /service/health
      port: 3030
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 10
    failureThreshold: 5

analytics_liveness_readiness:
  healthcheck: true
  readinessProbe:
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 2
  livenessProbe:
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

adminutil__access_keyprefix: "access"
adminutil__access_keystart: 0
adminutil__access_keycount: 0

adminutil_access_values:
- key_to_register: access
  values_to_pass:
    basepath: "/keys/"
    keyprefix: "{{ adminutil__access_keyprefix }}"
    keystart: "{{ adminutil__access_keystart }}"
    keycount: "{{ adminutil__access_keystart + adminutil__access_keycount - 1 }}"
  role_to_run:
    - decrypt.yml
    - generate-keys.yml
    - copy-to-helm-public.yml

# analytics-service related vars
cassandra:
  keyspace_prefix: "{{ env_name }}_"

default_channel_id: "in.ekstep"
default_channel: "{{default_org_hash_id}}"
channel_data_exhaust_bucket: dev-data-store
metadata_redis_host: "{{ groups['dp-redis'][0] }}"
lp_composite_search_host: "{{ groups['composite-search-cluster'][0] }}"
ingestion_kafka_brokers: "{{groups['ingestion-cluster-kafka']|join(':9092,')}}:9092"
geo_location_city: "{{ env_name }}_geo_location_city"
geo_location_city_ipv4: "{{ env_name }}_geo_location_city_ipv4"
report_config: "{{ env_name }}_report_config"
job_request: "{{ env_name }}_job_request"

#### Exhuats API consumer 
exhaust_api_consumer_ids: ["273f3b18-5dda-4a27-984a-060c7cd398d3"] # being used in analytics api to access the analytics exhaust api
user_profile_read_url: "http://learner-service:9000/v1/user/read/" # being used in analytics api to get user details
org_search_url: "http://learner-service:9000/v1/org/search" # being used in analytics api to get mhrd tenant id
dataexhaust_super_admin_channel: "sunbird" # being used in analytics api for authorizing user with super admin channel