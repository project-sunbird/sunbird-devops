- name: ensure restore dir exists
  file: path="{{ postgresql_restore_dir }}" state=directory owner={{ postgresql_user }} group={{ postgresql_user }}

- set_fact:
    postgresql_restore_gzip_file_path: "{{ postgresql_restore_dir }}/{{ postgresql_restore_gzip_file_name }}"

- name: download a file from azure storage
  include_role:
    name: azure-cloud-storage
    tasks_from: blob-download.yml
  vars:
    blob_container_name: "{{ postgresql_restore_storage }}"
    blob_file_name: "{{ postgresql_restore_gzip_file_name }}"
    local_file_or_folder_path: "{{ postgresql_restore_gzip_file_path  }}"
    storage_account_name: "{{ azure_management_storage_account_name }}"
    storage_account_key: "{{ azure_management_storage_account_key }}"
  when: cloud_service_provider == "azure"

- name: download a file from aws s3
  include_role:
    name: aws-cloud-storage
    tasks_from: download.yml
  vars:
    s3_bucket_name: "{{ aws_management_s3_bucket_name }}"
    aws_access_key_id: "{{ aws_management_bucket_access_key }}"
    aws_secret_access_key: "{{ aws_management_bucket_secret_access_key }}"
    aws_default_region: "{{ aws_region }}"
    local_file_or_folder_path: "{{ postgresql_restore_gzip_file_path  }}"
    s3_path: "{{ postgres_backup_storage }}/{{ postgresql_restore_gzip_file_name }}"
  when: cloud_service_provider == "aws"
  
- name: download file from gcloud storage
  include_role:
    name: gcp-cloud-storage
    tasks_from: download.yml
  vars:
    gcp_bucket_name: "{{ gcloud_management_bucket_name }}"
    dest_folder_name: "{{ postgresql_restore_storage }}"
    dest_file_name: "{{ postgresql_restore_gzip_file_name }}"
    local_file_or_folder_path: "{{ postgresql_restore_gzip_file_path }}"
  when: cloud_service_provider == "gcloud"

- name: ensure postgresql service is stopped
  service: name=postgresql state=stopped

- name: wait for postgresql to be stopped
  wait_for: port={{ postgresql_port }} state=stopped

- name: ensure postgresql service is started
  service: name=postgresql state=started

- name: wait for postgresql to be started
  wait_for: port={{ postgresql_port }} state=started

- name: restore backup file
  command: bash -lc "gunzip < {{ postgresql_restore_gzip_file_path }} | psql"
  async: 3600
  poll: 10
  become_user: "{{ postgresql_user }}"
