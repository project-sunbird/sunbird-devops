- name: copy the backup_config template
  template: src=backup_config.j2 dest=/home/deployer/backup_config.js mode=0777 


- name: create backup directory for config
  become: yes
  file: path=/home/deployer/mongo-backups state=directory

- name: create backup directory for config
  become: yes
  file: path=/home/deployer/mongo-backups/dump state=directory

- name: backup backup_config for config
  become: yes
  shell: mongodump  -o /home/deployer/mongo-backups/dump
  ignore_errors: yes

- name: zip the dump
  become: yes
  shell: zip -r "mongo_backup_{{type}}_`date +%Y%m%d`.zip"  dump/
  args:
    chdir: /home/deployer/mongo-backups

- set_fact:
    mongo_backup_gzip_file_name: "mongo_backup_{{type}}_{{ lookup('pipe', 'date +%Y%m%d') }}.zip"


- set_fact:
    mongo_backup_gzip_file_path: "{{ mongo_backup_dir }}/{{ mongo_backup_gzip_file_name }}"

- name: Ensure azure blob storage container exists
  command: az storage container create  --name {{ mongo_backup_azure_container_name }}
  ignore_errors: true
  environment:
    AZURE_STORAGE_ACCOUNT: "{{ mongo_backup_azure_storage_account_name }}"
    AZURE_STORAGE_KEY: "{{ mongo_backup_azure_storage_access_key }}"
 
- name: Upload to azure blob storage
  command: az storage blob upload --name {{ mongo_backup_gzip_file_name }} --file {{ mongo_backup_gzip_file_path }} --container-name {{ mongo_backup_azure_container_name }}
  environment:
    AZURE_STORAGE_ACCOUNT: "{{ sunbird_management_storage_account_name }}"
    AZURE_STORAGE_KEY: "{{sunbird_management_storage_account_key }}"
  async: 3600
  poll: 10
       
- name: clean up backup dir after upload
  file: path="{{ mongo_backup_dir }}" state=absent

 
- name: run the template for backup config
  become: yes
  shell: mongo < /home/deployer/backup_config.js
  async: 15
  poll: 0

