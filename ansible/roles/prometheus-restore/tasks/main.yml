- name: ensure backup dir exists
  file: path="{{ prometheus_backup_dir }}" state=directory

- name: download a file from azure storage
  become: true
  include_role:
    name: azure-cloud-storage
    tasks_from: blob-download.yml
  vars:
    blob_container_name: "{{ cloud_storage_prometheusbackup_foldername }}"
    blob_file_name: "{{ prometheus_backup_filename }}"
    local_file_or_folder_path: "{{ prometheus_backup_dir }}/{{ prometheus_backup_filepath }}"
    storage_account_name: "{{ cloud_management_storage_accountname }}"
    storage_account_key: "{{ cloud_management_storage_secret }}"
  when: cloud_service_provider == "azure"

- name: download a file from aws s3
  include_role:
    name: aws-cloud-storage
    tasks_from: download.yml
  vars:
    s3_bucket_name: "{{ cloud_storage_prometheusbackup_bucketname }}"
    aws_access_key_id: "{{ cloud_management_storage_accountname }}"
    aws_secret_access_key: "{{ cloud_management_storage_secret }}"
    aws_default_region: "{{ cloud_public_storage_region }}"
    local_file_or_folder_path: "{{ prometheus_backup_dir }}/{{ prometheus_backup_filepath }}"
    s3_path: "{{ cloud_storage_prometheusbackup_foldername }}/{{ prometheus_backup_filename }}"
  when: cloud_service_provider == "aws"

- name: download file from gcloud storage
  include_role:
    name: gcp-cloud-storage
    tasks_from: download.yml
  vars:
    gcp_storage_service_account_name: "{{ cloud_management_storage_accountname }}"
    gcp_storage_key_file: "{{ cloud_management_storage_secret }}"
    gcp_bucket_name: "{{ cloud_storage_prometheusbackup_bucketname }}"
    gcp_path: "{{ cloud_storage_prometheusbackup_foldername }}/{{ prometheus_backup_filename }}"
    local_file_or_folder_path: "{{ prometheus_backup_dir }}/{{ prometheus_backup_filepath }}"
  when: cloud_service_provider == "gcloud"

- name: ensure prometheus is stopped
  shell: "docker service scale {{prometheus_service_name}}=0 && sleep 10"
  delegate_to: "{{manager_host}}"  #variable is passed as extra vars from jenkins

- name: Unarchive backup
  become: true
  unarchive: 
    src: "{{ prometheus_backup_dir }}/{{ prometheus_backup_filename }}"
    dest: "{{prometheus_data_dir}}/"
    extra_opts: [--strip-components=1]
    copy: no 
    owner: nobody 
    group: nogroup

- name: ensure prometheus is started after backup
  shell: "docker service scale {{prometheus_service_name}}=1"
  delegate_to: "{{manager_host}}"

- name: clean up backup dir 
  file: path="{{ prometheus_backup_dir }}" state=absent
