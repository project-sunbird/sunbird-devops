---
- name: setup group
  group: name={{kafka_group}} system=yes

- name: Setup user
  user: name={{kafka_user}} system=yes group={{kafka_group}}

- name: Uncompress the kafka tar
  unarchive: copy=no creates=/opt/kafka_{{kafka_scala_version}}-{{kafka_version}} dest=/opt src="{{ kafka_tarball_location }}/{{ kafka_tarball_name }}" owner={{kafka_user}} group={{kafka_group}}

- name: Link /opt/kafka to the right version
  file: path=/opt/kafka state=link src=/opt/kafka_{{kafka_scala_version}}-{{kafka_version}} owner={{kafka_user}} group={{kafka_group}}

- name: Overwrite the start script so the Java Opts can be changed if Kafka 0.10.0.1
  lineinfile: 
    dest: "/opt/kafka_{{kafka_scala_version}}-{{kafka_version}}/bin/kafka-server-start.sh"
    regexp: "^export KAFKA_HEAP_OPTS=" 
    line: "export KAFKA_HEAP_OPTS=\"{{ kafka_heap_opts }}\""
  notify:
    - restart kafka
  when: kafka_version == "0.10.0.1"

- name: Insert KAFKA_OPTS to kafka-server-start.sh
  lineinfile: dest=/opt/kafka_{{kafka_scala_version}}-{{kafka_version}}/bin/kafka-server-start.sh insertafter="^COMMAND=" line="export KAFKA_OPTS={{ kafka_opts }}"
  notify:
    - restart kafka

- name: Detect if this is a systemd based system
  command: cat /proc/1/comm
  register: init
- set_fact: use_systemd=True
  when: init.stdout == 'systemd'
- set_fact: use_systemd=False
  when: init.stdout != 'systemd'

- name: create upstart config
  template: dest={{kafka_upstart_conf}} owner=root group=root mode=644 src=kafka.conf.j2
  notify:
    - restart kafka
  when: not use_systemd

- name: create systemd config
  template: dest={{kafka_systemd_service}} owner=root group=root mode=644 src=kafka.service.j2
  notify:
    - restart kafka
  when: use_systemd


- name: Create data_dir
  file: path={{kafka_data_dir}} state=directory owner={{kafka_user}} group={{kafka_group}} mode=755

- name: Remove lost+found in the datadir
  file: path="{{kafka_data_dir}}/lost+found" state=absent

- name: Create log_dir
  file: path={{kafka_log_dir}} state=directory owner={{kafka_user}} group={{kafka_group}} mode=755

- name: link conf_dir to /opt/kafka/config
  file: path={{kafka_conf_dir}} state=link src=/opt/kafka/config force=yes

# Setup log4j.properties
- name: create log4j.properties
  template: dest="{{kafka_conf_dir}}/log4j.properties" owner={{kafka_user}} group={{kafka_group}} mode=644 src=log4j.properties.j2
  notify:
    - restart kafka

- name: create zookeper.properties
  template: dest="{{kafka_conf_dir}}/zookeeper.properties" owner={{kafka_user}} group={{kafka_group}} mode=640 src=zookeeper.properties.j2

- name: create systemd config
  template: dest={{zookeeper_systemd_service}} owner=root group=root mode=644 src=zookeeper.service.j2
  notify:
    - restart zookeeper
  when: use_systemd

- command: systemctl daemon-reload
  when: use_systemd


# Setup server.properties
- name: create server.properties
  template: dest="{{kafka_conf_dir}}/server.properties" owner={{kafka_user}} group={{kafka_group}} mode=640 src=server.properties.j2
  notify:
    - restart kafka


- meta: flush_handlers

- name: Create JMX agent directory
  file: path={{jmx_agent_dir}} state=directory owner={{kafka_user}} group={{kafka_group}} mode=755 recurse=yes

- name: Download JMX agent, for exposing monitoring metrics
  get_url:
    url: "{{jmx_agent_download_url}}"
    dest: "{{jmx_agent_dir}}/{{jmx_agent_file}}"
    mode: 0440
