#!/bin/bash
set -eo pipefail

cd {{offline_repo_location}}/

# Run the docker image and run the OS Specific build along with environment specific build
docker run -d --env-file envfile  --env ELECTRON_CACHE="/root/.cache/electron"  --env ELECTRON_BUILDER_CACHE="/root/.cache/electron-builder" --name offline_deploy -w /project electronuserland/builder:wine sleep infinity
docker cp . offline_deploy:/project/
docker exec offline_deploy bash -x /project/setupOfflineInstaller.sh

# Copy the built artifacts
if [ "{{offline_installer_type}}" == "windows32bit" ];
then
    docker cp 'offline_deploy:/project/app_dist/dist/{{installer_version}}/win/ia32/{{environment_name}} Setup {{installer_version}}.exe' '{{offline_repo_location}}/desktop_uploader_assets/{{time}}/{{environment_name}}_{{installer_version}}_windows32bit.exe'

    elif [ "{{offline_installer_type}}" == "windows64bit" ];
    then
        docker cp 'offline_deploy:/project/app_dist/dist/{{installer_version}}/win/x64/{{environment_name}} Setup {{installer_version}}.exe' '{{offline_repo_location}}/desktop_uploader_assets/{{time}}/{{environment_name}}_{{installer_version}}_windows64bit.exe'

          elif [ "{{offline_installer_type}}" == "linux64bit" ];
          then
              docker cp 'offline_deploy:/project/app_dist/dist/{{installer_version}}/linux/x64/{{environment_name}}_{{installer_version}}_amd64.deb' '{{offline_repo_location}}/desktop_uploader_assets/{{time}}/{{environment_name}}_{{installer_version}}_linux64bit.deb'
fi

# Generate the latest.json file
echo "{\"version\":\"{{installer_version}}\",\"windows\":{\"32bit\":\"{{environment_name}}_{{installer_version}}_windows32bit.exe\",\"64bit\":\"{{environment_name}}_{{installer_version}}_windows64bit.exe\"},\"linux\":{\"64bit\":\"{{environment_name}}_{{installer_version}}_linux64bit.deb\"}}" | jq '.' | tee -a '{{offline_repo_location}}/desktop_uploader_assets/{{time}}/latest.json'

echo "Build the installer succesfully"
